//-------------------------------------------------------------------------
// pyocn_mesh_2x7.v
//-------------------------------------------------------------------------
// This file is generated by PyMTL SystemVerilog translation pass.

// PyMTL BitStruct PitonPosition Definition
typedef struct packed {
  logic [7:0] pos_x;
  logic [7:0] pos_y;
} PitonPosition;

// PyMTL BitStruct PitonNoCHeader Definition
typedef struct packed {
  logic [13:0] chipid;
  logic [7:0] xpos;
  logic [7:0] ypos;
  logic [3:0] fbits;
  logic [7:0] plen;
  logic [7:0] mtype;
  logic [7:0] mshr;
  logic [5:0] opt1;
} PitonNoCHeader;

// PyMTL Component InValRdy2Send Definition
// At /home/yo96/pymtl3-net/ocnlib/ifcs/enrdy_adapters.py

module InValRdy2Send__Type_Bits64
(
  input logic [0:0] clk ,
  input logic [0:0] reset ,
  input logic [63:0] in___msg  ,
  output logic [0:0] in___rdy  ,
  input logic [0:0] in___val  ,
  output logic [0:0] send__en  ,
  output logic [63:0] send__msg  ,
  input logic [0:0] send__rdy  
);

  // PyMTL Lambda Block Source
  // At /home/yo96/pymtl3-net/ocnlib/ifcs/enrdy_adapters.py:25
  // s.send.en  //= lambda: s.send.rdy & s.in_.val
  
  always_comb begin : _lambda__s_dut_in2send_0__send_en
    send__en = send__rdy & in___val;
  end

  assign in___rdy = send__rdy;
  assign send__msg = in___msg;

endmodule


// PyMTL Component NormalQueueCtrlRTL Definition
// At /home/yo96/pymtl3-net/ocnlib/rtl/queues.py

module NormalQueueCtrlRTL__num_entries_2
(
  input logic [0:0] clk ,
  output logic [1:0] count ,
  input logic [0:0] deq_en ,
  output logic [0:0] deq_rdy ,
  input logic [0:0] enq_en ,
  output logic [0:0] enq_rdy ,
  output logic [0:0] raddr ,
  input logic [0:0] reset ,
  output logic [0:0] waddr ,
  output logic [0:0] wen 
);
  logic [0:0] deq_xfer;
  logic [0:0] enq_xfer;
  logic [0:0] head;
  logic [0:0] tail;

  // PyMTL Lambda Block Source
  // At /home/yo96/pymtl3-net/ocnlib/rtl/queues.py:87
  // s.deq_rdy //= lambda: s.count > CountType(0)
  
  always_comb begin : _lambda__s_dut_net_routers_0__input_units_0__queue_ctrl_deq_rdy
    deq_rdy = count > 2'd0;
  end

  // PyMTL Lambda Block Source
  // At /home/yo96/pymtl3-net/ocnlib/rtl/queues.py:90
  // s.deq_xfer //= lambda: s.deq_en & s.deq_rdy
  
  always_comb begin : _lambda__s_dut_net_routers_0__input_units_0__queue_ctrl_deq_xfer
    deq_xfer = deq_en & deq_rdy;
  end

  // PyMTL Lambda Block Source
  // At /home/yo96/pymtl3-net/ocnlib/rtl/queues.py:86
  // s.enq_rdy //= lambda: s.count < s.num_entries
  
  always_comb begin : _lambda__s_dut_net_routers_0__input_units_0__queue_ctrl_enq_rdy
    enq_rdy = count < 2'd2;
  end

  // PyMTL Lambda Block Source
  // At /home/yo96/pymtl3-net/ocnlib/rtl/queues.py:89
  // s.enq_xfer //= lambda: s.enq_en & s.enq_rdy
  
  always_comb begin : _lambda__s_dut_net_routers_0__input_units_0__queue_ctrl_enq_xfer
    enq_xfer = enq_en & enq_rdy;
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-net/ocnlib/rtl/queues.py:92
  // @s.update_ff
  // def up_reg():
  // 
  //   if s.reset:
  //     s.head  <<= PtrType(0)
  //     s.tail  <<= PtrType(0)
  //     s.count <<= CountType(0)
  // 
  //   else:
  //     if s.deq_xfer:
  //       s.head <<= s.head + PtrType(1) if s.head < s.last_idx else PtrType(0)
  // 
  //     if s.enq_xfer:
  //       s.tail <<= s.tail + PtrType(1) if s.tail < s.last_idx else PtrType(0)
  // 
  //     if s.enq_xfer & ~s.deq_xfer:
  //       s.count <<= s.count + CountType(1)
  //     if ~s.enq_xfer & s.deq_xfer:
  //       s.count <<= s.count - CountType(1)
  
  always_ff @(posedge clk) begin : up_reg
    if ( reset ) begin
      head <= 1'd0;
      tail <= 1'd0;
      count <= 2'd0;
    end
    else begin
      if ( deq_xfer ) begin
        head <= ( head < 1'd1 ) ? head + 1'd1 : 1'd0;
      end
      if ( enq_xfer ) begin
        tail <= ( tail < 1'd1 ) ? tail + 1'd1 : 1'd0;
      end
      if ( enq_xfer & ( ~deq_xfer ) ) begin
        count <= count + 2'd1;
      end
      if ( ( ~enq_xfer ) & deq_xfer ) begin
        count <= count - 2'd1;
      end
    end
  end

  assign wen = enq_xfer;
  assign waddr = tail;
  assign raddr = head;

endmodule


// PyMTL Component RegisterFile Definition
// Full name: RegisterFile__Type_Bits64__nregs_2__rd_ports_1__wr_ports_1__const_zero_False
// At /home/yo96/pymtl3-clones/pymtl3-master/pymtl3/stdlib/rtl/RegisterFile.py

module RegisterFile__3935155bbb528c9b
(
  input logic [0:0] clk ,
  input logic [0:0] raddr [0:0],
  output logic [63:0] rdata [0:0],
  input logic [0:0] reset ,
  input logic [0:0] waddr [0:0],
  input logic [63:0] wdata [0:0],
  input logic [0:0] wen [0:0]
);
  localparam logic [31:0] __const__rd_ports_at_up_rf_read  = 32'd1;
  localparam logic [31:0] __const__wr_ports_at_up_rf_write  = 32'd1;
  logic [63:0] regs [0:1];

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-clones/pymtl3-master/pymtl3/stdlib/rtl/RegisterFile.py:20
  // @s.update
  // def up_rf_read():
  //   for i in range( rd_ports ):
  //     s.rdata[i] = s.regs[ s.raddr[i] ]
  
  always_comb begin : up_rf_read
    for ( int i = 0; i < __const__rd_ports_at_up_rf_read; i += 1 )
      rdata[i] = regs[raddr[i]];
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-clones/pymtl3-master/pymtl3/stdlib/rtl/RegisterFile.py:32
  // @s.update_ff
  // def up_rf_write():
  //   for i in range( wr_ports ):
  //     if s.wen[i]:
  //       s.regs[ s.waddr[i] ] <<= s.wdata[i]
  
  always_ff @(posedge clk) begin : up_rf_write
    for ( int i = 0; i < __const__wr_ports_at_up_rf_write; i += 1 )
      if ( wen[i] ) begin
        regs[waddr[i]] <= wdata[i];
      end
  end

endmodule


// PyMTL Component NormalQueueDpathRTL Definition
// At /home/yo96/pymtl3-net/ocnlib/rtl/queues.py

module NormalQueueDpathRTL__EntryType_Bits64__num_entries_2
(
  input logic [0:0] clk ,
  output logic [63:0] deq_ret ,
  input logic [63:0] enq_msg ,
  input logic [0:0] raddr ,
  input logic [0:0] reset ,
  input logic [0:0] waddr ,
  input logic [0:0] wen 
);
  //-------------------------------------------------------------
  // Component queue
  //-------------------------------------------------------------

  logic [0:0] queue__clk;
  logic [0:0] queue__raddr [0:0];
  logic [63:0] queue__rdata [0:0];
  logic [0:0] queue__reset;
  logic [0:0] queue__waddr [0:0];
  logic [63:0] queue__wdata [0:0];
  logic [0:0] queue__wen [0:0];

  RegisterFile__3935155bbb528c9b queue
  (
    .clk( queue__clk ),
    .raddr( queue__raddr ),
    .rdata( queue__rdata ),
    .reset( queue__reset ),
    .waddr( queue__waddr ),
    .wdata( queue__wdata ),
    .wen( queue__wen )
  );

  //-------------------------------------------------------------
  // End of component queue
  //-------------------------------------------------------------

  assign queue__clk = clk;
  assign queue__reset = reset;
  assign queue__raddr[0] = raddr;
  assign deq_ret = queue__rdata[0];
  assign queue__wen[0] = wen;
  assign queue__waddr[0] = waddr;
  assign queue__wdata[0] = enq_msg;

endmodule


// PyMTL Component NormalQueueRTL Definition
// At /home/yo96/pymtl3-net/ocnlib/rtl/queues.py

module NormalQueueRTL__EntryType_Bits64__num_entries_2
(
  input logic [0:0] clk ,
  output logic [1:0] count ,
  input logic [0:0] reset ,
  input logic [0:0] deq__en  ,
  output logic [0:0] deq__rdy  ,
  output logic [63:0] deq__ret  ,
  input logic [0:0] enq__en  ,
  input logic [63:0] enq__msg  ,
  output logic [0:0] enq__rdy  
);
  //-------------------------------------------------------------
  // Component ctrl
  //-------------------------------------------------------------

  logic [0:0] ctrl__clk;
  logic [1:0] ctrl__count;
  logic [0:0] ctrl__deq_en;
  logic [0:0] ctrl__deq_rdy;
  logic [0:0] ctrl__enq_en;
  logic [0:0] ctrl__enq_rdy;
  logic [0:0] ctrl__raddr;
  logic [0:0] ctrl__reset;
  logic [0:0] ctrl__waddr;
  logic [0:0] ctrl__wen;

  NormalQueueCtrlRTL__num_entries_2 ctrl
  (
    .clk( ctrl__clk ),
    .count( ctrl__count ),
    .deq_en( ctrl__deq_en ),
    .deq_rdy( ctrl__deq_rdy ),
    .enq_en( ctrl__enq_en ),
    .enq_rdy( ctrl__enq_rdy ),
    .raddr( ctrl__raddr ),
    .reset( ctrl__reset ),
    .waddr( ctrl__waddr ),
    .wen( ctrl__wen )
  );

  //-------------------------------------------------------------
  // End of component ctrl
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component dpath
  //-------------------------------------------------------------

  logic [0:0] dpath__clk;
  logic [63:0] dpath__deq_ret;
  logic [63:0] dpath__enq_msg;
  logic [0:0] dpath__raddr;
  logic [0:0] dpath__reset;
  logic [0:0] dpath__waddr;
  logic [0:0] dpath__wen;

  NormalQueueDpathRTL__EntryType_Bits64__num_entries_2 dpath
  (
    .clk( dpath__clk ),
    .deq_ret( dpath__deq_ret ),
    .enq_msg( dpath__enq_msg ),
    .raddr( dpath__raddr ),
    .reset( dpath__reset ),
    .waddr( dpath__waddr ),
    .wen( dpath__wen )
  );

  //-------------------------------------------------------------
  // End of component dpath
  //-------------------------------------------------------------

  assign ctrl__clk = clk;
  assign ctrl__reset = reset;
  assign dpath__clk = clk;
  assign dpath__reset = reset;
  assign dpath__wen = ctrl__wen;
  assign dpath__waddr = ctrl__waddr;
  assign dpath__raddr = ctrl__raddr;
  assign ctrl__enq_en = enq__en;
  assign enq__rdy = ctrl__enq_rdy;
  assign ctrl__deq_en = deq__en;
  assign deq__rdy = ctrl__deq_rdy;
  assign count = ctrl__count;
  assign dpath__enq_msg = enq__msg;
  assign deq__ret = dpath__deq_ret;

endmodule


// PyMTL Component InputUnitRTL Definition
// At /home/yo96/pymtl3-net/router/InputUnitRTL.py

module InputUnitRTL__PacketType_Bits64__QueueType_NormalQueueRTL
(
  input logic [0:0] clk ,
  input logic [0:0] reset ,
  input logic [0:0] give__en  ,
  output logic [0:0] give__rdy  ,
  output logic [63:0] give__ret  ,
  input logic [0:0] recv__en  ,
  input logic [63:0] recv__msg  ,
  output logic [0:0] recv__rdy  
);
  //-------------------------------------------------------------
  // Component queue
  //-------------------------------------------------------------

  logic [0:0] queue__clk;
  logic [1:0] queue__count;
  logic [0:0] queue__reset;
  logic [0:0] queue__deq__en;
  logic [0:0] queue__deq__rdy;
  logic [63:0] queue__deq__ret;
  logic [0:0] queue__enq__en;
  logic [63:0] queue__enq__msg;
  logic [0:0] queue__enq__rdy;

  NormalQueueRTL__EntryType_Bits64__num_entries_2 queue
  (
    .clk( queue__clk ),
    .count( queue__count ),
    .reset( queue__reset ),
    .deq__en( queue__deq__en ),
    .deq__rdy( queue__deq__rdy ),
    .deq__ret( queue__deq__ret ),
    .enq__en( queue__enq__en ),
    .enq__msg( queue__enq__msg ),
    .enq__rdy( queue__enq__rdy )
  );

  //-------------------------------------------------------------
  // End of component queue
  //-------------------------------------------------------------

  assign queue__clk = clk;
  assign queue__reset = reset;
  assign queue__enq__en = recv__en;
  assign queue__enq__msg = recv__msg;
  assign recv__rdy = queue__enq__rdy;
  assign queue__deq__en = give__en;
  assign give__rdy = queue__deq__rdy;
  assign give__ret = queue__deq__ret;

endmodule


// PyMTL Component OutputUnitRTL Definition
// At /home/yo96/pymtl3-net/router/OutputUnitRTL.py

module OutputUnitRTL__PacketType_Bits64__QueueType_None
(
  input logic [0:0] clk ,
  input logic [0:0] reset ,
  output logic [0:0] get__en  ,
  input logic [0:0] get__rdy  ,
  input logic [63:0] get__ret  ,
  output logic [0:0] send__en  ,
  output logic [63:0] send__msg  ,
  input logic [0:0] send__rdy  
);

  // PyMTL Lambda Block Source
  // At /home/yo96/pymtl3-net/router/OutputUnitRTL.py:50
  // s.send.msg //= lambda: s.get.ret if s.send.en else PacketType()
  
  always_comb begin : _lambda__s_dut_net_routers_0__output_units_0__send_msg
    send__msg = send__en ? get__ret : 64'd0;
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-net/router/OutputUnitRTL.py:52
  // @s.update
  // def up_get_send():
  //   s.get.en  = s.get.rdy & s.send.rdy
  //   s.send.en = s.get.rdy & s.send.rdy
  
  always_comb begin : up_get_send
    get__en = get__rdy & send__rdy;
    send__en = get__rdy & send__rdy;
  end

endmodule


// PyMTL Component Counter Definition
// At /home/yo96/pymtl3-net/ocnlib/rtl/Counter.py

module Counter__Type_Bits8__reset_value_0
(
  input logic [0:0] clk ,
  output logic [7:0] count ,
  input logic [0:0] decr ,
  input logic [0:0] incr ,
  input logic [0:0] load ,
  input logic [7:0] load_value ,
  input logic [0:0] reset 
);
  localparam logic [31:0] __const__reset_value_at_up_count  = 32'd0;

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-net/ocnlib/rtl/Counter.py:28
  // @s.update_ff
  // def up_count():
  // 
  //   if s.reset:
  //     s.count <<= Type( reset_value )
  // 
  //   elif s.load:
  //     s.count <<= s.load_value
  // 
  //   elif s.incr & ~s.decr:
  //     s.count <<= s.count + Type(1)
  // 
  //   elif ~s.incr & s.decr:
  //     s.count <<= s.count - Type(1)
  
  always_ff @(posedge clk) begin : up_count
    if ( reset ) begin
      count <= 8'd0;
    end
    else if ( load ) begin
      count <= load_value;
    end
    else if ( incr & ( ~decr ) ) begin
      count <= count + 8'd1;
    end
    else if ( ( ~incr ) & decr ) begin
      count <= count - 8'd1;
    end
  end

endmodule


// PyMTL Component PitonRouteUnit Definition
// Full name: PitonRouteUnit__PositionType_PitonPosition__plen_field_name_plen
// At /home/yo96/pymtl3-net/piton/PitonRouteUnit.py

module PitonRouteUnit__cc58b8f4c7375c8d
(
  input logic [0:0] clk ,
  output logic [0:0] hold [0:4],
  input PitonPosition pos ,
  input logic [0:0] reset ,
  output logic [0:0] get__en  ,
  input logic [0:0] get__rdy  ,
  input logic [63:0] get__ret  ,
  input logic [0:0] give__en [0:4] ,
  output logic [0:0] give__rdy [0:4] ,
  output logic [63:0] give__ret [0:4] 
);
  localparam logic [31:0] __const__WEST  = 32'd2;
  localparam logic [31:0] __const__SELF  = 32'd4;
  localparam logic [31:0] __const__EAST  = 32'd3;
  localparam logic [31:0] __const__NORTH  = 32'd0;
  localparam logic [31:0] __const__SOUTH  = 32'd1;
  logic [0:0] any_give_en;
  logic [7:0] dst_x;
  logic [7:0] dst_y;
  PitonNoCHeader header;
  logic [0:0] offchip;
  logic [2:0] out_dir;
  logic [2:0] out_dir_r;
  logic [0:0] state;
  logic [0:0] state_next;
  //-------------------------------------------------------------
  // Component counter
  //-------------------------------------------------------------

  logic [0:0] counter__clk;
  logic [7:0] counter__count;
  logic [0:0] counter__decr;
  logic [0:0] counter__incr;
  logic [0:0] counter__load;
  logic [7:0] counter__load_value;
  logic [0:0] counter__reset;

  Counter__Type_Bits8__reset_value_0 counter
  (
    .clk( counter__clk ),
    .count( counter__count ),
    .decr( counter__decr ),
    .incr( counter__incr ),
    .load( counter__load ),
    .load_value( counter__load_value ),
    .reset( counter__reset )
  );

  //-------------------------------------------------------------
  // End of component counter
  //-------------------------------------------------------------

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-net/piton/PitonRouteUnit.py:82
  // @s.update
  // def up_any_give_en():
  //   s.any_give_en = b1(0)
  //   for i in range( s.num_outports ):
  //     if s.give[i].en:
  //       s.any_give_en = b1(1)
  
  always_comb begin : up_any_give_en
    any_give_en = 1'd0;
    for ( int i = 0; i < 5; i += 1 )
      if ( give__en[i] ) begin
        any_give_en = 1'd1;
      end
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-net/piton/PitonRouteUnit.py:112
  // @s.update
  // def up_counter_decr():
  //   s.counter.decr = b1(0)
  //   if s.state != s.STATE_HEADER:
  //     s.counter.decr = s.any_give_en
  
  always_comb begin : up_counter_decr
    counter__decr = 1'd0;
    if ( state != 1'd0 ) begin
      counter__decr = any_give_en;
    end
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-net/piton/PitonRouteUnit.py:118
  // @s.update
  // def up_counter_load():
  //   s.counter.load = b1(0)
  //   if s.state == s.STATE_HEADER:
  //     s.counter.load = ( s.state_next == s.STATE_BODY )
  
  always_comb begin : up_counter_load
    counter__load = 1'd0;
    if ( state == 1'd0 ) begin
      counter__load = state_next == 1'd1;
    end
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-net/piton/PitonRouteUnit.py:128
  // @s.update
  // def up_dst():
  //   s.dst_x = XType(0)
  //   s.dst_y = YType(0)
  //   if ~s.offchip:
  //     s.dst_x = s.header.xpos
  //     s.dst_y = s.header.ypos
  
  always_comb begin : up_dst
    dst_x = 8'd0;
    dst_y = 8'd0;
    if ( ~offchip ) begin
      dst_x = header.xpos;
      dst_y = header.ypos;
    end
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-net/piton/PitonRouteUnit.py:161
  // @s.update
  // def up_give_rdy_hold():
  //   for i in range( s.num_outports ):
  //     s.give[i].rdy = ( b3(i) == s.out_dir ) & s.get.rdy
  //     s.hold[i]     = ( b3(i) == s.out_dir ) & ( s.state == s.STATE_BODY )
  
  always_comb begin : up_give_rdy_hold
    for ( int i = 0; i < 5; i += 1 ) begin
      give__rdy[i] = ( 3'( i ) == out_dir ) & get__rdy;
      hold[i] = ( 3'( i ) == out_dir ) & ( state == 1'd1 );
    end
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-net/piton/PitonRouteUnit.py:136
  // @s.update
  // def up_out_dir():
  //   s.out_dir = s.out_dir_r
  // 
  //   if ( s.state == s.STATE_HEADER ) & s.get.rdy:
  //     s.out_dir = b3(0)
  //     # Offchip port
  //     if ( s.pos.pos_x == XType(0) ) & ( s.pos.pos_y == YType(0) ) & s.offchip:
  //       s.out_dir = b3( WEST )
  // 
  //     elif ( s.dst_x == s.pos.pos_x ) & ( s.dst_y == s.pos.pos_y ):
  //       s.out_dir = b3( SELF )
  //     elif s.dst_x < s.pos.pos_x:
  //       s.out_dir = b3( WEST )
  //     elif s.dst_x > s.pos.pos_x:
  //       s.out_dir = b3( EAST )
  //     elif s.dst_y < s.pos.pos_y:
  //       s.out_dir = b3( NORTH )
  //     elif s.dst_y > s.pos.pos_y:
  //       s.out_dir = b3( SOUTH )
  
  always_comb begin : up_out_dir
    out_dir = out_dir_r;
    if ( ( state == 1'd0 ) & get__rdy ) begin
      out_dir = 3'd0;
      if ( ( ( pos.pos_x == 8'd0 ) & ( pos.pos_y == 8'd0 ) ) & offchip ) begin
        out_dir = 3'd2;
      end
      else if ( ( dst_x == pos.pos_x ) & ( dst_y == pos.pos_y ) ) begin
        out_dir = 3'd4;
      end
      else if ( dst_x < pos.pos_x ) begin
        out_dir = 3'd2;
      end
      else if ( dst_x > pos.pos_x ) begin
        out_dir = 3'd3;
      end
      else if ( dst_y < pos.pos_y ) begin
        out_dir = 3'd0;
      end
      else if ( dst_y > pos.pos_y ) begin
        out_dir = 3'd1;
      end
    end
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-net/piton/PitonRouteUnit.py:98
  // @s.update
  // def up_state_next():
  //   s.state_next = s.state
  //   if s.state == s.STATE_HEADER:
  //     # If the packet has body flits
  //     if s.any_give_en & ( s.header.plen > PLenType(0) ):
  //       s.state_next = s.STATE_BODY
  // 
  //   else: # STATE_BODY
  //     if ( s.counter.count == PLenType(1) ) & s.any_give_en:
  //       s.state_next = s.STATE_HEADER
  
  always_comb begin : up_state_next
    state_next = state;
    if ( state == 1'd0 ) begin
      if ( any_give_en & ( header.plen > 8'd0 ) ) begin
        state_next = 1'd1;
      end
    end
    else if ( ( counter__count == 8'd1 ) & any_give_en ) begin
      state_next = 1'd0;
    end
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-net/piton/PitonRouteUnit.py:157
  // @s.update_ff
  // def up_out_dir_r():
  //   s.out_dir_r <<= s.out_dir
  
  always_ff @(posedge clk) begin : up_out_dir_r
    out_dir_r <= out_dir;
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-net/piton/PitonRouteUnit.py:91
  // @s.update_ff
  // def up_state_r():
  //   if s.reset:
  //     s.state <<= s.STATE_HEADER
  //   else:
  //     s.state <<= s.state_next
  
  always_ff @(posedge clk) begin : up_state_r
    if ( reset ) begin
      state <= 1'd0;
    end
    else
      state <= state_next;
  end

  assign counter__clk = clk;
  assign counter__reset = reset;
  assign counter__incr = 1'd0;
  assign counter__load_value = header.plen;
  assign header.opt1 = get__ret[5:0];
  assign header.mshr = get__ret[13:6];
  assign header.mtype = get__ret[21:14];
  assign header.plen = get__ret[29:22];
  assign header.fbits = get__ret[33:30];
  assign header.ypos = get__ret[41:34];
  assign header.xpos = get__ret[49:42];
  assign header.chipid = get__ret[63:50];
  assign give__ret[0] = get__ret;
  assign give__ret[1] = get__ret;
  assign give__ret[2] = get__ret;
  assign give__ret[3] = get__ret;
  assign give__ret[4] = get__ret;
  assign get__en = any_give_en;
  assign offchip = header.chipid[13:13];

endmodule


// PyMTL Component RegEnRst Definition
// At /home/yo96/pymtl3-clones/pymtl3-master/pymtl3/stdlib/rtl/registers.py

module RegEnRst__Type_Bits5__reset_value_1
(
  input logic [0:0] clk ,
  input logic [0:0] en ,
  input logic [4:0] in_ ,
  output logic [4:0] out ,
  input logic [0:0] reset 
);
  localparam logic [31:0] __const__reset_value_at_up_regenrst  = 32'd1;

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-clones/pymtl3-master/pymtl3/stdlib/rtl/registers.py:55
  // @s.update_ff
  // def up_regenrst():
  //   if s.reset: s.out <<= Type( reset_value )
  //   elif s.en:  s.out <<= s.in_
  
  always_ff @(posedge clk) begin : up_regenrst
    if ( reset ) begin
      out <= 5'd1;
    end
    else if ( en ) begin
      out <= in_;
    end
  end

endmodule


// PyMTL Component RoundRobinArbiterEn Definition
// At /home/yo96/pymtl3-clones/pymtl3-master/pymtl3/stdlib/rtl/arbiters.py

module RoundRobinArbiterEn__nreqs_5
(
  input logic [0:0] clk ,
  input logic [0:0] en ,
  output logic [4:0] grants ,
  input logic [4:0] reqs ,
  input logic [0:0] reset 
);
  localparam logic [31:0] __const__nreqs_at_comb_reqs_int  = 32'd5;
  localparam logic [31:0] __const__nreqsX2_at_comb_reqs_int  = 32'd10;
  localparam logic [31:0] __const__nreqs_at_comb_grants  = 32'd5;
  localparam logic [31:0] __const__nreqs_at_comb_priority_int  = 32'd5;
  localparam logic [31:0] __const__nreqsX2_at_comb_priority_int  = 32'd10;
  localparam logic [31:0] __const__nreqsX2_at_comb_kills  = 32'd10;
  localparam logic [31:0] __const__nreqsX2_at_comb_grants_int  = 32'd10;
  logic [9:0] grants_int;
  logic [10:0] kills;
  logic [0:0] priority_en;
  logic [9:0] priority_int;
  logic [9:0] reqs_int;
  //-------------------------------------------------------------
  // Component priority_reg
  //-------------------------------------------------------------

  logic [0:0] priority_reg__clk;
  logic [0:0] priority_reg__en;
  logic [4:0] priority_reg__in_;
  logic [4:0] priority_reg__out;
  logic [0:0] priority_reg__reset;

  RegEnRst__Type_Bits5__reset_value_1 priority_reg
  (
    .clk( priority_reg__clk ),
    .en( priority_reg__en ),
    .in_( priority_reg__in_ ),
    .out( priority_reg__out ),
    .reset( priority_reg__reset )
  );

  //-------------------------------------------------------------
  // End of component priority_reg
  //-------------------------------------------------------------

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-clones/pymtl3-master/pymtl3/stdlib/rtl/arbiters.py:173
  // @s.update
  // def comb_grants():
  // 
  //   # Assign the output ports
  //   for i in range( nreqs ):
  //     s.grants[i] = s.grants_int[i] | s.grants_int[nreqs+i]
  
  always_comb begin : comb_grants
    for ( int i = 0; i < __const__nreqs_at_comb_grants; i += 1 )
      grants[i] = grants_int[i] | grants_int[__const__nreqs_at_comb_grants + i];
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-clones/pymtl3-master/pymtl3/stdlib/rtl/arbiters.py:223
  // @s.update
  // def comb_grants_int():
  // 
  //   for i in range( nreqsX2 ):
  // 
  //     # Set internal grants
  // 
  //     if s.priority_int[i]:
  //       s.grants_int[i] = s.reqs_int[i]
  // 
  //     else:
  //       s.grants_int[i] = ~s.kills[i] & s.reqs_int[i]
  
  always_comb begin : comb_grants_int
    for ( int i = 0; i < __const__nreqsX2_at_comb_grants_int; i += 1 )
      if ( priority_int[i] ) begin
        grants_int[i] = reqs_int[i];
      end
      else
        grants_int[i] = ( ~kills[i] ) & reqs_int[i];
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-clones/pymtl3-master/pymtl3/stdlib/rtl/arbiters.py:204
  // @s.update
  // def comb_kills():
  // 
  //   # Set kill signals
  // 
  //   s.kills[0] = Bits1(1)
  // 
  //   for i in range( nreqsX2 ):
  // 
  //     if s.priority_int[i]:
  //       s.kills[i+1] = s.reqs_int[i]
  // 
  //     else:
  //       s.kills[i+1] = s.kills[i] | ( ~s.kills[i] & s.reqs_int[i] )
  
  always_comb begin : comb_kills
    kills[0] = 1'd1;
    for ( int i = 0; i < __const__nreqsX2_at_comb_kills; i += 1 )
      if ( priority_int[i] ) begin
        kills[i + 1] = reqs_int[i];
      end
      else
        kills[i + 1] = kills[i] | ( ( ~kills[i] ) & reqs_int[i] );
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-clones/pymtl3-master/pymtl3/stdlib/rtl/arbiters.py:184
  // @s.update
  // def comb_priority_en():
  // 
  //   # Set the priority enable
  //   s.priority_en = ( s.grants != Type(0) ) & s.en
  
  always_comb begin : comb_priority_en
    priority_en = ( grants != 5'd0 ) & en;
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-clones/pymtl3-master/pymtl3/stdlib/rtl/arbiters.py:194
  // @s.update
  // def comb_priority_int():
  // 
  //   s.priority_int[    0:nreqs  ] = s.priority_reg.out
  //   s.priority_int[nreqs:nreqsX2] = Type(0)
  
  always_comb begin : comb_priority_int
    priority_int[4:0] = priority_reg__out;
    priority_int[9:__const__nreqs_at_comb_priority_int] = 5'd0;
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-clones/pymtl3-master/pymtl3/stdlib/rtl/arbiters.py:163
  // @s.update
  // def comb_reqs_int():
  // 
  //   s.reqs_int [    0:nreqs  ] = s.reqs
  //   s.reqs_int [nreqs:nreqsX2] = s.reqs
  
  always_comb begin : comb_reqs_int
    reqs_int[4:0] = reqs;
    reqs_int[9:__const__nreqs_at_comb_reqs_int] = reqs;
  end

  assign priority_reg__clk = clk;
  assign priority_reg__reset = reset;
  assign priority_reg__en = priority_en;
  assign priority_reg__in_[4:1] = grants[3:0];
  assign priority_reg__in_[0:0] = grants[4:4];

endmodule


// PyMTL Component GrantHoldArbiter Definition
// At /home/yo96/pymtl3-net/ocnlib/rtl/GrantHoldArbiter.py

module GrantHoldArbiter__nreqs_5
(
  input logic [0:0] clk ,
  input logic [0:0] en ,
  output logic [4:0] grants ,
  input logic [0:0] hold ,
  input logic [4:0] reqs ,
  input logic [0:0] reset 
);
  logic [4:0] last_r;
  //-------------------------------------------------------------
  // Component arb
  //-------------------------------------------------------------

  logic [0:0] arb__clk;
  logic [0:0] arb__en;
  logic [4:0] arb__grants;
  logic [4:0] arb__reqs;
  logic [0:0] arb__reset;

  RoundRobinArbiterEn__nreqs_5 arb
  (
    .clk( arb__clk ),
    .en( arb__en ),
    .grants( arb__grants ),
    .reqs( arb__reqs ),
    .reset( arb__reset )
  );

  //-------------------------------------------------------------
  // End of component arb
  //-------------------------------------------------------------

  // PyMTL Lambda Block Source
  // At /home/yo96/pymtl3-net/ocnlib/rtl/GrantHoldArbiter.py:31
  // s.arb.reqs //= lambda: BitsN(0) if s.hold else s.reqs
  
  always_comb begin : _lambda__s_dut_net_routers_0__switch_units_0__arbiter_arb_reqs
    arb__reqs = hold ? 5'd0 : reqs;
  end

  // PyMTL Lambda Block Source
  // At /home/yo96/pymtl3-net/ocnlib/rtl/GrantHoldArbiter.py:32
  // s.grants   //= lambda: s.arb.grants if ~s.hold else s.last_r
  
  always_comb begin : _lambda__s_dut_net_routers_0__switch_units_0__arbiter_grants
    grants = ( ~hold ) ? arb__grants : last_r;
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-net/ocnlib/rtl/GrantHoldArbiter.py:34
  // @s.update_ff
  // def up_last_r():
  //   s.last_r <<= s.grants
  
  always_ff @(posedge clk) begin : up_last_r
    last_r <= grants;
  end

  assign arb__clk = clk;
  assign arb__reset = reset;
  assign arb__en = en;

endmodule


// PyMTL Component Encoder Definition
// At /home/yo96/pymtl3-clones/pymtl3-master/pymtl3/stdlib/rtl/Encoder.py

module Encoder__in_nbits_5__out_nbits_3
(
  input logic [0:0] clk ,
  input logic [4:0] in_ ,
  output logic [2:0] out ,
  input logic [0:0] reset 
);

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-clones/pymtl3-master/pymtl3/stdlib/rtl/Encoder.py:31
  // @s.update
  // def encode():
  //   s.out = OutType( 0 )
  //   for i in range( s.in_nbits ):
  //     if s.in_[i]:
  //       s.out = OutType( i )
  
  always_comb begin : encode
    out = 3'd0;
    for ( int i = 0; i < 5; i += 1 )
      if ( in_[i] ) begin
        out = 3'( i );
      end
  end

endmodule


// PyMTL Component Mux Definition
// At /home/yo96/pymtl3-clones/pymtl3-master/pymtl3/stdlib/rtl/arithmetics.py

module Mux__Type_Bits64__ninputs_5
(
  input logic [0:0] clk ,
  input logic [63:0] in_ [0:4],
  output logic [63:0] out ,
  input logic [0:0] reset ,
  input logic [2:0] sel 
);

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-clones/pymtl3-master/pymtl3/stdlib/rtl/arithmetics.py:12
  // @s.update
  // def up_mux():
  //   s.out = s.in_[ s.sel ]
  
  always_comb begin : up_mux
    out = in_[sel];
  end

endmodule


// PyMTL Component SwitchUnitGrantHoldRTL Definition
// At /home/yo96/pymtl3-net/router/SwitchUnitGrantHoldRTL.py

module SwitchUnitGrantHoldRTL__Type_Bits64__num_inports_5
(
  input logic [0:0] clk ,
  input logic [0:0] hold [0:4],
  input logic [0:0] reset ,
  output logic [0:0] get__en [0:4] ,
  input logic [0:0] get__rdy [0:4] ,
  input logic [63:0] get__ret [0:4] ,
  input logic [0:0] give__en  ,
  output logic [0:0] give__rdy  ,
  output logic [63:0] give__ret  
);
  localparam logic [31:0] __const__num_inports_at_up_any_hold  = 32'd5;
  localparam logic [31:0] __const__num_inports_at_up_granted_get_rdy  = 32'd5;
  localparam logic [31:0] __const__i_at__lambda__s_dut_net_routers_0__switch_units_0__get_0__en  = 32'd0;
  localparam logic [31:0] __const__i_at__lambda__s_dut_net_routers_0__switch_units_0__get_1__en  = 32'd1;
  localparam logic [31:0] __const__i_at__lambda__s_dut_net_routers_0__switch_units_0__get_2__en  = 32'd2;
  localparam logic [31:0] __const__i_at__lambda__s_dut_net_routers_0__switch_units_0__get_3__en  = 32'd3;
  localparam logic [31:0] __const__i_at__lambda__s_dut_net_routers_0__switch_units_0__get_4__en  = 32'd4;
  logic [0:0] any_hold;
  logic [0:0] granted_get_rdy;
  //-------------------------------------------------------------
  // Component arbiter
  //-------------------------------------------------------------

  logic [0:0] arbiter__clk;
  logic [0:0] arbiter__en;
  logic [4:0] arbiter__grants;
  logic [0:0] arbiter__hold;
  logic [4:0] arbiter__reqs;
  logic [0:0] arbiter__reset;

  GrantHoldArbiter__nreqs_5 arbiter
  (
    .clk( arbiter__clk ),
    .en( arbiter__en ),
    .grants( arbiter__grants ),
    .hold( arbiter__hold ),
    .reqs( arbiter__reqs ),
    .reset( arbiter__reset )
  );

  //-------------------------------------------------------------
  // End of component arbiter
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component encoder
  //-------------------------------------------------------------

  logic [0:0] encoder__clk;
  logic [4:0] encoder__in_;
  logic [2:0] encoder__out;
  logic [0:0] encoder__reset;

  Encoder__in_nbits_5__out_nbits_3 encoder
  (
    .clk( encoder__clk ),
    .in_( encoder__in_ ),
    .out( encoder__out ),
    .reset( encoder__reset )
  );

  //-------------------------------------------------------------
  // End of component encoder
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component mux
  //-------------------------------------------------------------

  logic [0:0] mux__clk;
  logic [63:0] mux__in_ [0:4];
  logic [63:0] mux__out;
  logic [0:0] mux__reset;
  logic [2:0] mux__sel;

  Mux__Type_Bits64__ninputs_5 mux
  (
    .clk( mux__clk ),
    .in_( mux__in_ ),
    .out( mux__out ),
    .reset( mux__reset ),
    .sel( mux__sel )
  );

  //-------------------------------------------------------------
  // End of component mux
  //-------------------------------------------------------------

  // PyMTL Lambda Block Source
  // At /home/yo96/pymtl3-net/router/SwitchUnitGrantHoldRTL.py:41
  // s.arbiter.en   //= lambda: ~s.any_hold & s.give.en
  
  always_comb begin : _lambda__s_dut_net_routers_0__switch_units_0__arbiter_en
    arbiter__en = ( ~any_hold ) & give__en;
  end

  // PyMTL Lambda Block Source
  // At /home/yo96/pymtl3-net/router/SwitchUnitGrantHoldRTL.py:72
  // s.get[i].en //= lambda: s.give.en & ( s.mux.sel == SelType(i) )
  
  always_comb begin : _lambda__s_dut_net_routers_0__switch_units_0__get_0__en
    get__en[__const__i_at__lambda__s_dut_net_routers_0__switch_units_0__get_0__en] = give__en & ( mux__sel == 3'd0 );
  end

  // PyMTL Lambda Block Source
  // At /home/yo96/pymtl3-net/router/SwitchUnitGrantHoldRTL.py:72
  // s.get[i].en //= lambda: s.give.en & ( s.mux.sel == SelType(i) )
  
  always_comb begin : _lambda__s_dut_net_routers_0__switch_units_0__get_1__en
    get__en[__const__i_at__lambda__s_dut_net_routers_0__switch_units_0__get_1__en] = give__en & ( mux__sel == 3'd1 );
  end

  // PyMTL Lambda Block Source
  // At /home/yo96/pymtl3-net/router/SwitchUnitGrantHoldRTL.py:72
  // s.get[i].en //= lambda: s.give.en & ( s.mux.sel == SelType(i) )
  
  always_comb begin : _lambda__s_dut_net_routers_0__switch_units_0__get_2__en
    get__en[__const__i_at__lambda__s_dut_net_routers_0__switch_units_0__get_2__en] = give__en & ( mux__sel == 3'd2 );
  end

  // PyMTL Lambda Block Source
  // At /home/yo96/pymtl3-net/router/SwitchUnitGrantHoldRTL.py:72
  // s.get[i].en //= lambda: s.give.en & ( s.mux.sel == SelType(i) )
  
  always_comb begin : _lambda__s_dut_net_routers_0__switch_units_0__get_3__en
    get__en[__const__i_at__lambda__s_dut_net_routers_0__switch_units_0__get_3__en] = give__en & ( mux__sel == 3'd3 );
  end

  // PyMTL Lambda Block Source
  // At /home/yo96/pymtl3-net/router/SwitchUnitGrantHoldRTL.py:72
  // s.get[i].en //= lambda: s.give.en & ( s.mux.sel == SelType(i) )
  
  always_comb begin : _lambda__s_dut_net_routers_0__switch_units_0__get_4__en
    get__en[__const__i_at__lambda__s_dut_net_routers_0__switch_units_0__get_4__en] = give__en & ( mux__sel == 3'd4 );
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-net/router/SwitchUnitGrantHoldRTL.py:52
  // @s.update
  // def up_any_hold():
  //   s.any_hold = b1(0)
  //   for i in range( num_inports ):
  //     if s.hold[i]:
  //       s.any_hold = b1(1)
  
  always_comb begin : up_any_hold
    any_hold = 1'd0;
    for ( int i = 0; i < __const__num_inports_at_up_any_hold; i += 1 )
      if ( hold[i] ) begin
        any_hold = 1'd1;
      end
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-net/router/SwitchUnitGrantHoldRTL.py:59
  // @s.update
  // def up_granted_get_rdy():
  //   s.granted_get_rdy = b1(0)
  //   for i in range( num_inports ):
  //     if s.arbiter.grants[i]:
  //       s.granted_get_rdy = s.get[i].rdy
  
  always_comb begin : up_granted_get_rdy
    granted_get_rdy = 1'd0;
    for ( int i = 0; i < __const__num_inports_at_up_granted_get_rdy; i += 1 )
      if ( arbiter__grants[i] ) begin
        granted_get_rdy = get__rdy[i];
      end
  end

  assign arbiter__clk = clk;
  assign arbiter__reset = reset;
  assign arbiter__hold = any_hold;
  assign mux__clk = clk;
  assign mux__reset = reset;
  assign give__ret = mux__out;
  assign encoder__clk = clk;
  assign encoder__reset = reset;
  assign encoder__in_ = arbiter__grants;
  assign mux__sel = encoder__out;
  assign arbiter__reqs[0:0] = get__rdy[0];
  assign mux__in_[0] = get__ret[0];
  assign arbiter__reqs[1:1] = get__rdy[1];
  assign mux__in_[1] = get__ret[1];
  assign arbiter__reqs[2:2] = get__rdy[2];
  assign mux__in_[2] = get__ret[2];
  assign arbiter__reqs[3:3] = get__rdy[3];
  assign mux__in_[3] = get__ret[3];
  assign arbiter__reqs[4:4] = get__rdy[4];
  assign mux__in_[4] = get__ret[4];
  assign give__rdy = granted_get_rdy;

endmodule


// PyMTL Component PitonRouter Definition
// Full name: PitonRouter__PositionType_PitonPosition__InputUnitType_InputUnitRTL__RouteUnitType_PitonRouteUnit__SwitchUnitType_SwitchUnitGrantHoldRTL__OutputUnitType_OutputUnitRTL
// At /home/yo96/pymtl3-net/piton/PitonRouter.py

module PitonRouter__6744c3a676ecb267
(
  input logic [0:0] clk ,
  input PitonPosition pos ,
  input logic [0:0] reset ,
  input logic [0:0] recv__en [0:4] ,
  input logic [63:0] recv__msg [0:4] ,
  output logic [0:0] recv__rdy [0:4] ,
  output logic [0:0] send__en [0:4] ,
  output logic [63:0] send__msg [0:4] ,
  input logic [0:0] send__rdy [0:4] 
);
  //-------------------------------------------------------------
  // Component input_units[0:4]
  //-------------------------------------------------------------

  logic [0:0] input_units__clk [0:4];
  logic [0:0] input_units__reset [0:4];
  logic [0:0] input_units__give__en [0:4];
  logic [0:0] input_units__give__rdy [0:4];
  logic [63:0] input_units__give__ret [0:4];
  logic [0:0] input_units__recv__en [0:4];
  logic [63:0] input_units__recv__msg [0:4];
  logic [0:0] input_units__recv__rdy [0:4];

  InputUnitRTL__PacketType_Bits64__QueueType_NormalQueueRTL input_units__0
  (
    .clk( input_units__clk[0] ),
    .reset( input_units__reset[0] ),
    .give__en( input_units__give__en[0] ),
    .give__rdy( input_units__give__rdy[0] ),
    .give__ret( input_units__give__ret[0] ),
    .recv__en( input_units__recv__en[0] ),
    .recv__msg( input_units__recv__msg[0] ),
    .recv__rdy( input_units__recv__rdy[0] )
  );

  InputUnitRTL__PacketType_Bits64__QueueType_NormalQueueRTL input_units__1
  (
    .clk( input_units__clk[1] ),
    .reset( input_units__reset[1] ),
    .give__en( input_units__give__en[1] ),
    .give__rdy( input_units__give__rdy[1] ),
    .give__ret( input_units__give__ret[1] ),
    .recv__en( input_units__recv__en[1] ),
    .recv__msg( input_units__recv__msg[1] ),
    .recv__rdy( input_units__recv__rdy[1] )
  );

  InputUnitRTL__PacketType_Bits64__QueueType_NormalQueueRTL input_units__2
  (
    .clk( input_units__clk[2] ),
    .reset( input_units__reset[2] ),
    .give__en( input_units__give__en[2] ),
    .give__rdy( input_units__give__rdy[2] ),
    .give__ret( input_units__give__ret[2] ),
    .recv__en( input_units__recv__en[2] ),
    .recv__msg( input_units__recv__msg[2] ),
    .recv__rdy( input_units__recv__rdy[2] )
  );

  InputUnitRTL__PacketType_Bits64__QueueType_NormalQueueRTL input_units__3
  (
    .clk( input_units__clk[3] ),
    .reset( input_units__reset[3] ),
    .give__en( input_units__give__en[3] ),
    .give__rdy( input_units__give__rdy[3] ),
    .give__ret( input_units__give__ret[3] ),
    .recv__en( input_units__recv__en[3] ),
    .recv__msg( input_units__recv__msg[3] ),
    .recv__rdy( input_units__recv__rdy[3] )
  );

  InputUnitRTL__PacketType_Bits64__QueueType_NormalQueueRTL input_units__4
  (
    .clk( input_units__clk[4] ),
    .reset( input_units__reset[4] ),
    .give__en( input_units__give__en[4] ),
    .give__rdy( input_units__give__rdy[4] ),
    .give__ret( input_units__give__ret[4] ),
    .recv__en( input_units__recv__en[4] ),
    .recv__msg( input_units__recv__msg[4] ),
    .recv__rdy( input_units__recv__rdy[4] )
  );

  //-------------------------------------------------------------
  // End of component input_units[0:4]
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component output_units[0:4]
  //-------------------------------------------------------------

  logic [0:0] output_units__clk [0:4];
  logic [0:0] output_units__reset [0:4];
  logic [0:0] output_units__get__en [0:4];
  logic [0:0] output_units__get__rdy [0:4];
  logic [63:0] output_units__get__ret [0:4];
  logic [0:0] output_units__send__en [0:4];
  logic [63:0] output_units__send__msg [0:4];
  logic [0:0] output_units__send__rdy [0:4];

  OutputUnitRTL__PacketType_Bits64__QueueType_None output_units__0
  (
    .clk( output_units__clk[0] ),
    .reset( output_units__reset[0] ),
    .get__en( output_units__get__en[0] ),
    .get__rdy( output_units__get__rdy[0] ),
    .get__ret( output_units__get__ret[0] ),
    .send__en( output_units__send__en[0] ),
    .send__msg( output_units__send__msg[0] ),
    .send__rdy( output_units__send__rdy[0] )
  );

  OutputUnitRTL__PacketType_Bits64__QueueType_None output_units__1
  (
    .clk( output_units__clk[1] ),
    .reset( output_units__reset[1] ),
    .get__en( output_units__get__en[1] ),
    .get__rdy( output_units__get__rdy[1] ),
    .get__ret( output_units__get__ret[1] ),
    .send__en( output_units__send__en[1] ),
    .send__msg( output_units__send__msg[1] ),
    .send__rdy( output_units__send__rdy[1] )
  );

  OutputUnitRTL__PacketType_Bits64__QueueType_None output_units__2
  (
    .clk( output_units__clk[2] ),
    .reset( output_units__reset[2] ),
    .get__en( output_units__get__en[2] ),
    .get__rdy( output_units__get__rdy[2] ),
    .get__ret( output_units__get__ret[2] ),
    .send__en( output_units__send__en[2] ),
    .send__msg( output_units__send__msg[2] ),
    .send__rdy( output_units__send__rdy[2] )
  );

  OutputUnitRTL__PacketType_Bits64__QueueType_None output_units__3
  (
    .clk( output_units__clk[3] ),
    .reset( output_units__reset[3] ),
    .get__en( output_units__get__en[3] ),
    .get__rdy( output_units__get__rdy[3] ),
    .get__ret( output_units__get__ret[3] ),
    .send__en( output_units__send__en[3] ),
    .send__msg( output_units__send__msg[3] ),
    .send__rdy( output_units__send__rdy[3] )
  );

  OutputUnitRTL__PacketType_Bits64__QueueType_None output_units__4
  (
    .clk( output_units__clk[4] ),
    .reset( output_units__reset[4] ),
    .get__en( output_units__get__en[4] ),
    .get__rdy( output_units__get__rdy[4] ),
    .get__ret( output_units__get__ret[4] ),
    .send__en( output_units__send__en[4] ),
    .send__msg( output_units__send__msg[4] ),
    .send__rdy( output_units__send__rdy[4] )
  );

  //-------------------------------------------------------------
  // End of component output_units[0:4]
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component route_units[0:4]
  //-------------------------------------------------------------

  logic [0:0] route_units__clk [0:4];
  logic [0:0] route_units__hold [0:4][0:4];
  PitonPosition route_units__pos [0:4];
  logic [0:0] route_units__reset [0:4];
  logic [0:0] route_units__get__en [0:4];
  logic [0:0] route_units__get__rdy [0:4];
  logic [63:0] route_units__get__ret [0:4];
  logic [0:0] route_units__give__en [0:4][0:4];
  logic [0:0] route_units__give__rdy [0:4][0:4];
  logic [63:0] route_units__give__ret [0:4][0:4];

  PitonRouteUnit__cc58b8f4c7375c8d route_units__0
  (
    .clk( route_units__clk[0] ),
    .hold( route_units__hold[0] ),
    .pos( route_units__pos[0] ),
    .reset( route_units__reset[0] ),
    .get__en( route_units__get__en[0] ),
    .get__rdy( route_units__get__rdy[0] ),
    .get__ret( route_units__get__ret[0] ),
    .give__en( route_units__give__en[0] ),
    .give__rdy( route_units__give__rdy[0] ),
    .give__ret( route_units__give__ret[0] )
  );

  PitonRouteUnit__cc58b8f4c7375c8d route_units__1
  (
    .clk( route_units__clk[1] ),
    .hold( route_units__hold[1] ),
    .pos( route_units__pos[1] ),
    .reset( route_units__reset[1] ),
    .get__en( route_units__get__en[1] ),
    .get__rdy( route_units__get__rdy[1] ),
    .get__ret( route_units__get__ret[1] ),
    .give__en( route_units__give__en[1] ),
    .give__rdy( route_units__give__rdy[1] ),
    .give__ret( route_units__give__ret[1] )
  );

  PitonRouteUnit__cc58b8f4c7375c8d route_units__2
  (
    .clk( route_units__clk[2] ),
    .hold( route_units__hold[2] ),
    .pos( route_units__pos[2] ),
    .reset( route_units__reset[2] ),
    .get__en( route_units__get__en[2] ),
    .get__rdy( route_units__get__rdy[2] ),
    .get__ret( route_units__get__ret[2] ),
    .give__en( route_units__give__en[2] ),
    .give__rdy( route_units__give__rdy[2] ),
    .give__ret( route_units__give__ret[2] )
  );

  PitonRouteUnit__cc58b8f4c7375c8d route_units__3
  (
    .clk( route_units__clk[3] ),
    .hold( route_units__hold[3] ),
    .pos( route_units__pos[3] ),
    .reset( route_units__reset[3] ),
    .get__en( route_units__get__en[3] ),
    .get__rdy( route_units__get__rdy[3] ),
    .get__ret( route_units__get__ret[3] ),
    .give__en( route_units__give__en[3] ),
    .give__rdy( route_units__give__rdy[3] ),
    .give__ret( route_units__give__ret[3] )
  );

  PitonRouteUnit__cc58b8f4c7375c8d route_units__4
  (
    .clk( route_units__clk[4] ),
    .hold( route_units__hold[4] ),
    .pos( route_units__pos[4] ),
    .reset( route_units__reset[4] ),
    .get__en( route_units__get__en[4] ),
    .get__rdy( route_units__get__rdy[4] ),
    .get__ret( route_units__get__ret[4] ),
    .give__en( route_units__give__en[4] ),
    .give__rdy( route_units__give__rdy[4] ),
    .give__ret( route_units__give__ret[4] )
  );

  //-------------------------------------------------------------
  // End of component route_units[0:4]
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component switch_units[0:4]
  //-------------------------------------------------------------

  logic [0:0] switch_units__clk [0:4];
  logic [0:0] switch_units__hold [0:4][0:4];
  logic [0:0] switch_units__reset [0:4];
  logic [0:0] switch_units__get__en [0:4][0:4];
  logic [0:0] switch_units__get__rdy [0:4][0:4];
  logic [63:0] switch_units__get__ret [0:4][0:4];
  logic [0:0] switch_units__give__en [0:4];
  logic [0:0] switch_units__give__rdy [0:4];
  logic [63:0] switch_units__give__ret [0:4];

  SwitchUnitGrantHoldRTL__Type_Bits64__num_inports_5 switch_units__0
  (
    .clk( switch_units__clk[0] ),
    .hold( switch_units__hold[0] ),
    .reset( switch_units__reset[0] ),
    .get__en( switch_units__get__en[0] ),
    .get__rdy( switch_units__get__rdy[0] ),
    .get__ret( switch_units__get__ret[0] ),
    .give__en( switch_units__give__en[0] ),
    .give__rdy( switch_units__give__rdy[0] ),
    .give__ret( switch_units__give__ret[0] )
  );

  SwitchUnitGrantHoldRTL__Type_Bits64__num_inports_5 switch_units__1
  (
    .clk( switch_units__clk[1] ),
    .hold( switch_units__hold[1] ),
    .reset( switch_units__reset[1] ),
    .get__en( switch_units__get__en[1] ),
    .get__rdy( switch_units__get__rdy[1] ),
    .get__ret( switch_units__get__ret[1] ),
    .give__en( switch_units__give__en[1] ),
    .give__rdy( switch_units__give__rdy[1] ),
    .give__ret( switch_units__give__ret[1] )
  );

  SwitchUnitGrantHoldRTL__Type_Bits64__num_inports_5 switch_units__2
  (
    .clk( switch_units__clk[2] ),
    .hold( switch_units__hold[2] ),
    .reset( switch_units__reset[2] ),
    .get__en( switch_units__get__en[2] ),
    .get__rdy( switch_units__get__rdy[2] ),
    .get__ret( switch_units__get__ret[2] ),
    .give__en( switch_units__give__en[2] ),
    .give__rdy( switch_units__give__rdy[2] ),
    .give__ret( switch_units__give__ret[2] )
  );

  SwitchUnitGrantHoldRTL__Type_Bits64__num_inports_5 switch_units__3
  (
    .clk( switch_units__clk[3] ),
    .hold( switch_units__hold[3] ),
    .reset( switch_units__reset[3] ),
    .get__en( switch_units__get__en[3] ),
    .get__rdy( switch_units__get__rdy[3] ),
    .get__ret( switch_units__get__ret[3] ),
    .give__en( switch_units__give__en[3] ),
    .give__rdy( switch_units__give__rdy[3] ),
    .give__ret( switch_units__give__ret[3] )
  );

  SwitchUnitGrantHoldRTL__Type_Bits64__num_inports_5 switch_units__4
  (
    .clk( switch_units__clk[4] ),
    .hold( switch_units__hold[4] ),
    .reset( switch_units__reset[4] ),
    .get__en( switch_units__get__en[4] ),
    .get__rdy( switch_units__get__rdy[4] ),
    .get__ret( switch_units__get__ret[4] ),
    .give__en( switch_units__give__en[4] ),
    .give__rdy( switch_units__give__rdy[4] ),
    .give__ret( switch_units__give__ret[4] )
  );

  //-------------------------------------------------------------
  // End of component switch_units[0:4]
  //-------------------------------------------------------------

  assign input_units__clk[0] = clk;
  assign input_units__reset[0] = reset;
  assign input_units__clk[1] = clk;
  assign input_units__reset[1] = reset;
  assign input_units__clk[2] = clk;
  assign input_units__reset[2] = reset;
  assign input_units__clk[3] = clk;
  assign input_units__reset[3] = reset;
  assign input_units__clk[4] = clk;
  assign input_units__reset[4] = reset;
  assign route_units__clk[0] = clk;
  assign route_units__reset[0] = reset;
  assign route_units__clk[1] = clk;
  assign route_units__reset[1] = reset;
  assign route_units__clk[2] = clk;
  assign route_units__reset[2] = reset;
  assign route_units__clk[3] = clk;
  assign route_units__reset[3] = reset;
  assign route_units__clk[4] = clk;
  assign route_units__reset[4] = reset;
  assign switch_units__clk[0] = clk;
  assign switch_units__reset[0] = reset;
  assign switch_units__clk[1] = clk;
  assign switch_units__reset[1] = reset;
  assign switch_units__clk[2] = clk;
  assign switch_units__reset[2] = reset;
  assign switch_units__clk[3] = clk;
  assign switch_units__reset[3] = reset;
  assign switch_units__clk[4] = clk;
  assign switch_units__reset[4] = reset;
  assign output_units__clk[0] = clk;
  assign output_units__reset[0] = reset;
  assign output_units__clk[1] = clk;
  assign output_units__reset[1] = reset;
  assign output_units__clk[2] = clk;
  assign output_units__reset[2] = reset;
  assign output_units__clk[3] = clk;
  assign output_units__reset[3] = reset;
  assign output_units__clk[4] = clk;
  assign output_units__reset[4] = reset;
  assign input_units__recv__en[0] = recv__en[0];
  assign input_units__recv__msg[0] = recv__msg[0];
  assign recv__rdy[0] = input_units__recv__rdy[0];
  assign input_units__give__en[0] = route_units__get__en[0];
  assign route_units__get__rdy[0] = input_units__give__rdy[0];
  assign route_units__get__ret[0] = input_units__give__ret[0];
  assign route_units__pos[0] = pos;
  assign input_units__recv__en[1] = recv__en[1];
  assign input_units__recv__msg[1] = recv__msg[1];
  assign recv__rdy[1] = input_units__recv__rdy[1];
  assign input_units__give__en[1] = route_units__get__en[1];
  assign route_units__get__rdy[1] = input_units__give__rdy[1];
  assign route_units__get__ret[1] = input_units__give__ret[1];
  assign route_units__pos[1] = pos;
  assign input_units__recv__en[2] = recv__en[2];
  assign input_units__recv__msg[2] = recv__msg[2];
  assign recv__rdy[2] = input_units__recv__rdy[2];
  assign input_units__give__en[2] = route_units__get__en[2];
  assign route_units__get__rdy[2] = input_units__give__rdy[2];
  assign route_units__get__ret[2] = input_units__give__ret[2];
  assign route_units__pos[2] = pos;
  assign input_units__recv__en[3] = recv__en[3];
  assign input_units__recv__msg[3] = recv__msg[3];
  assign recv__rdy[3] = input_units__recv__rdy[3];
  assign input_units__give__en[3] = route_units__get__en[3];
  assign route_units__get__rdy[3] = input_units__give__rdy[3];
  assign route_units__get__ret[3] = input_units__give__ret[3];
  assign route_units__pos[3] = pos;
  assign input_units__recv__en[4] = recv__en[4];
  assign input_units__recv__msg[4] = recv__msg[4];
  assign recv__rdy[4] = input_units__recv__rdy[4];
  assign input_units__give__en[4] = route_units__get__en[4];
  assign route_units__get__rdy[4] = input_units__give__rdy[4];
  assign route_units__get__ret[4] = input_units__give__ret[4];
  assign route_units__pos[4] = pos;
  assign route_units__give__en[0][0] = switch_units__get__en[0][0];
  assign switch_units__get__rdy[0][0] = route_units__give__rdy[0][0];
  assign switch_units__get__ret[0][0] = route_units__give__ret[0][0];
  assign switch_units__hold[0][0] = route_units__hold[0][0];
  assign route_units__give__en[0][1] = switch_units__get__en[1][0];
  assign switch_units__get__rdy[1][0] = route_units__give__rdy[0][1];
  assign switch_units__get__ret[1][0] = route_units__give__ret[0][1];
  assign switch_units__hold[1][0] = route_units__hold[0][1];
  assign route_units__give__en[0][2] = switch_units__get__en[2][0];
  assign switch_units__get__rdy[2][0] = route_units__give__rdy[0][2];
  assign switch_units__get__ret[2][0] = route_units__give__ret[0][2];
  assign switch_units__hold[2][0] = route_units__hold[0][2];
  assign route_units__give__en[0][3] = switch_units__get__en[3][0];
  assign switch_units__get__rdy[3][0] = route_units__give__rdy[0][3];
  assign switch_units__get__ret[3][0] = route_units__give__ret[0][3];
  assign switch_units__hold[3][0] = route_units__hold[0][3];
  assign route_units__give__en[0][4] = switch_units__get__en[4][0];
  assign switch_units__get__rdy[4][0] = route_units__give__rdy[0][4];
  assign switch_units__get__ret[4][0] = route_units__give__ret[0][4];
  assign switch_units__hold[4][0] = route_units__hold[0][4];
  assign route_units__give__en[1][0] = switch_units__get__en[0][1];
  assign switch_units__get__rdy[0][1] = route_units__give__rdy[1][0];
  assign switch_units__get__ret[0][1] = route_units__give__ret[1][0];
  assign switch_units__hold[0][1] = route_units__hold[1][0];
  assign route_units__give__en[1][1] = switch_units__get__en[1][1];
  assign switch_units__get__rdy[1][1] = route_units__give__rdy[1][1];
  assign switch_units__get__ret[1][1] = route_units__give__ret[1][1];
  assign switch_units__hold[1][1] = route_units__hold[1][1];
  assign route_units__give__en[1][2] = switch_units__get__en[2][1];
  assign switch_units__get__rdy[2][1] = route_units__give__rdy[1][2];
  assign switch_units__get__ret[2][1] = route_units__give__ret[1][2];
  assign switch_units__hold[2][1] = route_units__hold[1][2];
  assign route_units__give__en[1][3] = switch_units__get__en[3][1];
  assign switch_units__get__rdy[3][1] = route_units__give__rdy[1][3];
  assign switch_units__get__ret[3][1] = route_units__give__ret[1][3];
  assign switch_units__hold[3][1] = route_units__hold[1][3];
  assign route_units__give__en[1][4] = switch_units__get__en[4][1];
  assign switch_units__get__rdy[4][1] = route_units__give__rdy[1][4];
  assign switch_units__get__ret[4][1] = route_units__give__ret[1][4];
  assign switch_units__hold[4][1] = route_units__hold[1][4];
  assign route_units__give__en[2][0] = switch_units__get__en[0][2];
  assign switch_units__get__rdy[0][2] = route_units__give__rdy[2][0];
  assign switch_units__get__ret[0][2] = route_units__give__ret[2][0];
  assign switch_units__hold[0][2] = route_units__hold[2][0];
  assign route_units__give__en[2][1] = switch_units__get__en[1][2];
  assign switch_units__get__rdy[1][2] = route_units__give__rdy[2][1];
  assign switch_units__get__ret[1][2] = route_units__give__ret[2][1];
  assign switch_units__hold[1][2] = route_units__hold[2][1];
  assign route_units__give__en[2][2] = switch_units__get__en[2][2];
  assign switch_units__get__rdy[2][2] = route_units__give__rdy[2][2];
  assign switch_units__get__ret[2][2] = route_units__give__ret[2][2];
  assign switch_units__hold[2][2] = route_units__hold[2][2];
  assign route_units__give__en[2][3] = switch_units__get__en[3][2];
  assign switch_units__get__rdy[3][2] = route_units__give__rdy[2][3];
  assign switch_units__get__ret[3][2] = route_units__give__ret[2][3];
  assign switch_units__hold[3][2] = route_units__hold[2][3];
  assign route_units__give__en[2][4] = switch_units__get__en[4][2];
  assign switch_units__get__rdy[4][2] = route_units__give__rdy[2][4];
  assign switch_units__get__ret[4][2] = route_units__give__ret[2][4];
  assign switch_units__hold[4][2] = route_units__hold[2][4];
  assign route_units__give__en[3][0] = switch_units__get__en[0][3];
  assign switch_units__get__rdy[0][3] = route_units__give__rdy[3][0];
  assign switch_units__get__ret[0][3] = route_units__give__ret[3][0];
  assign switch_units__hold[0][3] = route_units__hold[3][0];
  assign route_units__give__en[3][1] = switch_units__get__en[1][3];
  assign switch_units__get__rdy[1][3] = route_units__give__rdy[3][1];
  assign switch_units__get__ret[1][3] = route_units__give__ret[3][1];
  assign switch_units__hold[1][3] = route_units__hold[3][1];
  assign route_units__give__en[3][2] = switch_units__get__en[2][3];
  assign switch_units__get__rdy[2][3] = route_units__give__rdy[3][2];
  assign switch_units__get__ret[2][3] = route_units__give__ret[3][2];
  assign switch_units__hold[2][3] = route_units__hold[3][2];
  assign route_units__give__en[3][3] = switch_units__get__en[3][3];
  assign switch_units__get__rdy[3][3] = route_units__give__rdy[3][3];
  assign switch_units__get__ret[3][3] = route_units__give__ret[3][3];
  assign switch_units__hold[3][3] = route_units__hold[3][3];
  assign route_units__give__en[3][4] = switch_units__get__en[4][3];
  assign switch_units__get__rdy[4][3] = route_units__give__rdy[3][4];
  assign switch_units__get__ret[4][3] = route_units__give__ret[3][4];
  assign switch_units__hold[4][3] = route_units__hold[3][4];
  assign route_units__give__en[4][0] = switch_units__get__en[0][4];
  assign switch_units__get__rdy[0][4] = route_units__give__rdy[4][0];
  assign switch_units__get__ret[0][4] = route_units__give__ret[4][0];
  assign switch_units__hold[0][4] = route_units__hold[4][0];
  assign route_units__give__en[4][1] = switch_units__get__en[1][4];
  assign switch_units__get__rdy[1][4] = route_units__give__rdy[4][1];
  assign switch_units__get__ret[1][4] = route_units__give__ret[4][1];
  assign switch_units__hold[1][4] = route_units__hold[4][1];
  assign route_units__give__en[4][2] = switch_units__get__en[2][4];
  assign switch_units__get__rdy[2][4] = route_units__give__rdy[4][2];
  assign switch_units__get__ret[2][4] = route_units__give__ret[4][2];
  assign switch_units__hold[2][4] = route_units__hold[4][2];
  assign route_units__give__en[4][3] = switch_units__get__en[3][4];
  assign switch_units__get__rdy[3][4] = route_units__give__rdy[4][3];
  assign switch_units__get__ret[3][4] = route_units__give__ret[4][3];
  assign switch_units__hold[3][4] = route_units__hold[4][3];
  assign route_units__give__en[4][4] = switch_units__get__en[4][4];
  assign switch_units__get__rdy[4][4] = route_units__give__rdy[4][4];
  assign switch_units__get__ret[4][4] = route_units__give__ret[4][4];
  assign switch_units__hold[4][4] = route_units__hold[4][4];
  assign switch_units__give__en[0] = output_units__get__en[0];
  assign output_units__get__rdy[0] = switch_units__give__rdy[0];
  assign output_units__get__ret[0] = switch_units__give__ret[0];
  assign send__en[0] = output_units__send__en[0];
  assign send__msg[0] = output_units__send__msg[0];
  assign output_units__send__rdy[0] = send__rdy[0];
  assign switch_units__give__en[1] = output_units__get__en[1];
  assign output_units__get__rdy[1] = switch_units__give__rdy[1];
  assign output_units__get__ret[1] = switch_units__give__ret[1];
  assign send__en[1] = output_units__send__en[1];
  assign send__msg[1] = output_units__send__msg[1];
  assign output_units__send__rdy[1] = send__rdy[1];
  assign switch_units__give__en[2] = output_units__get__en[2];
  assign output_units__get__rdy[2] = switch_units__give__rdy[2];
  assign output_units__get__ret[2] = switch_units__give__ret[2];
  assign send__en[2] = output_units__send__en[2];
  assign send__msg[2] = output_units__send__msg[2];
  assign output_units__send__rdy[2] = send__rdy[2];
  assign switch_units__give__en[3] = output_units__get__en[3];
  assign output_units__get__rdy[3] = switch_units__give__rdy[3];
  assign output_units__get__ret[3] = switch_units__give__ret[3];
  assign send__en[3] = output_units__send__en[3];
  assign send__msg[3] = output_units__send__msg[3];
  assign output_units__send__rdy[3] = send__rdy[3];
  assign switch_units__give__en[4] = output_units__get__en[4];
  assign output_units__get__rdy[4] = switch_units__give__rdy[4];
  assign output_units__get__ret[4] = switch_units__give__ret[4];
  assign send__en[4] = output_units__send__en[4];
  assign send__msg[4] = output_units__send__msg[4];
  assign output_units__send__rdy[4] = send__rdy[4];

endmodule


// PyMTL Component PitonMeshNet Definition
// At /home/yo96/pymtl3-net/piton/PitonMeshNet.py

module PitonMeshNet__PositionType_PitonPosition__ncols_2__nrows_7
(
  input logic [0:0] clk ,
  input logic [0:0] reset ,
  input logic [0:0] offchip_recv__en  ,
  input logic [63:0] offchip_recv__msg  ,
  output logic [0:0] offchip_recv__rdy  ,
  output logic [0:0] offchip_send__en  ,
  output logic [63:0] offchip_send__msg  ,
  input logic [0:0] offchip_send__rdy  ,
  input logic [0:0] recv__en [0:13] ,
  input logic [63:0] recv__msg [0:13] ,
  output logic [0:0] recv__rdy [0:13] ,
  output logic [0:0] send__en [0:13] ,
  output logic [63:0] send__msg [0:13] ,
  input logic [0:0] send__rdy [0:13] 
);
  //-------------------------------------------------------------
  // Component routers[0:13]
  //-------------------------------------------------------------

  logic [0:0] routers__clk [0:13];
  PitonPosition routers__pos [0:13];
  logic [0:0] routers__reset [0:13];
  logic [0:0] routers__recv__en [0:13][0:4];
  logic [63:0] routers__recv__msg [0:13][0:4];
  logic [0:0] routers__recv__rdy [0:13][0:4];
  logic [0:0] routers__send__en [0:13][0:4];
  logic [63:0] routers__send__msg [0:13][0:4];
  logic [0:0] routers__send__rdy [0:13][0:4];

  PitonRouter__6744c3a676ecb267 routers__0
  (
    .clk( routers__clk[0] ),
    .pos( routers__pos[0] ),
    .reset( routers__reset[0] ),
    .recv__en( routers__recv__en[0] ),
    .recv__msg( routers__recv__msg[0] ),
    .recv__rdy( routers__recv__rdy[0] ),
    .send__en( routers__send__en[0] ),
    .send__msg( routers__send__msg[0] ),
    .send__rdy( routers__send__rdy[0] )
  );

  PitonRouter__6744c3a676ecb267 routers__1
  (
    .clk( routers__clk[1] ),
    .pos( routers__pos[1] ),
    .reset( routers__reset[1] ),
    .recv__en( routers__recv__en[1] ),
    .recv__msg( routers__recv__msg[1] ),
    .recv__rdy( routers__recv__rdy[1] ),
    .send__en( routers__send__en[1] ),
    .send__msg( routers__send__msg[1] ),
    .send__rdy( routers__send__rdy[1] )
  );

  PitonRouter__6744c3a676ecb267 routers__2
  (
    .clk( routers__clk[2] ),
    .pos( routers__pos[2] ),
    .reset( routers__reset[2] ),
    .recv__en( routers__recv__en[2] ),
    .recv__msg( routers__recv__msg[2] ),
    .recv__rdy( routers__recv__rdy[2] ),
    .send__en( routers__send__en[2] ),
    .send__msg( routers__send__msg[2] ),
    .send__rdy( routers__send__rdy[2] )
  );

  PitonRouter__6744c3a676ecb267 routers__3
  (
    .clk( routers__clk[3] ),
    .pos( routers__pos[3] ),
    .reset( routers__reset[3] ),
    .recv__en( routers__recv__en[3] ),
    .recv__msg( routers__recv__msg[3] ),
    .recv__rdy( routers__recv__rdy[3] ),
    .send__en( routers__send__en[3] ),
    .send__msg( routers__send__msg[3] ),
    .send__rdy( routers__send__rdy[3] )
  );

  PitonRouter__6744c3a676ecb267 routers__4
  (
    .clk( routers__clk[4] ),
    .pos( routers__pos[4] ),
    .reset( routers__reset[4] ),
    .recv__en( routers__recv__en[4] ),
    .recv__msg( routers__recv__msg[4] ),
    .recv__rdy( routers__recv__rdy[4] ),
    .send__en( routers__send__en[4] ),
    .send__msg( routers__send__msg[4] ),
    .send__rdy( routers__send__rdy[4] )
  );

  PitonRouter__6744c3a676ecb267 routers__5
  (
    .clk( routers__clk[5] ),
    .pos( routers__pos[5] ),
    .reset( routers__reset[5] ),
    .recv__en( routers__recv__en[5] ),
    .recv__msg( routers__recv__msg[5] ),
    .recv__rdy( routers__recv__rdy[5] ),
    .send__en( routers__send__en[5] ),
    .send__msg( routers__send__msg[5] ),
    .send__rdy( routers__send__rdy[5] )
  );

  PitonRouter__6744c3a676ecb267 routers__6
  (
    .clk( routers__clk[6] ),
    .pos( routers__pos[6] ),
    .reset( routers__reset[6] ),
    .recv__en( routers__recv__en[6] ),
    .recv__msg( routers__recv__msg[6] ),
    .recv__rdy( routers__recv__rdy[6] ),
    .send__en( routers__send__en[6] ),
    .send__msg( routers__send__msg[6] ),
    .send__rdy( routers__send__rdy[6] )
  );

  PitonRouter__6744c3a676ecb267 routers__7
  (
    .clk( routers__clk[7] ),
    .pos( routers__pos[7] ),
    .reset( routers__reset[7] ),
    .recv__en( routers__recv__en[7] ),
    .recv__msg( routers__recv__msg[7] ),
    .recv__rdy( routers__recv__rdy[7] ),
    .send__en( routers__send__en[7] ),
    .send__msg( routers__send__msg[7] ),
    .send__rdy( routers__send__rdy[7] )
  );

  PitonRouter__6744c3a676ecb267 routers__8
  (
    .clk( routers__clk[8] ),
    .pos( routers__pos[8] ),
    .reset( routers__reset[8] ),
    .recv__en( routers__recv__en[8] ),
    .recv__msg( routers__recv__msg[8] ),
    .recv__rdy( routers__recv__rdy[8] ),
    .send__en( routers__send__en[8] ),
    .send__msg( routers__send__msg[8] ),
    .send__rdy( routers__send__rdy[8] )
  );

  PitonRouter__6744c3a676ecb267 routers__9
  (
    .clk( routers__clk[9] ),
    .pos( routers__pos[9] ),
    .reset( routers__reset[9] ),
    .recv__en( routers__recv__en[9] ),
    .recv__msg( routers__recv__msg[9] ),
    .recv__rdy( routers__recv__rdy[9] ),
    .send__en( routers__send__en[9] ),
    .send__msg( routers__send__msg[9] ),
    .send__rdy( routers__send__rdy[9] )
  );

  PitonRouter__6744c3a676ecb267 routers__10
  (
    .clk( routers__clk[10] ),
    .pos( routers__pos[10] ),
    .reset( routers__reset[10] ),
    .recv__en( routers__recv__en[10] ),
    .recv__msg( routers__recv__msg[10] ),
    .recv__rdy( routers__recv__rdy[10] ),
    .send__en( routers__send__en[10] ),
    .send__msg( routers__send__msg[10] ),
    .send__rdy( routers__send__rdy[10] )
  );

  PitonRouter__6744c3a676ecb267 routers__11
  (
    .clk( routers__clk[11] ),
    .pos( routers__pos[11] ),
    .reset( routers__reset[11] ),
    .recv__en( routers__recv__en[11] ),
    .recv__msg( routers__recv__msg[11] ),
    .recv__rdy( routers__recv__rdy[11] ),
    .send__en( routers__send__en[11] ),
    .send__msg( routers__send__msg[11] ),
    .send__rdy( routers__send__rdy[11] )
  );

  PitonRouter__6744c3a676ecb267 routers__12
  (
    .clk( routers__clk[12] ),
    .pos( routers__pos[12] ),
    .reset( routers__reset[12] ),
    .recv__en( routers__recv__en[12] ),
    .recv__msg( routers__recv__msg[12] ),
    .recv__rdy( routers__recv__rdy[12] ),
    .send__en( routers__send__en[12] ),
    .send__msg( routers__send__msg[12] ),
    .send__rdy( routers__send__rdy[12] )
  );

  PitonRouter__6744c3a676ecb267 routers__13
  (
    .clk( routers__clk[13] ),
    .pos( routers__pos[13] ),
    .reset( routers__reset[13] ),
    .recv__en( routers__recv__en[13] ),
    .recv__msg( routers__recv__msg[13] ),
    .recv__rdy( routers__recv__rdy[13] ),
    .send__en( routers__send__en[13] ),
    .send__msg( routers__send__msg[13] ),
    .send__rdy( routers__send__rdy[13] )
  );

  //-------------------------------------------------------------
  // End of component routers[0:13]
  //-------------------------------------------------------------

  assign routers__clk[0] = clk;
  assign routers__reset[0] = reset;
  assign routers__clk[1] = clk;
  assign routers__reset[1] = reset;
  assign routers__clk[2] = clk;
  assign routers__reset[2] = reset;
  assign routers__clk[3] = clk;
  assign routers__reset[3] = reset;
  assign routers__clk[4] = clk;
  assign routers__reset[4] = reset;
  assign routers__clk[5] = clk;
  assign routers__reset[5] = reset;
  assign routers__clk[6] = clk;
  assign routers__reset[6] = reset;
  assign routers__clk[7] = clk;
  assign routers__reset[7] = reset;
  assign routers__clk[8] = clk;
  assign routers__reset[8] = reset;
  assign routers__clk[9] = clk;
  assign routers__reset[9] = reset;
  assign routers__clk[10] = clk;
  assign routers__reset[10] = reset;
  assign routers__clk[11] = clk;
  assign routers__reset[11] = reset;
  assign routers__clk[12] = clk;
  assign routers__reset[12] = reset;
  assign routers__clk[13] = clk;
  assign routers__reset[13] = reset;
  assign routers__pos[0] = { 8'd0, 8'd0 };
  assign routers__pos[1] = { 8'd1, 8'd0 };
  assign routers__pos[2] = { 8'd0, 8'd1 };
  assign routers__pos[3] = { 8'd1, 8'd1 };
  assign routers__pos[4] = { 8'd0, 8'd2 };
  assign routers__pos[5] = { 8'd1, 8'd2 };
  assign routers__pos[6] = { 8'd0, 8'd3 };
  assign routers__pos[7] = { 8'd1, 8'd3 };
  assign routers__pos[8] = { 8'd0, 8'd4 };
  assign routers__pos[9] = { 8'd1, 8'd4 };
  assign routers__pos[10] = { 8'd0, 8'd5 };
  assign routers__pos[11] = { 8'd1, 8'd5 };
  assign routers__pos[12] = { 8'd0, 8'd6 };
  assign routers__pos[13] = { 8'd1, 8'd6 };
  assign routers__recv__en[2][0] = routers__send__en[0][1];
  assign routers__recv__msg[2][0] = routers__send__msg[0][1];
  assign routers__send__rdy[0][1] = routers__recv__rdy[2][0];
  assign routers__recv__en[1][2] = routers__send__en[0][3];
  assign routers__recv__msg[1][2] = routers__send__msg[0][3];
  assign routers__send__rdy[0][3] = routers__recv__rdy[1][2];
  assign routers__recv__en[0][4] = recv__en[0];
  assign routers__recv__msg[0][4] = recv__msg[0];
  assign recv__rdy[0] = routers__recv__rdy[0][4];
  assign send__en[0] = routers__send__en[0][4];
  assign send__msg[0] = routers__send__msg[0][4];
  assign routers__send__rdy[0][4] = send__rdy[0];
  assign routers__recv__en[0][2] = offchip_recv__en;
  assign routers__recv__msg[0][2] = offchip_recv__msg;
  assign offchip_recv__rdy = routers__recv__rdy[0][2];
  assign offchip_send__en = routers__send__en[0][2];
  assign offchip_send__msg = routers__send__msg[0][2];
  assign routers__send__rdy[0][2] = offchip_send__rdy;
  assign routers__send__rdy[0][0] = 1'd0;
  assign routers__recv__en[0][0] = 1'd0;
  assign routers__recv__msg[0][0] = 64'd0;
  assign routers__recv__en[3][0] = routers__send__en[1][1];
  assign routers__recv__msg[3][0] = routers__send__msg[1][1];
  assign routers__send__rdy[1][1] = routers__recv__rdy[3][0];
  assign routers__recv__en[0][3] = routers__send__en[1][2];
  assign routers__recv__msg[0][3] = routers__send__msg[1][2];
  assign routers__send__rdy[1][2] = routers__recv__rdy[0][3];
  assign routers__recv__en[1][4] = recv__en[1];
  assign routers__recv__msg[1][4] = recv__msg[1];
  assign recv__rdy[1] = routers__recv__rdy[1][4];
  assign send__en[1] = routers__send__en[1][4];
  assign send__msg[1] = routers__send__msg[1][4];
  assign routers__send__rdy[1][4] = send__rdy[1];
  assign routers__send__rdy[1][0] = 1'd0;
  assign routers__recv__en[1][0] = 1'd0;
  assign routers__recv__msg[1][0] = 64'd0;
  assign routers__send__rdy[1][3] = 1'd0;
  assign routers__recv__en[1][3] = 1'd0;
  assign routers__recv__msg[1][3] = 64'd0;
  assign routers__recv__en[0][1] = routers__send__en[2][0];
  assign routers__recv__msg[0][1] = routers__send__msg[2][0];
  assign routers__send__rdy[2][0] = routers__recv__rdy[0][1];
  assign routers__recv__en[4][0] = routers__send__en[2][1];
  assign routers__recv__msg[4][0] = routers__send__msg[2][1];
  assign routers__send__rdy[2][1] = routers__recv__rdy[4][0];
  assign routers__recv__en[3][2] = routers__send__en[2][3];
  assign routers__recv__msg[3][2] = routers__send__msg[2][3];
  assign routers__send__rdy[2][3] = routers__recv__rdy[3][2];
  assign routers__recv__en[2][4] = recv__en[2];
  assign routers__recv__msg[2][4] = recv__msg[2];
  assign recv__rdy[2] = routers__recv__rdy[2][4];
  assign send__en[2] = routers__send__en[2][4];
  assign send__msg[2] = routers__send__msg[2][4];
  assign routers__send__rdy[2][4] = send__rdy[2];
  assign routers__send__rdy[2][2] = 1'd0;
  assign routers__recv__en[2][2] = 1'd0;
  assign routers__recv__msg[2][2] = 64'd0;
  assign routers__recv__en[1][1] = routers__send__en[3][0];
  assign routers__recv__msg[1][1] = routers__send__msg[3][0];
  assign routers__send__rdy[3][0] = routers__recv__rdy[1][1];
  assign routers__recv__en[5][0] = routers__send__en[3][1];
  assign routers__recv__msg[5][0] = routers__send__msg[3][1];
  assign routers__send__rdy[3][1] = routers__recv__rdy[5][0];
  assign routers__recv__en[2][3] = routers__send__en[3][2];
  assign routers__recv__msg[2][3] = routers__send__msg[3][2];
  assign routers__send__rdy[3][2] = routers__recv__rdy[2][3];
  assign routers__recv__en[3][4] = recv__en[3];
  assign routers__recv__msg[3][4] = recv__msg[3];
  assign recv__rdy[3] = routers__recv__rdy[3][4];
  assign send__en[3] = routers__send__en[3][4];
  assign send__msg[3] = routers__send__msg[3][4];
  assign routers__send__rdy[3][4] = send__rdy[3];
  assign routers__send__rdy[3][3] = 1'd0;
  assign routers__recv__en[3][3] = 1'd0;
  assign routers__recv__msg[3][3] = 64'd0;
  assign routers__recv__en[2][1] = routers__send__en[4][0];
  assign routers__recv__msg[2][1] = routers__send__msg[4][0];
  assign routers__send__rdy[4][0] = routers__recv__rdy[2][1];
  assign routers__recv__en[6][0] = routers__send__en[4][1];
  assign routers__recv__msg[6][0] = routers__send__msg[4][1];
  assign routers__send__rdy[4][1] = routers__recv__rdy[6][0];
  assign routers__recv__en[5][2] = routers__send__en[4][3];
  assign routers__recv__msg[5][2] = routers__send__msg[4][3];
  assign routers__send__rdy[4][3] = routers__recv__rdy[5][2];
  assign routers__recv__en[4][4] = recv__en[4];
  assign routers__recv__msg[4][4] = recv__msg[4];
  assign recv__rdy[4] = routers__recv__rdy[4][4];
  assign send__en[4] = routers__send__en[4][4];
  assign send__msg[4] = routers__send__msg[4][4];
  assign routers__send__rdy[4][4] = send__rdy[4];
  assign routers__send__rdy[4][2] = 1'd0;
  assign routers__recv__en[4][2] = 1'd0;
  assign routers__recv__msg[4][2] = 64'd0;
  assign routers__recv__en[3][1] = routers__send__en[5][0];
  assign routers__recv__msg[3][1] = routers__send__msg[5][0];
  assign routers__send__rdy[5][0] = routers__recv__rdy[3][1];
  assign routers__recv__en[7][0] = routers__send__en[5][1];
  assign routers__recv__msg[7][0] = routers__send__msg[5][1];
  assign routers__send__rdy[5][1] = routers__recv__rdy[7][0];
  assign routers__recv__en[4][3] = routers__send__en[5][2];
  assign routers__recv__msg[4][3] = routers__send__msg[5][2];
  assign routers__send__rdy[5][2] = routers__recv__rdy[4][3];
  assign routers__recv__en[5][4] = recv__en[5];
  assign routers__recv__msg[5][4] = recv__msg[5];
  assign recv__rdy[5] = routers__recv__rdy[5][4];
  assign send__en[5] = routers__send__en[5][4];
  assign send__msg[5] = routers__send__msg[5][4];
  assign routers__send__rdy[5][4] = send__rdy[5];
  assign routers__send__rdy[5][3] = 1'd0;
  assign routers__recv__en[5][3] = 1'd0;
  assign routers__recv__msg[5][3] = 64'd0;
  assign routers__recv__en[4][1] = routers__send__en[6][0];
  assign routers__recv__msg[4][1] = routers__send__msg[6][0];
  assign routers__send__rdy[6][0] = routers__recv__rdy[4][1];
  assign routers__recv__en[8][0] = routers__send__en[6][1];
  assign routers__recv__msg[8][0] = routers__send__msg[6][1];
  assign routers__send__rdy[6][1] = routers__recv__rdy[8][0];
  assign routers__recv__en[7][2] = routers__send__en[6][3];
  assign routers__recv__msg[7][2] = routers__send__msg[6][3];
  assign routers__send__rdy[6][3] = routers__recv__rdy[7][2];
  assign routers__recv__en[6][4] = recv__en[6];
  assign routers__recv__msg[6][4] = recv__msg[6];
  assign recv__rdy[6] = routers__recv__rdy[6][4];
  assign send__en[6] = routers__send__en[6][4];
  assign send__msg[6] = routers__send__msg[6][4];
  assign routers__send__rdy[6][4] = send__rdy[6];
  assign routers__send__rdy[6][2] = 1'd0;
  assign routers__recv__en[6][2] = 1'd0;
  assign routers__recv__msg[6][2] = 64'd0;
  assign routers__recv__en[5][1] = routers__send__en[7][0];
  assign routers__recv__msg[5][1] = routers__send__msg[7][0];
  assign routers__send__rdy[7][0] = routers__recv__rdy[5][1];
  assign routers__recv__en[9][0] = routers__send__en[7][1];
  assign routers__recv__msg[9][0] = routers__send__msg[7][1];
  assign routers__send__rdy[7][1] = routers__recv__rdy[9][0];
  assign routers__recv__en[6][3] = routers__send__en[7][2];
  assign routers__recv__msg[6][3] = routers__send__msg[7][2];
  assign routers__send__rdy[7][2] = routers__recv__rdy[6][3];
  assign routers__recv__en[7][4] = recv__en[7];
  assign routers__recv__msg[7][4] = recv__msg[7];
  assign recv__rdy[7] = routers__recv__rdy[7][4];
  assign send__en[7] = routers__send__en[7][4];
  assign send__msg[7] = routers__send__msg[7][4];
  assign routers__send__rdy[7][4] = send__rdy[7];
  assign routers__send__rdy[7][3] = 1'd0;
  assign routers__recv__en[7][3] = 1'd0;
  assign routers__recv__msg[7][3] = 64'd0;
  assign routers__recv__en[6][1] = routers__send__en[8][0];
  assign routers__recv__msg[6][1] = routers__send__msg[8][0];
  assign routers__send__rdy[8][0] = routers__recv__rdy[6][1];
  assign routers__recv__en[10][0] = routers__send__en[8][1];
  assign routers__recv__msg[10][0] = routers__send__msg[8][1];
  assign routers__send__rdy[8][1] = routers__recv__rdy[10][0];
  assign routers__recv__en[9][2] = routers__send__en[8][3];
  assign routers__recv__msg[9][2] = routers__send__msg[8][3];
  assign routers__send__rdy[8][3] = routers__recv__rdy[9][2];
  assign routers__recv__en[8][4] = recv__en[8];
  assign routers__recv__msg[8][4] = recv__msg[8];
  assign recv__rdy[8] = routers__recv__rdy[8][4];
  assign send__en[8] = routers__send__en[8][4];
  assign send__msg[8] = routers__send__msg[8][4];
  assign routers__send__rdy[8][4] = send__rdy[8];
  assign routers__send__rdy[8][2] = 1'd0;
  assign routers__recv__en[8][2] = 1'd0;
  assign routers__recv__msg[8][2] = 64'd0;
  assign routers__recv__en[7][1] = routers__send__en[9][0];
  assign routers__recv__msg[7][1] = routers__send__msg[9][0];
  assign routers__send__rdy[9][0] = routers__recv__rdy[7][1];
  assign routers__recv__en[11][0] = routers__send__en[9][1];
  assign routers__recv__msg[11][0] = routers__send__msg[9][1];
  assign routers__send__rdy[9][1] = routers__recv__rdy[11][0];
  assign routers__recv__en[8][3] = routers__send__en[9][2];
  assign routers__recv__msg[8][3] = routers__send__msg[9][2];
  assign routers__send__rdy[9][2] = routers__recv__rdy[8][3];
  assign routers__recv__en[9][4] = recv__en[9];
  assign routers__recv__msg[9][4] = recv__msg[9];
  assign recv__rdy[9] = routers__recv__rdy[9][4];
  assign send__en[9] = routers__send__en[9][4];
  assign send__msg[9] = routers__send__msg[9][4];
  assign routers__send__rdy[9][4] = send__rdy[9];
  assign routers__send__rdy[9][3] = 1'd0;
  assign routers__recv__en[9][3] = 1'd0;
  assign routers__recv__msg[9][3] = 64'd0;
  assign routers__recv__en[8][1] = routers__send__en[10][0];
  assign routers__recv__msg[8][1] = routers__send__msg[10][0];
  assign routers__send__rdy[10][0] = routers__recv__rdy[8][1];
  assign routers__recv__en[12][0] = routers__send__en[10][1];
  assign routers__recv__msg[12][0] = routers__send__msg[10][1];
  assign routers__send__rdy[10][1] = routers__recv__rdy[12][0];
  assign routers__recv__en[11][2] = routers__send__en[10][3];
  assign routers__recv__msg[11][2] = routers__send__msg[10][3];
  assign routers__send__rdy[10][3] = routers__recv__rdy[11][2];
  assign routers__recv__en[10][4] = recv__en[10];
  assign routers__recv__msg[10][4] = recv__msg[10];
  assign recv__rdy[10] = routers__recv__rdy[10][4];
  assign send__en[10] = routers__send__en[10][4];
  assign send__msg[10] = routers__send__msg[10][4];
  assign routers__send__rdy[10][4] = send__rdy[10];
  assign routers__send__rdy[10][2] = 1'd0;
  assign routers__recv__en[10][2] = 1'd0;
  assign routers__recv__msg[10][2] = 64'd0;
  assign routers__recv__en[9][1] = routers__send__en[11][0];
  assign routers__recv__msg[9][1] = routers__send__msg[11][0];
  assign routers__send__rdy[11][0] = routers__recv__rdy[9][1];
  assign routers__recv__en[13][0] = routers__send__en[11][1];
  assign routers__recv__msg[13][0] = routers__send__msg[11][1];
  assign routers__send__rdy[11][1] = routers__recv__rdy[13][0];
  assign routers__recv__en[10][3] = routers__send__en[11][2];
  assign routers__recv__msg[10][3] = routers__send__msg[11][2];
  assign routers__send__rdy[11][2] = routers__recv__rdy[10][3];
  assign routers__recv__en[11][4] = recv__en[11];
  assign routers__recv__msg[11][4] = recv__msg[11];
  assign recv__rdy[11] = routers__recv__rdy[11][4];
  assign send__en[11] = routers__send__en[11][4];
  assign send__msg[11] = routers__send__msg[11][4];
  assign routers__send__rdy[11][4] = send__rdy[11];
  assign routers__send__rdy[11][3] = 1'd0;
  assign routers__recv__en[11][3] = 1'd0;
  assign routers__recv__msg[11][3] = 64'd0;
  assign routers__recv__en[10][1] = routers__send__en[12][0];
  assign routers__recv__msg[10][1] = routers__send__msg[12][0];
  assign routers__send__rdy[12][0] = routers__recv__rdy[10][1];
  assign routers__recv__en[13][2] = routers__send__en[12][3];
  assign routers__recv__msg[13][2] = routers__send__msg[12][3];
  assign routers__send__rdy[12][3] = routers__recv__rdy[13][2];
  assign routers__recv__en[12][4] = recv__en[12];
  assign routers__recv__msg[12][4] = recv__msg[12];
  assign recv__rdy[12] = routers__recv__rdy[12][4];
  assign send__en[12] = routers__send__en[12][4];
  assign send__msg[12] = routers__send__msg[12][4];
  assign routers__send__rdy[12][4] = send__rdy[12];
  assign routers__send__rdy[12][1] = 1'd0;
  assign routers__recv__en[12][1] = 1'd0;
  assign routers__recv__msg[12][1] = 64'd0;
  assign routers__send__rdy[12][2] = 1'd0;
  assign routers__recv__en[12][2] = 1'd0;
  assign routers__recv__msg[12][2] = 64'd0;
  assign routers__recv__en[11][1] = routers__send__en[13][0];
  assign routers__recv__msg[11][1] = routers__send__msg[13][0];
  assign routers__send__rdy[13][0] = routers__recv__rdy[11][1];
  assign routers__recv__en[12][3] = routers__send__en[13][2];
  assign routers__recv__msg[12][3] = routers__send__msg[13][2];
  assign routers__send__rdy[13][2] = routers__recv__rdy[12][3];
  assign routers__recv__en[13][4] = recv__en[13];
  assign routers__recv__msg[13][4] = recv__msg[13];
  assign recv__rdy[13] = routers__recv__rdy[13][4];
  assign send__en[13] = routers__send__en[13][4];
  assign send__msg[13] = routers__send__msg[13][4];
  assign routers__send__rdy[13][4] = send__rdy[13];
  assign routers__send__rdy[13][1] = 1'd0;
  assign routers__recv__en[13][1] = 1'd0;
  assign routers__recv__msg[13][1] = 64'd0;
  assign routers__send__rdy[13][3] = 1'd0;
  assign routers__recv__en[13][3] = 1'd0;
  assign routers__recv__msg[13][3] = 64'd0;

endmodule


// PyMTL Component Recv2OutValRdy Definition
// At /home/yo96/pymtl3-net/ocnlib/ifcs/enrdy_adapters.py

module Recv2OutValRdy__Type_Bits64
(
  input logic [0:0] clk ,
  input logic [0:0] reset ,
  output logic [63:0] out__msg  ,
  input logic [0:0] out__rdy  ,
  output logic [0:0] out__val  ,
  input logic [0:0] recv__en  ,
  input logic [63:0] recv__msg  ,
  output logic [0:0] recv__rdy  
);

  assign recv__rdy = out__rdy;
  assign out__val = recv__en;
  assign out__msg = recv__msg;

endmodule


// PyMTL Component PitonMeshNetValRdy Definition
// Full name: PitonMeshNetValRdy__ncols_2__nrows_7
// At /home/yo96/pymtl3-net/piton/PitonMeshNetValRdy.py

module pyocn_mesh_2x7
(
  input logic [0:0] clk ,
  input logic [0:0] reset ,
  input logic [63:0] in___msg [0:13] ,
  output logic [0:0] in___rdy [0:13] ,
  input logic [0:0] in___val [0:13] ,
  input logic [63:0] offchip_in__msg  ,
  output logic [0:0] offchip_in__rdy  ,
  input logic [0:0] offchip_in__val  ,
  output logic [63:0] offchip_out__msg  ,
  input logic [0:0] offchip_out__rdy  ,
  output logic [0:0] offchip_out__val  ,
  output logic [63:0] out__msg [0:13] ,
  input logic [0:0] out__rdy [0:13] ,
  output logic [0:0] out__val [0:13] 
);
  //-------------------------------------------------------------
  // Component in2send[0:13]
  //-------------------------------------------------------------

  logic [0:0] in2send__clk [0:13];
  logic [0:0] in2send__reset [0:13];
  logic [63:0] in2send__in___msg [0:13];
  logic [0:0] in2send__in___rdy [0:13];
  logic [0:0] in2send__in___val [0:13];
  logic [0:0] in2send__send__en [0:13];
  logic [63:0] in2send__send__msg [0:13];
  logic [0:0] in2send__send__rdy [0:13];

  InValRdy2Send__Type_Bits64 in2send__0
  (
    .clk( in2send__clk[0] ),
    .reset( in2send__reset[0] ),
    .in___msg( in2send__in___msg[0] ),
    .in___rdy( in2send__in___rdy[0] ),
    .in___val( in2send__in___val[0] ),
    .send__en( in2send__send__en[0] ),
    .send__msg( in2send__send__msg[0] ),
    .send__rdy( in2send__send__rdy[0] )
  );

  InValRdy2Send__Type_Bits64 in2send__1
  (
    .clk( in2send__clk[1] ),
    .reset( in2send__reset[1] ),
    .in___msg( in2send__in___msg[1] ),
    .in___rdy( in2send__in___rdy[1] ),
    .in___val( in2send__in___val[1] ),
    .send__en( in2send__send__en[1] ),
    .send__msg( in2send__send__msg[1] ),
    .send__rdy( in2send__send__rdy[1] )
  );

  InValRdy2Send__Type_Bits64 in2send__2
  (
    .clk( in2send__clk[2] ),
    .reset( in2send__reset[2] ),
    .in___msg( in2send__in___msg[2] ),
    .in___rdy( in2send__in___rdy[2] ),
    .in___val( in2send__in___val[2] ),
    .send__en( in2send__send__en[2] ),
    .send__msg( in2send__send__msg[2] ),
    .send__rdy( in2send__send__rdy[2] )
  );

  InValRdy2Send__Type_Bits64 in2send__3
  (
    .clk( in2send__clk[3] ),
    .reset( in2send__reset[3] ),
    .in___msg( in2send__in___msg[3] ),
    .in___rdy( in2send__in___rdy[3] ),
    .in___val( in2send__in___val[3] ),
    .send__en( in2send__send__en[3] ),
    .send__msg( in2send__send__msg[3] ),
    .send__rdy( in2send__send__rdy[3] )
  );

  InValRdy2Send__Type_Bits64 in2send__4
  (
    .clk( in2send__clk[4] ),
    .reset( in2send__reset[4] ),
    .in___msg( in2send__in___msg[4] ),
    .in___rdy( in2send__in___rdy[4] ),
    .in___val( in2send__in___val[4] ),
    .send__en( in2send__send__en[4] ),
    .send__msg( in2send__send__msg[4] ),
    .send__rdy( in2send__send__rdy[4] )
  );

  InValRdy2Send__Type_Bits64 in2send__5
  (
    .clk( in2send__clk[5] ),
    .reset( in2send__reset[5] ),
    .in___msg( in2send__in___msg[5] ),
    .in___rdy( in2send__in___rdy[5] ),
    .in___val( in2send__in___val[5] ),
    .send__en( in2send__send__en[5] ),
    .send__msg( in2send__send__msg[5] ),
    .send__rdy( in2send__send__rdy[5] )
  );

  InValRdy2Send__Type_Bits64 in2send__6
  (
    .clk( in2send__clk[6] ),
    .reset( in2send__reset[6] ),
    .in___msg( in2send__in___msg[6] ),
    .in___rdy( in2send__in___rdy[6] ),
    .in___val( in2send__in___val[6] ),
    .send__en( in2send__send__en[6] ),
    .send__msg( in2send__send__msg[6] ),
    .send__rdy( in2send__send__rdy[6] )
  );

  InValRdy2Send__Type_Bits64 in2send__7
  (
    .clk( in2send__clk[7] ),
    .reset( in2send__reset[7] ),
    .in___msg( in2send__in___msg[7] ),
    .in___rdy( in2send__in___rdy[7] ),
    .in___val( in2send__in___val[7] ),
    .send__en( in2send__send__en[7] ),
    .send__msg( in2send__send__msg[7] ),
    .send__rdy( in2send__send__rdy[7] )
  );

  InValRdy2Send__Type_Bits64 in2send__8
  (
    .clk( in2send__clk[8] ),
    .reset( in2send__reset[8] ),
    .in___msg( in2send__in___msg[8] ),
    .in___rdy( in2send__in___rdy[8] ),
    .in___val( in2send__in___val[8] ),
    .send__en( in2send__send__en[8] ),
    .send__msg( in2send__send__msg[8] ),
    .send__rdy( in2send__send__rdy[8] )
  );

  InValRdy2Send__Type_Bits64 in2send__9
  (
    .clk( in2send__clk[9] ),
    .reset( in2send__reset[9] ),
    .in___msg( in2send__in___msg[9] ),
    .in___rdy( in2send__in___rdy[9] ),
    .in___val( in2send__in___val[9] ),
    .send__en( in2send__send__en[9] ),
    .send__msg( in2send__send__msg[9] ),
    .send__rdy( in2send__send__rdy[9] )
  );

  InValRdy2Send__Type_Bits64 in2send__10
  (
    .clk( in2send__clk[10] ),
    .reset( in2send__reset[10] ),
    .in___msg( in2send__in___msg[10] ),
    .in___rdy( in2send__in___rdy[10] ),
    .in___val( in2send__in___val[10] ),
    .send__en( in2send__send__en[10] ),
    .send__msg( in2send__send__msg[10] ),
    .send__rdy( in2send__send__rdy[10] )
  );

  InValRdy2Send__Type_Bits64 in2send__11
  (
    .clk( in2send__clk[11] ),
    .reset( in2send__reset[11] ),
    .in___msg( in2send__in___msg[11] ),
    .in___rdy( in2send__in___rdy[11] ),
    .in___val( in2send__in___val[11] ),
    .send__en( in2send__send__en[11] ),
    .send__msg( in2send__send__msg[11] ),
    .send__rdy( in2send__send__rdy[11] )
  );

  InValRdy2Send__Type_Bits64 in2send__12
  (
    .clk( in2send__clk[12] ),
    .reset( in2send__reset[12] ),
    .in___msg( in2send__in___msg[12] ),
    .in___rdy( in2send__in___rdy[12] ),
    .in___val( in2send__in___val[12] ),
    .send__en( in2send__send__en[12] ),
    .send__msg( in2send__send__msg[12] ),
    .send__rdy( in2send__send__rdy[12] )
  );

  InValRdy2Send__Type_Bits64 in2send__13
  (
    .clk( in2send__clk[13] ),
    .reset( in2send__reset[13] ),
    .in___msg( in2send__in___msg[13] ),
    .in___rdy( in2send__in___rdy[13] ),
    .in___val( in2send__in___val[13] ),
    .send__en( in2send__send__en[13] ),
    .send__msg( in2send__send__msg[13] ),
    .send__rdy( in2send__send__rdy[13] )
  );

  //-------------------------------------------------------------
  // End of component in2send[0:13]
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component net
  //-------------------------------------------------------------

  logic [0:0] net__clk;
  logic [0:0] net__reset;
  logic [0:0] net__offchip_recv__en;
  logic [63:0] net__offchip_recv__msg;
  logic [0:0] net__offchip_recv__rdy;
  logic [0:0] net__offchip_send__en;
  logic [63:0] net__offchip_send__msg;
  logic [0:0] net__offchip_send__rdy;
  logic [0:0] net__recv__en [0:13];
  logic [63:0] net__recv__msg [0:13];
  logic [0:0] net__recv__rdy [0:13];
  logic [0:0] net__send__en [0:13];
  logic [63:0] net__send__msg [0:13];
  logic [0:0] net__send__rdy [0:13];

  PitonMeshNet__PositionType_PitonPosition__ncols_2__nrows_7 net
  (
    .clk( net__clk ),
    .reset( net__reset ),
    .offchip_recv__en( net__offchip_recv__en ),
    .offchip_recv__msg( net__offchip_recv__msg ),
    .offchip_recv__rdy( net__offchip_recv__rdy ),
    .offchip_send__en( net__offchip_send__en ),
    .offchip_send__msg( net__offchip_send__msg ),
    .offchip_send__rdy( net__offchip_send__rdy ),
    .recv__en( net__recv__en ),
    .recv__msg( net__recv__msg ),
    .recv__rdy( net__recv__rdy ),
    .send__en( net__send__en ),
    .send__msg( net__send__msg ),
    .send__rdy( net__send__rdy )
  );

  //-------------------------------------------------------------
  // End of component net
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component offchip_in2send
  //-------------------------------------------------------------

  logic [0:0] offchip_in2send__clk;
  logic [0:0] offchip_in2send__reset;
  logic [63:0] offchip_in2send__in___msg;
  logic [0:0] offchip_in2send__in___rdy;
  logic [0:0] offchip_in2send__in___val;
  logic [0:0] offchip_in2send__send__en;
  logic [63:0] offchip_in2send__send__msg;
  logic [0:0] offchip_in2send__send__rdy;

  InValRdy2Send__Type_Bits64 offchip_in2send
  (
    .clk( offchip_in2send__clk ),
    .reset( offchip_in2send__reset ),
    .in___msg( offchip_in2send__in___msg ),
    .in___rdy( offchip_in2send__in___rdy ),
    .in___val( offchip_in2send__in___val ),
    .send__en( offchip_in2send__send__en ),
    .send__msg( offchip_in2send__send__msg ),
    .send__rdy( offchip_in2send__send__rdy )
  );

  //-------------------------------------------------------------
  // End of component offchip_in2send
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component offchip_recv2out
  //-------------------------------------------------------------

  logic [0:0] offchip_recv2out__clk;
  logic [0:0] offchip_recv2out__reset;
  logic [63:0] offchip_recv2out__out__msg;
  logic [0:0] offchip_recv2out__out__rdy;
  logic [0:0] offchip_recv2out__out__val;
  logic [0:0] offchip_recv2out__recv__en;
  logic [63:0] offchip_recv2out__recv__msg;
  logic [0:0] offchip_recv2out__recv__rdy;

  Recv2OutValRdy__Type_Bits64 offchip_recv2out
  (
    .clk( offchip_recv2out__clk ),
    .reset( offchip_recv2out__reset ),
    .out__msg( offchip_recv2out__out__msg ),
    .out__rdy( offchip_recv2out__out__rdy ),
    .out__val( offchip_recv2out__out__val ),
    .recv__en( offchip_recv2out__recv__en ),
    .recv__msg( offchip_recv2out__recv__msg ),
    .recv__rdy( offchip_recv2out__recv__rdy )
  );

  //-------------------------------------------------------------
  // End of component offchip_recv2out
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component recv2out[0:13]
  //-------------------------------------------------------------

  logic [0:0] recv2out__clk [0:13];
  logic [0:0] recv2out__reset [0:13];
  logic [63:0] recv2out__out__msg [0:13];
  logic [0:0] recv2out__out__rdy [0:13];
  logic [0:0] recv2out__out__val [0:13];
  logic [0:0] recv2out__recv__en [0:13];
  logic [63:0] recv2out__recv__msg [0:13];
  logic [0:0] recv2out__recv__rdy [0:13];

  Recv2OutValRdy__Type_Bits64 recv2out__0
  (
    .clk( recv2out__clk[0] ),
    .reset( recv2out__reset[0] ),
    .out__msg( recv2out__out__msg[0] ),
    .out__rdy( recv2out__out__rdy[0] ),
    .out__val( recv2out__out__val[0] ),
    .recv__en( recv2out__recv__en[0] ),
    .recv__msg( recv2out__recv__msg[0] ),
    .recv__rdy( recv2out__recv__rdy[0] )
  );

  Recv2OutValRdy__Type_Bits64 recv2out__1
  (
    .clk( recv2out__clk[1] ),
    .reset( recv2out__reset[1] ),
    .out__msg( recv2out__out__msg[1] ),
    .out__rdy( recv2out__out__rdy[1] ),
    .out__val( recv2out__out__val[1] ),
    .recv__en( recv2out__recv__en[1] ),
    .recv__msg( recv2out__recv__msg[1] ),
    .recv__rdy( recv2out__recv__rdy[1] )
  );

  Recv2OutValRdy__Type_Bits64 recv2out__2
  (
    .clk( recv2out__clk[2] ),
    .reset( recv2out__reset[2] ),
    .out__msg( recv2out__out__msg[2] ),
    .out__rdy( recv2out__out__rdy[2] ),
    .out__val( recv2out__out__val[2] ),
    .recv__en( recv2out__recv__en[2] ),
    .recv__msg( recv2out__recv__msg[2] ),
    .recv__rdy( recv2out__recv__rdy[2] )
  );

  Recv2OutValRdy__Type_Bits64 recv2out__3
  (
    .clk( recv2out__clk[3] ),
    .reset( recv2out__reset[3] ),
    .out__msg( recv2out__out__msg[3] ),
    .out__rdy( recv2out__out__rdy[3] ),
    .out__val( recv2out__out__val[3] ),
    .recv__en( recv2out__recv__en[3] ),
    .recv__msg( recv2out__recv__msg[3] ),
    .recv__rdy( recv2out__recv__rdy[3] )
  );

  Recv2OutValRdy__Type_Bits64 recv2out__4
  (
    .clk( recv2out__clk[4] ),
    .reset( recv2out__reset[4] ),
    .out__msg( recv2out__out__msg[4] ),
    .out__rdy( recv2out__out__rdy[4] ),
    .out__val( recv2out__out__val[4] ),
    .recv__en( recv2out__recv__en[4] ),
    .recv__msg( recv2out__recv__msg[4] ),
    .recv__rdy( recv2out__recv__rdy[4] )
  );

  Recv2OutValRdy__Type_Bits64 recv2out__5
  (
    .clk( recv2out__clk[5] ),
    .reset( recv2out__reset[5] ),
    .out__msg( recv2out__out__msg[5] ),
    .out__rdy( recv2out__out__rdy[5] ),
    .out__val( recv2out__out__val[5] ),
    .recv__en( recv2out__recv__en[5] ),
    .recv__msg( recv2out__recv__msg[5] ),
    .recv__rdy( recv2out__recv__rdy[5] )
  );

  Recv2OutValRdy__Type_Bits64 recv2out__6
  (
    .clk( recv2out__clk[6] ),
    .reset( recv2out__reset[6] ),
    .out__msg( recv2out__out__msg[6] ),
    .out__rdy( recv2out__out__rdy[6] ),
    .out__val( recv2out__out__val[6] ),
    .recv__en( recv2out__recv__en[6] ),
    .recv__msg( recv2out__recv__msg[6] ),
    .recv__rdy( recv2out__recv__rdy[6] )
  );

  Recv2OutValRdy__Type_Bits64 recv2out__7
  (
    .clk( recv2out__clk[7] ),
    .reset( recv2out__reset[7] ),
    .out__msg( recv2out__out__msg[7] ),
    .out__rdy( recv2out__out__rdy[7] ),
    .out__val( recv2out__out__val[7] ),
    .recv__en( recv2out__recv__en[7] ),
    .recv__msg( recv2out__recv__msg[7] ),
    .recv__rdy( recv2out__recv__rdy[7] )
  );

  Recv2OutValRdy__Type_Bits64 recv2out__8
  (
    .clk( recv2out__clk[8] ),
    .reset( recv2out__reset[8] ),
    .out__msg( recv2out__out__msg[8] ),
    .out__rdy( recv2out__out__rdy[8] ),
    .out__val( recv2out__out__val[8] ),
    .recv__en( recv2out__recv__en[8] ),
    .recv__msg( recv2out__recv__msg[8] ),
    .recv__rdy( recv2out__recv__rdy[8] )
  );

  Recv2OutValRdy__Type_Bits64 recv2out__9
  (
    .clk( recv2out__clk[9] ),
    .reset( recv2out__reset[9] ),
    .out__msg( recv2out__out__msg[9] ),
    .out__rdy( recv2out__out__rdy[9] ),
    .out__val( recv2out__out__val[9] ),
    .recv__en( recv2out__recv__en[9] ),
    .recv__msg( recv2out__recv__msg[9] ),
    .recv__rdy( recv2out__recv__rdy[9] )
  );

  Recv2OutValRdy__Type_Bits64 recv2out__10
  (
    .clk( recv2out__clk[10] ),
    .reset( recv2out__reset[10] ),
    .out__msg( recv2out__out__msg[10] ),
    .out__rdy( recv2out__out__rdy[10] ),
    .out__val( recv2out__out__val[10] ),
    .recv__en( recv2out__recv__en[10] ),
    .recv__msg( recv2out__recv__msg[10] ),
    .recv__rdy( recv2out__recv__rdy[10] )
  );

  Recv2OutValRdy__Type_Bits64 recv2out__11
  (
    .clk( recv2out__clk[11] ),
    .reset( recv2out__reset[11] ),
    .out__msg( recv2out__out__msg[11] ),
    .out__rdy( recv2out__out__rdy[11] ),
    .out__val( recv2out__out__val[11] ),
    .recv__en( recv2out__recv__en[11] ),
    .recv__msg( recv2out__recv__msg[11] ),
    .recv__rdy( recv2out__recv__rdy[11] )
  );

  Recv2OutValRdy__Type_Bits64 recv2out__12
  (
    .clk( recv2out__clk[12] ),
    .reset( recv2out__reset[12] ),
    .out__msg( recv2out__out__msg[12] ),
    .out__rdy( recv2out__out__rdy[12] ),
    .out__val( recv2out__out__val[12] ),
    .recv__en( recv2out__recv__en[12] ),
    .recv__msg( recv2out__recv__msg[12] ),
    .recv__rdy( recv2out__recv__rdy[12] )
  );

  Recv2OutValRdy__Type_Bits64 recv2out__13
  (
    .clk( recv2out__clk[13] ),
    .reset( recv2out__reset[13] ),
    .out__msg( recv2out__out__msg[13] ),
    .out__rdy( recv2out__out__rdy[13] ),
    .out__val( recv2out__out__val[13] ),
    .recv__en( recv2out__recv__en[13] ),
    .recv__msg( recv2out__recv__msg[13] ),
    .recv__rdy( recv2out__recv__rdy[13] )
  );

  //-------------------------------------------------------------
  // End of component recv2out[0:13]
  //-------------------------------------------------------------

  assign net__clk = clk;
  assign net__reset = reset;
  assign in2send__clk[0] = clk;
  assign in2send__reset[0] = reset;
  assign in2send__clk[1] = clk;
  assign in2send__reset[1] = reset;
  assign in2send__clk[2] = clk;
  assign in2send__reset[2] = reset;
  assign in2send__clk[3] = clk;
  assign in2send__reset[3] = reset;
  assign in2send__clk[4] = clk;
  assign in2send__reset[4] = reset;
  assign in2send__clk[5] = clk;
  assign in2send__reset[5] = reset;
  assign in2send__clk[6] = clk;
  assign in2send__reset[6] = reset;
  assign in2send__clk[7] = clk;
  assign in2send__reset[7] = reset;
  assign in2send__clk[8] = clk;
  assign in2send__reset[8] = reset;
  assign in2send__clk[9] = clk;
  assign in2send__reset[9] = reset;
  assign in2send__clk[10] = clk;
  assign in2send__reset[10] = reset;
  assign in2send__clk[11] = clk;
  assign in2send__reset[11] = reset;
  assign in2send__clk[12] = clk;
  assign in2send__reset[12] = reset;
  assign in2send__clk[13] = clk;
  assign in2send__reset[13] = reset;
  assign recv2out__clk[0] = clk;
  assign recv2out__reset[0] = reset;
  assign recv2out__clk[1] = clk;
  assign recv2out__reset[1] = reset;
  assign recv2out__clk[2] = clk;
  assign recv2out__reset[2] = reset;
  assign recv2out__clk[3] = clk;
  assign recv2out__reset[3] = reset;
  assign recv2out__clk[4] = clk;
  assign recv2out__reset[4] = reset;
  assign recv2out__clk[5] = clk;
  assign recv2out__reset[5] = reset;
  assign recv2out__clk[6] = clk;
  assign recv2out__reset[6] = reset;
  assign recv2out__clk[7] = clk;
  assign recv2out__reset[7] = reset;
  assign recv2out__clk[8] = clk;
  assign recv2out__reset[8] = reset;
  assign recv2out__clk[9] = clk;
  assign recv2out__reset[9] = reset;
  assign recv2out__clk[10] = clk;
  assign recv2out__reset[10] = reset;
  assign recv2out__clk[11] = clk;
  assign recv2out__reset[11] = reset;
  assign recv2out__clk[12] = clk;
  assign recv2out__reset[12] = reset;
  assign recv2out__clk[13] = clk;
  assign recv2out__reset[13] = reset;
  assign offchip_in2send__clk = clk;
  assign offchip_in2send__reset = reset;
  assign offchip_recv2out__clk = clk;
  assign offchip_recv2out__reset = reset;
  assign in2send__in___msg[0] = in___msg[0];
  assign in___rdy[0] = in2send__in___rdy[0];
  assign in2send__in___val[0] = in___val[0];
  assign net__recv__en[0] = in2send__send__en[0];
  assign net__recv__msg[0] = in2send__send__msg[0];
  assign in2send__send__rdy[0] = net__recv__rdy[0];
  assign recv2out__recv__en[0] = net__send__en[0];
  assign recv2out__recv__msg[0] = net__send__msg[0];
  assign net__send__rdy[0] = recv2out__recv__rdy[0];
  assign out__msg[0] = recv2out__out__msg[0];
  assign recv2out__out__rdy[0] = out__rdy[0];
  assign out__val[0] = recv2out__out__val[0];
  assign in2send__in___msg[1] = in___msg[1];
  assign in___rdy[1] = in2send__in___rdy[1];
  assign in2send__in___val[1] = in___val[1];
  assign net__recv__en[1] = in2send__send__en[1];
  assign net__recv__msg[1] = in2send__send__msg[1];
  assign in2send__send__rdy[1] = net__recv__rdy[1];
  assign recv2out__recv__en[1] = net__send__en[1];
  assign recv2out__recv__msg[1] = net__send__msg[1];
  assign net__send__rdy[1] = recv2out__recv__rdy[1];
  assign out__msg[1] = recv2out__out__msg[1];
  assign recv2out__out__rdy[1] = out__rdy[1];
  assign out__val[1] = recv2out__out__val[1];
  assign in2send__in___msg[2] = in___msg[2];
  assign in___rdy[2] = in2send__in___rdy[2];
  assign in2send__in___val[2] = in___val[2];
  assign net__recv__en[2] = in2send__send__en[2];
  assign net__recv__msg[2] = in2send__send__msg[2];
  assign in2send__send__rdy[2] = net__recv__rdy[2];
  assign recv2out__recv__en[2] = net__send__en[2];
  assign recv2out__recv__msg[2] = net__send__msg[2];
  assign net__send__rdy[2] = recv2out__recv__rdy[2];
  assign out__msg[2] = recv2out__out__msg[2];
  assign recv2out__out__rdy[2] = out__rdy[2];
  assign out__val[2] = recv2out__out__val[2];
  assign in2send__in___msg[3] = in___msg[3];
  assign in___rdy[3] = in2send__in___rdy[3];
  assign in2send__in___val[3] = in___val[3];
  assign net__recv__en[3] = in2send__send__en[3];
  assign net__recv__msg[3] = in2send__send__msg[3];
  assign in2send__send__rdy[3] = net__recv__rdy[3];
  assign recv2out__recv__en[3] = net__send__en[3];
  assign recv2out__recv__msg[3] = net__send__msg[3];
  assign net__send__rdy[3] = recv2out__recv__rdy[3];
  assign out__msg[3] = recv2out__out__msg[3];
  assign recv2out__out__rdy[3] = out__rdy[3];
  assign out__val[3] = recv2out__out__val[3];
  assign in2send__in___msg[4] = in___msg[4];
  assign in___rdy[4] = in2send__in___rdy[4];
  assign in2send__in___val[4] = in___val[4];
  assign net__recv__en[4] = in2send__send__en[4];
  assign net__recv__msg[4] = in2send__send__msg[4];
  assign in2send__send__rdy[4] = net__recv__rdy[4];
  assign recv2out__recv__en[4] = net__send__en[4];
  assign recv2out__recv__msg[4] = net__send__msg[4];
  assign net__send__rdy[4] = recv2out__recv__rdy[4];
  assign out__msg[4] = recv2out__out__msg[4];
  assign recv2out__out__rdy[4] = out__rdy[4];
  assign out__val[4] = recv2out__out__val[4];
  assign in2send__in___msg[5] = in___msg[5];
  assign in___rdy[5] = in2send__in___rdy[5];
  assign in2send__in___val[5] = in___val[5];
  assign net__recv__en[5] = in2send__send__en[5];
  assign net__recv__msg[5] = in2send__send__msg[5];
  assign in2send__send__rdy[5] = net__recv__rdy[5];
  assign recv2out__recv__en[5] = net__send__en[5];
  assign recv2out__recv__msg[5] = net__send__msg[5];
  assign net__send__rdy[5] = recv2out__recv__rdy[5];
  assign out__msg[5] = recv2out__out__msg[5];
  assign recv2out__out__rdy[5] = out__rdy[5];
  assign out__val[5] = recv2out__out__val[5];
  assign in2send__in___msg[6] = in___msg[6];
  assign in___rdy[6] = in2send__in___rdy[6];
  assign in2send__in___val[6] = in___val[6];
  assign net__recv__en[6] = in2send__send__en[6];
  assign net__recv__msg[6] = in2send__send__msg[6];
  assign in2send__send__rdy[6] = net__recv__rdy[6];
  assign recv2out__recv__en[6] = net__send__en[6];
  assign recv2out__recv__msg[6] = net__send__msg[6];
  assign net__send__rdy[6] = recv2out__recv__rdy[6];
  assign out__msg[6] = recv2out__out__msg[6];
  assign recv2out__out__rdy[6] = out__rdy[6];
  assign out__val[6] = recv2out__out__val[6];
  assign in2send__in___msg[7] = in___msg[7];
  assign in___rdy[7] = in2send__in___rdy[7];
  assign in2send__in___val[7] = in___val[7];
  assign net__recv__en[7] = in2send__send__en[7];
  assign net__recv__msg[7] = in2send__send__msg[7];
  assign in2send__send__rdy[7] = net__recv__rdy[7];
  assign recv2out__recv__en[7] = net__send__en[7];
  assign recv2out__recv__msg[7] = net__send__msg[7];
  assign net__send__rdy[7] = recv2out__recv__rdy[7];
  assign out__msg[7] = recv2out__out__msg[7];
  assign recv2out__out__rdy[7] = out__rdy[7];
  assign out__val[7] = recv2out__out__val[7];
  assign in2send__in___msg[8] = in___msg[8];
  assign in___rdy[8] = in2send__in___rdy[8];
  assign in2send__in___val[8] = in___val[8];
  assign net__recv__en[8] = in2send__send__en[8];
  assign net__recv__msg[8] = in2send__send__msg[8];
  assign in2send__send__rdy[8] = net__recv__rdy[8];
  assign recv2out__recv__en[8] = net__send__en[8];
  assign recv2out__recv__msg[8] = net__send__msg[8];
  assign net__send__rdy[8] = recv2out__recv__rdy[8];
  assign out__msg[8] = recv2out__out__msg[8];
  assign recv2out__out__rdy[8] = out__rdy[8];
  assign out__val[8] = recv2out__out__val[8];
  assign in2send__in___msg[9] = in___msg[9];
  assign in___rdy[9] = in2send__in___rdy[9];
  assign in2send__in___val[9] = in___val[9];
  assign net__recv__en[9] = in2send__send__en[9];
  assign net__recv__msg[9] = in2send__send__msg[9];
  assign in2send__send__rdy[9] = net__recv__rdy[9];
  assign recv2out__recv__en[9] = net__send__en[9];
  assign recv2out__recv__msg[9] = net__send__msg[9];
  assign net__send__rdy[9] = recv2out__recv__rdy[9];
  assign out__msg[9] = recv2out__out__msg[9];
  assign recv2out__out__rdy[9] = out__rdy[9];
  assign out__val[9] = recv2out__out__val[9];
  assign in2send__in___msg[10] = in___msg[10];
  assign in___rdy[10] = in2send__in___rdy[10];
  assign in2send__in___val[10] = in___val[10];
  assign net__recv__en[10] = in2send__send__en[10];
  assign net__recv__msg[10] = in2send__send__msg[10];
  assign in2send__send__rdy[10] = net__recv__rdy[10];
  assign recv2out__recv__en[10] = net__send__en[10];
  assign recv2out__recv__msg[10] = net__send__msg[10];
  assign net__send__rdy[10] = recv2out__recv__rdy[10];
  assign out__msg[10] = recv2out__out__msg[10];
  assign recv2out__out__rdy[10] = out__rdy[10];
  assign out__val[10] = recv2out__out__val[10];
  assign in2send__in___msg[11] = in___msg[11];
  assign in___rdy[11] = in2send__in___rdy[11];
  assign in2send__in___val[11] = in___val[11];
  assign net__recv__en[11] = in2send__send__en[11];
  assign net__recv__msg[11] = in2send__send__msg[11];
  assign in2send__send__rdy[11] = net__recv__rdy[11];
  assign recv2out__recv__en[11] = net__send__en[11];
  assign recv2out__recv__msg[11] = net__send__msg[11];
  assign net__send__rdy[11] = recv2out__recv__rdy[11];
  assign out__msg[11] = recv2out__out__msg[11];
  assign recv2out__out__rdy[11] = out__rdy[11];
  assign out__val[11] = recv2out__out__val[11];
  assign in2send__in___msg[12] = in___msg[12];
  assign in___rdy[12] = in2send__in___rdy[12];
  assign in2send__in___val[12] = in___val[12];
  assign net__recv__en[12] = in2send__send__en[12];
  assign net__recv__msg[12] = in2send__send__msg[12];
  assign in2send__send__rdy[12] = net__recv__rdy[12];
  assign recv2out__recv__en[12] = net__send__en[12];
  assign recv2out__recv__msg[12] = net__send__msg[12];
  assign net__send__rdy[12] = recv2out__recv__rdy[12];
  assign out__msg[12] = recv2out__out__msg[12];
  assign recv2out__out__rdy[12] = out__rdy[12];
  assign out__val[12] = recv2out__out__val[12];
  assign in2send__in___msg[13] = in___msg[13];
  assign in___rdy[13] = in2send__in___rdy[13];
  assign in2send__in___val[13] = in___val[13];
  assign net__recv__en[13] = in2send__send__en[13];
  assign net__recv__msg[13] = in2send__send__msg[13];
  assign in2send__send__rdy[13] = net__recv__rdy[13];
  assign recv2out__recv__en[13] = net__send__en[13];
  assign recv2out__recv__msg[13] = net__send__msg[13];
  assign net__send__rdy[13] = recv2out__recv__rdy[13];
  assign out__msg[13] = recv2out__out__msg[13];
  assign recv2out__out__rdy[13] = out__rdy[13];
  assign out__val[13] = recv2out__out__val[13];
  assign offchip_in2send__in___msg = offchip_in__msg;
  assign offchip_in__rdy = offchip_in2send__in___rdy;
  assign offchip_in2send__in___val = offchip_in__val;
  assign net__offchip_recv__en = offchip_in2send__send__en;
  assign net__offchip_recv__msg = offchip_in2send__send__msg;
  assign offchip_in2send__send__rdy = net__offchip_recv__rdy;
  assign offchip_recv2out__recv__en = net__offchip_send__en;
  assign offchip_recv2out__recv__msg = net__offchip_send__msg;
  assign net__offchip_send__rdy = offchip_recv2out__recv__rdy;
  assign offchip_out__msg = offchip_recv2out__out__msg;
  assign offchip_recv2out__out__rdy = offchip_out__rdy;
  assign offchip_out__val = offchip_recv2out__out__val;

endmodule
