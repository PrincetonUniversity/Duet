//-------------------------------------------------------------------------
// pyocn_router.v
//-------------------------------------------------------------------------
// This file is generated by PyMTL SystemVerilog translation pass.

// PyMTL BitStruct PitonPosition__chipid_14__pos_x_8__pos_y_8 Definition
typedef struct packed {
  logic [13:0] chipid;
  logic [7:0] pos_x;
  logic [7:0] pos_y;
} PitonPosition__chipid_14__pos_x_8__pos_y_8;

// PyMTL BitStruct PitonNoCHeader__2ed4d33cc9c561e2 Definition
typedef struct packed {
  logic [13:0] chipid;
  logic [7:0] xpos;
  logic [7:0] ypos;
  logic [3:0] fbits;
  logic [7:0] plen;
  logic [7:0] mtype;
  logic [7:0] mshr;
  logic [5:0] opt1;
} PitonNoCHeader__2ed4d33cc9c561e2;

// PyMTL Component NormalQueueCtrlValRdy Definition
// At /home/yo96/pymtl3-net/ocnlib/rtl/valrdy_queues.py

module NormalQueueCtrlValRdy__num_entries_2
(
  input  logic [0:0] clk ,
  output logic [1:0] count ,
  input  logic [0:0] deq_rdy ,
  output logic [0:0] deq_val ,
  output logic [0:0] enq_rdy ,
  input  logic [0:0] enq_val ,
  output logic [0:0] raddr ,
  input  logic [0:0] reset ,
  output logic [0:0] waddr ,
  output logic [0:0] wen 
);
  logic [0:0] deq_xfer;
  logic [0:0] enq_xfer;
  logic [0:0] head;
  logic [0:0] tail;

  // PyMTL Lambda Block Source
  // At /home/yo96/pymtl3-net/ocnlib/rtl/valrdy_queues.py:87
  // s.deq_val //= lambda: s.count > 0
  
  always_comb begin : _lambda__s_dut_input_units_0__queue_ctrl_deq_val
    deq_val = count > 2'd0;
  end

  // PyMTL Lambda Block Source
  // At /home/yo96/pymtl3-net/ocnlib/rtl/valrdy_queues.py:90
  // s.deq_xfer //= lambda: s.deq_rdy & s.deq_val
  
  always_comb begin : _lambda__s_dut_input_units_0__queue_ctrl_deq_xfer
    deq_xfer = deq_rdy & deq_val;
  end

  // PyMTL Lambda Block Source
  // At /home/yo96/pymtl3-net/ocnlib/rtl/valrdy_queues.py:86
  // s.enq_rdy //= lambda: s.count < s.num_entries
  
  always_comb begin : _lambda__s_dut_input_units_0__queue_ctrl_enq_rdy
    enq_rdy = count < 2'd2;
  end

  // PyMTL Lambda Block Source
  // At /home/yo96/pymtl3-net/ocnlib/rtl/valrdy_queues.py:89
  // s.enq_xfer //= lambda: s.enq_val & s.enq_rdy
  
  always_comb begin : _lambda__s_dut_input_units_0__queue_ctrl_enq_xfer
    enq_xfer = enq_val & enq_rdy;
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-net/ocnlib/rtl/valrdy_queues.py:92
  // @update_ff
  // def up_reg():
  // 
  //   if s.reset:
  //     s.head  <<= 0
  //     s.tail  <<= 0
  //     s.count <<= 0
  // 
  //   else:
  //     if s.deq_xfer:
  //       s.head <<= s.head + 1 if s.head < s.last_idx else 0
  // 
  //     if s.enq_xfer:
  //       s.tail <<= s.tail + 1 if s.tail < s.last_idx else 0
  // 
  //     if s.enq_xfer & ~s.deq_xfer:
  //       s.count <<= s.count + 1
  //     if ~s.enq_xfer & s.deq_xfer:
  //       s.count <<= s.count - 1
  
  always_ff @(posedge clk) begin : up_reg
    if ( reset ) begin
      head <= 1'd0;
      tail <= 1'd0;
      count <= 2'd0;
    end
    else begin
      if ( deq_xfer ) begin
        head <= ( head < 1'd1 ) ? head + 1'd1 : 1'd0;
      end
      if ( enq_xfer ) begin
        tail <= ( tail < 1'd1 ) ? tail + 1'd1 : 1'd0;
      end
      if ( enq_xfer & ( ~deq_xfer ) ) begin
        count <= count + 2'd1;
      end
      if ( ( ~enq_xfer ) & deq_xfer ) begin
        count <= count - 2'd1;
      end
    end
  end

  assign wen = enq_xfer;
  assign waddr = tail;
  assign raddr = head;

endmodule


// PyMTL Component RegisterFile Definition
// Full name: RegisterFile__Type_Bits64__nregs_2__rd_ports_1__wr_ports_1__const_zero_False
// At /home/yo96/pymtl3-clones/pymtl3-release/pymtl3/stdlib/basic_rtl/register_files.py

module RegisterFile__3935155bbb528c9b
(
  input  logic [0:0] clk ,
  input  logic [0:0] raddr [0:0],
  output logic [63:0] rdata [0:0],
  input  logic [0:0] reset ,
  input  logic [0:0] waddr [0:0],
  input  logic [63:0] wdata [0:0],
  input  logic [0:0] wen [0:0]
);
  localparam logic [0:0] __const__rd_ports_at_up_rf_read  = 1'd1;
  localparam logic [0:0] __const__wr_ports_at_up_rf_write  = 1'd1;
  logic [63:0] regs [0:1];

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-clones/pymtl3-release/pymtl3/stdlib/basic_rtl/register_files.py:20
  // @update
  // def up_rf_read():
  //   for i in range( rd_ports ):
  //     s.rdata[i] @= s.regs[ s.raddr[i] ]
  
  always_comb begin : up_rf_read
    for ( int unsigned i = 1'd0; i < 1'( __const__rd_ports_at_up_rf_read ); i += 1'd1 )
      rdata[1'(i)] = regs[raddr[1'(i)]];
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-clones/pymtl3-release/pymtl3/stdlib/basic_rtl/register_files.py:32
  // @update_ff
  // def up_rf_write():
  //   for i in range( wr_ports ):
  //     if s.wen[i]:
  //       s.regs[ s.waddr[i] ] <<= s.wdata[i]
  
  always_ff @(posedge clk) begin : up_rf_write
    for ( int unsigned i = 1'd0; i < 1'( __const__wr_ports_at_up_rf_write ); i += 1'd1 )
      if ( wen[1'(i)] ) begin
        regs[waddr[1'(i)]] <= wdata[1'(i)];
      end
  end

endmodule


// PyMTL Component NormalQueueDpathValRdy Definition
// At /home/yo96/pymtl3-net/ocnlib/rtl/valrdy_queues.py

module NormalQueueDpathValRdy__EntryType_Bits64__num_entries_2
(
  input  logic [0:0] clk ,
  output logic [63:0] deq_msg ,
  input  logic [63:0] enq_msg ,
  input  logic [0:0] raddr ,
  input  logic [0:0] reset ,
  input  logic [0:0] waddr ,
  input  logic [0:0] wen 
);
  //-------------------------------------------------------------
  // Component queue
  //-------------------------------------------------------------

  logic [0:0] queue__clk;
  logic [0:0] queue__raddr [0:0];
  logic [63:0] queue__rdata [0:0];
  logic [0:0] queue__reset;
  logic [0:0] queue__waddr [0:0];
  logic [63:0] queue__wdata [0:0];
  logic [0:0] queue__wen [0:0];

  RegisterFile__3935155bbb528c9b queue
  (
    .clk( queue__clk ),
    .raddr( queue__raddr ),
    .rdata( queue__rdata ),
    .reset( queue__reset ),
    .waddr( queue__waddr ),
    .wdata( queue__wdata ),
    .wen( queue__wen )
  );

  //-------------------------------------------------------------
  // End of component queue
  //-------------------------------------------------------------

  assign queue__clk = clk;
  assign queue__reset = reset;
  assign queue__raddr[0] = raddr;
  assign deq_msg = queue__rdata[0];
  assign queue__wen[0] = wen;
  assign queue__waddr[0] = waddr;
  assign queue__wdata[0] = enq_msg;

endmodule


// PyMTL Component NormalQueueValRdy Definition
// At /home/yo96/pymtl3-net/ocnlib/rtl/valrdy_queues.py

module NormalQueueValRdy__EntryType_Bits64__num_entries_2
(
  input  logic [0:0] clk ,
  output logic [1:0] count ,
  input  logic [0:0] reset ,
  output logic [63:0] deq__msg  ,
  input logic [0:0] deq__rdy  ,
  output logic [0:0] deq__val  ,
  input logic [63:0] enq__msg  ,
  output logic [0:0] enq__rdy  ,
  input logic [0:0] enq__val  
);
  //-------------------------------------------------------------
  // Component ctrl
  //-------------------------------------------------------------

  logic [0:0] ctrl__clk;
  logic [1:0] ctrl__count;
  logic [0:0] ctrl__deq_rdy;
  logic [0:0] ctrl__deq_val;
  logic [0:0] ctrl__enq_rdy;
  logic [0:0] ctrl__enq_val;
  logic [0:0] ctrl__raddr;
  logic [0:0] ctrl__reset;
  logic [0:0] ctrl__waddr;
  logic [0:0] ctrl__wen;

  NormalQueueCtrlValRdy__num_entries_2 ctrl
  (
    .clk( ctrl__clk ),
    .count( ctrl__count ),
    .deq_rdy( ctrl__deq_rdy ),
    .deq_val( ctrl__deq_val ),
    .enq_rdy( ctrl__enq_rdy ),
    .enq_val( ctrl__enq_val ),
    .raddr( ctrl__raddr ),
    .reset( ctrl__reset ),
    .waddr( ctrl__waddr ),
    .wen( ctrl__wen )
  );

  //-------------------------------------------------------------
  // End of component ctrl
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component dpath
  //-------------------------------------------------------------

  logic [0:0] dpath__clk;
  logic [63:0] dpath__deq_msg;
  logic [63:0] dpath__enq_msg;
  logic [0:0] dpath__raddr;
  logic [0:0] dpath__reset;
  logic [0:0] dpath__waddr;
  logic [0:0] dpath__wen;

  NormalQueueDpathValRdy__EntryType_Bits64__num_entries_2 dpath
  (
    .clk( dpath__clk ),
    .deq_msg( dpath__deq_msg ),
    .enq_msg( dpath__enq_msg ),
    .raddr( dpath__raddr ),
    .reset( dpath__reset ),
    .waddr( dpath__waddr ),
    .wen( dpath__wen )
  );

  //-------------------------------------------------------------
  // End of component dpath
  //-------------------------------------------------------------

  assign ctrl__clk = clk;
  assign ctrl__reset = reset;
  assign dpath__clk = clk;
  assign dpath__reset = reset;
  assign dpath__wen = ctrl__wen;
  assign dpath__waddr = ctrl__waddr;
  assign dpath__raddr = ctrl__raddr;
  assign ctrl__enq_val = enq__val;
  assign enq__rdy = ctrl__enq_rdy;
  assign deq__val = ctrl__deq_val;
  assign ctrl__deq_rdy = deq__rdy;
  assign count = ctrl__count;
  assign dpath__enq_msg = enq__msg;
  assign deq__msg = dpath__deq_msg;

endmodule


// PyMTL Component InputUnitValRdy Definition
// At /home/yo96/pymtl3-net/router/InputUnitValRdy.py

module InputUnitValRdy__PacketType_Bits64__QueueType_NormalQueueValRdy
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  input logic [63:0] in___msg  ,
  output logic [0:0] in___rdy  ,
  input logic [0:0] in___val  ,
  output logic [63:0] out__msg  ,
  input logic [0:0] out__rdy  ,
  output logic [0:0] out__val  
);
  //-------------------------------------------------------------
  // Component queue
  //-------------------------------------------------------------

  logic [0:0] queue__clk;
  logic [1:0] queue__count;
  logic [0:0] queue__reset;
  logic [63:0] queue__deq__msg;
  logic [0:0] queue__deq__rdy;
  logic [0:0] queue__deq__val;
  logic [63:0] queue__enq__msg;
  logic [0:0] queue__enq__rdy;
  logic [0:0] queue__enq__val;

  NormalQueueValRdy__EntryType_Bits64__num_entries_2 queue
  (
    .clk( queue__clk ),
    .count( queue__count ),
    .reset( queue__reset ),
    .deq__msg( queue__deq__msg ),
    .deq__rdy( queue__deq__rdy ),
    .deq__val( queue__deq__val ),
    .enq__msg( queue__enq__msg ),
    .enq__rdy( queue__enq__rdy ),
    .enq__val( queue__enq__val )
  );

  //-------------------------------------------------------------
  // End of component queue
  //-------------------------------------------------------------

  assign queue__clk = clk;
  assign queue__reset = reset;
  assign queue__enq__msg = in___msg;
  assign in___rdy = queue__enq__rdy;
  assign queue__enq__val = in___val;
  assign out__msg = queue__deq__msg;
  assign queue__deq__rdy = out__rdy;
  assign out__val = queue__deq__val;

endmodule


// PyMTL Component OutputUnitValRdy Definition
// Full name: OutputUnitValRdy__PacketType_Bits64__QueueType_None__data_gating_False
// At /home/yo96/pymtl3-net/router/OutputUnitValRdy.py

module OutputUnitValRdy__17367c9c33e88eed
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  input logic [63:0] in___msg  ,
  output logic [0:0] in___rdy  ,
  input logic [0:0] in___val  ,
  output logic [63:0] out__msg  ,
  input logic [0:0] out__rdy  ,
  output logic [0:0] out__val  
);

  // PyMTL Lambda Block Source
  // At /home/yo96/pymtl3-net/router/OutputUnitValRdy.py:38
  // s.out.msg //= lambda: s.in_.msg
  
  always_comb begin : _lambda__s_dut_output_units_0__out_msg
    out__msg = in___msg;
  end

  assign out__val = in___val;
  assign in___rdy = out__rdy;

endmodule


// PyMTL Component Counter Definition
// At /home/yo96/pymtl3-net/ocnlib/rtl/Counter.py

module Counter__Type_Bits8__reset_value_0
(
  input  logic [0:0] clk ,
  output logic [7:0] count ,
  input  logic [0:0] decr ,
  input  logic [0:0] incr ,
  input  logic [0:0] load ,
  input  logic [7:0] load_value ,
  input  logic [0:0] reset 
);
  localparam logic [0:0] __const__reset_value_at_up_count  = 1'd0;

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-net/ocnlib/rtl/Counter.py:28
  // @update_ff
  // def up_count():
  // 
  //   if s.reset:
  //     s.count <<= reset_value
  // 
  //   elif s.load:
  //     s.count <<= s.load_value
  // 
  //   elif s.incr & ~s.decr:
  //     s.count <<= s.count + 1
  // 
  //   elif ~s.incr & s.decr:
  //     s.count <<= s.count - 1
  
  always_ff @(posedge clk) begin : up_count
    if ( reset ) begin
      count <= 8'( __const__reset_value_at_up_count );
    end
    else if ( load ) begin
      count <= load_value;
    end
    else if ( incr & ( ~decr ) ) begin
      count <= count + 8'd1;
    end
    else if ( ( ~incr ) & decr ) begin
      count <= count - 8'd1;
    end
  end

endmodule


// PyMTL Component PitonRouteUnitValRdy Definition
// Full name: PitonRouteUnitValRdy__PositionType_PitonPosition__chipid_14__pos_x_8__pos_y_8__plen_field_name_plen
// At /home/yo96/pymtl3-net/piton/PitonRouteUnitValRdy.py

module PitonRouteUnitValRdy__99fda60f245e4f54
(
  input  logic [0:0] clk ,
  output logic [0:0] hold [0:4],
  input  PitonPosition__chipid_14__pos_x_8__pos_y_8 pos ,
  input  logic [0:0] reset ,
  input logic [63:0] in___msg  ,
  output logic [0:0] in___rdy  ,
  input logic [0:0] in___val  ,
  output logic [63:0] out__msg [0:4] ,
  input logic [0:0] out__rdy [0:4] ,
  output logic [0:0] out__val [0:4] 
);
  localparam logic [0:0] __const__NORTH  = 1'd0;
  localparam logic [2:0] __const__FBITS_NORTH  = 3'd5;
  localparam logic [1:0] __const__FBITS_SOUTH  = 2'd3;
  localparam logic [0:0] __const__SOUTH  = 1'd1;
  localparam logic [1:0] __const__FBITS_WEST  = 2'd2;
  localparam logic [1:0] __const__WEST  = 2'd2;
  localparam logic [2:0] __const__FBITS_EAST  = 3'd4;
  localparam logic [1:0] __const__EAST  = 2'd3;
  localparam logic [2:0] __const__SELF  = 3'd4;
  logic [0:0] any_give_en;
  logic [7:0] dst_x;
  logic [7:0] dst_y;
  PitonNoCHeader__2ed4d33cc9c561e2 header;
  logic [0:0] offchip;
  logic [2:0] out_dir;
  logic [2:0] out_dir_r;
  logic [0:0] state;
  logic [0:0] state_next;
  //-------------------------------------------------------------
  // Component counter
  //-------------------------------------------------------------

  logic [0:0] counter__clk;
  logic [7:0] counter__count;
  logic [0:0] counter__decr;
  logic [0:0] counter__incr;
  logic [0:0] counter__load;
  logic [7:0] counter__load_value;
  logic [0:0] counter__reset;

  Counter__Type_Bits8__reset_value_0 counter
  (
    .clk( counter__clk ),
    .count( counter__count ),
    .decr( counter__decr ),
    .incr( counter__incr ),
    .load( counter__load ),
    .load_value( counter__load_value ),
    .reset( counter__reset )
  );

  //-------------------------------------------------------------
  // End of component counter
  //-------------------------------------------------------------

  // PyMTL Lambda Block Source
  // At /home/yo96/pymtl3-net/piton/PitonRouteUnitValRdy.py:140
  // s.offchip //= lambda: s.header.chipid != s.pos.chipid
  
  always_comb begin : _lambda__s_dut_route_units_0__offchip
    offchip = header.chipid != pos.chipid;
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-net/piton/PitonRouteUnitValRdy.py:96
  // @update
  // def up_any_give_en():
  //   s.any_give_en @= 0
  //   for i in range( s.num_outports ):
  //     if s.out[i].val & s.out[i].rdy:
  //       s.any_give_en @= 1
  
  always_comb begin : up_any_give_en
    any_give_en = 1'd0;
    for ( int unsigned i = 1'd0; i < 3'd5; i += 1'd1 )
      if ( out__val[3'(i)] & out__rdy[3'(i)] ) begin
        any_give_en = 1'd1;
      end
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-net/piton/PitonRouteUnitValRdy.py:126
  // @update
  // def up_counter_decr():
  //   s.counter.decr @= 0
  //   if s.state != s.STATE_HEADER:
  //     s.counter.decr @= s.any_give_en
  
  always_comb begin : up_counter_decr
    counter__decr = 1'd0;
    if ( state != 1'd0 ) begin
      counter__decr = any_give_en;
    end
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-net/piton/PitonRouteUnitValRdy.py:132
  // @update
  // def up_counter_load():
  //   s.counter.load @= 0
  //   if s.state == s.STATE_HEADER:
  //     s.counter.load @= ( s.state_next == s.STATE_BODY )
  
  always_comb begin : up_counter_load
    counter__load = 1'd0;
    if ( state == 1'd0 ) begin
      counter__load = state_next == 1'd1;
    end
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-net/piton/PitonRouteUnitValRdy.py:142
  // @update
  // def up_dst():
  //   s.dst_x @= 0
  //   s.dst_y @= 0
  //   if ~s.offchip:
  //     s.dst_x @= s.header.xpos
  //     s.dst_y @= s.header.ypos
  
  always_comb begin : up_dst
    dst_x = 8'd0;
    dst_y = 8'd0;
    if ( ~offchip ) begin
      dst_x = header.xpos;
      dst_y = header.ypos;
    end
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-net/piton/PitonRouteUnitValRdy.py:187
  // @update
  // def up_give_rdy_hold():
  //   for i in range( s.num_outports ):
  //     s.out[i].val @= ( i == s.out_dir ) & s.in_.val
  //     s.hold[i]    @= ( i == s.out_dir ) & ( s.state == s.STATE_BODY )
  
  always_comb begin : up_give_rdy_hold
    for ( int unsigned i = 1'd0; i < 3'd5; i += 1'd1 ) begin
      out__val[3'(i)] = ( 3'(i) == out_dir ) & in___val;
      hold[3'(i)] = ( 3'(i) == out_dir ) & ( state == 1'd1 );
    end
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-net/piton/PitonRouteUnitValRdy.py:89
  // @update
  // def up_in_rdy():
  //   s.in_.rdy @= 0
  //   for i in range( s.num_outports ):
  //     if s.out[i].rdy:
  //       s.in_.rdy @=1
  
  always_comb begin : up_in_rdy
    in___rdy = 1'd0;
    for ( int unsigned i = 1'd0; i < 3'd5; i += 1'd1 )
      if ( out__rdy[3'(i)] ) begin
        in___rdy = 1'd1;
      end
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-net/piton/PitonRouteUnitValRdy.py:150
  // @update
  // def up_out_dir():
  //   s.out_dir @= s.out_dir_r
  // 
  //   if ( s.state == s.STATE_HEADER ) & s.in_.val:
  //     s.out_dir @= 0
  // 
  //     # Offchip port
  //     if ( s.pos.pos_x == 0 ) & ( s.pos.pos_y == 0 ) & s.offchip:
  //       s.out_dir @= NORTH
  // 
  //     elif ( s.dst_x == s.pos.pos_x ) & ( s.dst_y == s.pos.pos_y ):
  //       # Use fbits to route to final destination
  //       if s.header.fbits == FBITS_NORTH:
  //         s.out_dir @= NORTH
  //       elif s.header.fbits == FBITS_SOUTH:
  //         s.out_dir @= SOUTH
  //       elif s.header.fbits == FBITS_WEST:
  //         s.out_dir @= WEST
  //       elif s.header.fbits == FBITS_EAST:
  //         s.out_dir @= EAST
  //       else:
  //         s.out_dir @= SELF
  // 
  //     elif s.dst_x < s.pos.pos_x:
  //       s.out_dir @= WEST
  //     elif s.dst_x > s.pos.pos_x:
  //       s.out_dir @= EAST
  //     elif s.dst_y < s.pos.pos_y:
  //       s.out_dir @= NORTH
  //     else: # s.dst_y > s.pos.pos_y:
  //       s.out_dir @= SOUTH
  
  always_comb begin : up_out_dir
    out_dir = out_dir_r;
    if ( ( state == 1'd0 ) & in___val ) begin
      out_dir = 3'd0;
      if ( ( ( pos.pos_x == 8'd0 ) & ( pos.pos_y == 8'd0 ) ) & offchip ) begin
        out_dir = 3'( __const__NORTH );
      end
      else if ( ( dst_x == pos.pos_x ) & ( dst_y == pos.pos_y ) ) begin
        if ( header.fbits == 4'( __const__FBITS_NORTH ) ) begin
          out_dir = 3'( __const__NORTH );
        end
        else if ( header.fbits == 4'( __const__FBITS_SOUTH ) ) begin
          out_dir = 3'( __const__SOUTH );
        end
        else if ( header.fbits == 4'( __const__FBITS_WEST ) ) begin
          out_dir = 3'( __const__WEST );
        end
        else if ( header.fbits == 4'( __const__FBITS_EAST ) ) begin
          out_dir = 3'( __const__EAST );
        end
        else
          out_dir = 3'( __const__SELF );
      end
      else if ( dst_x < pos.pos_x ) begin
        out_dir = 3'( __const__WEST );
      end
      else if ( dst_x > pos.pos_x ) begin
        out_dir = 3'( __const__EAST );
      end
      else if ( dst_y < pos.pos_y ) begin
        out_dir = 3'( __const__NORTH );
      end
      else
        out_dir = 3'( __const__SOUTH );
    end
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-net/piton/PitonRouteUnitValRdy.py:112
  // @update
  // def up_state_next():
  //   s.state_next @= s.state
  //   if s.state == s.STATE_HEADER:
  //     # If the packet has body flits
  //     if s.any_give_en & ( s.header.plen > 0 ):
  //       s.state_next @= s.STATE_BODY
  // 
  //   else: # STATE_BODY
  //     if ( s.counter.count == 1 ) & s.any_give_en:
  //       s.state_next @= s.STATE_HEADER
  
  always_comb begin : up_state_next
    state_next = state;
    if ( state == 1'd0 ) begin
      if ( any_give_en & ( header.plen > 8'd0 ) ) begin
        state_next = 1'd1;
      end
    end
    else if ( ( counter__count == 8'd1 ) & any_give_en ) begin
      state_next = 1'd0;
    end
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-net/piton/PitonRouteUnitValRdy.py:183
  // @update_ff
  // def up_out_dir_r():
  //   s.out_dir_r <<= s.out_dir
  
  always_ff @(posedge clk) begin : up_out_dir_r
    out_dir_r <= out_dir;
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-net/piton/PitonRouteUnitValRdy.py:105
  // @update_ff
  // def up_state_r():
  //   if s.reset:
  //     s.state <<= s.STATE_HEADER
  //   else:
  //     s.state <<= s.state_next
  
  always_ff @(posedge clk) begin : up_state_r
    if ( reset ) begin
      state <= 1'd0;
    end
    else
      state <= state_next;
  end

  assign counter__clk = clk;
  assign counter__reset = reset;
  assign counter__incr = 1'd0;
  assign counter__load_value = header.plen;
  assign header.opt1 = in___msg[5:0];
  assign header.mshr = in___msg[13:6];
  assign header.mtype = in___msg[21:14];
  assign header.plen = in___msg[29:22];
  assign header.fbits = in___msg[33:30];
  assign header.ypos = in___msg[41:34];
  assign header.xpos = in___msg[49:42];
  assign header.chipid = in___msg[63:50];
  assign out__msg[0] = in___msg;
  assign out__msg[1] = in___msg;
  assign out__msg[2] = in___msg;
  assign out__msg[3] = in___msg;
  assign out__msg[4] = in___msg;

endmodule


// PyMTL Component RegEnRst Definition
// At /home/yo96/pymtl3-clones/pymtl3-release/pymtl3/stdlib/basic_rtl/registers.py

module RegEnRst__Type_Bits5__reset_value_1
(
  input  logic [0:0] clk ,
  input  logic [0:0] en ,
  input  logic [4:0] in_ ,
  output logic [4:0] out ,
  input  logic [0:0] reset 
);
  localparam logic [0:0] __const__reset_value_at_up_regenrst  = 1'd1;

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-clones/pymtl3-release/pymtl3/stdlib/basic_rtl/registers.py:55
  // @update_ff
  // def up_regenrst():
  //   if s.reset: s.out <<= reset_value
  //   elif s.en:  s.out <<= s.in_
  
  always_ff @(posedge clk) begin : up_regenrst
    if ( reset ) begin
      out <= 5'( __const__reset_value_at_up_regenrst );
    end
    else if ( en ) begin
      out <= in_;
    end
  end

endmodule


// PyMTL Component RoundRobinArbiterEn Definition
// At /home/yo96/pymtl3-clones/pymtl3-release/pymtl3/stdlib/basic_rtl/arbiters.py

module RoundRobinArbiterEn__nreqs_5
(
  input  logic [0:0] clk ,
  input  logic [0:0] en ,
  output logic [4:0] grants ,
  input  logic [4:0] reqs ,
  input  logic [0:0] reset 
);
  localparam logic [2:0] __const__nreqs_at_comb_reqs_int  = 3'd5;
  localparam logic [3:0] __const__nreqsX2_at_comb_reqs_int  = 4'd10;
  localparam logic [2:0] __const__nreqs_at_comb_grants  = 3'd5;
  localparam logic [2:0] __const__nreqs_at_comb_priority_int  = 3'd5;
  localparam logic [3:0] __const__nreqsX2_at_comb_priority_int  = 4'd10;
  localparam logic [3:0] __const__nreqsX2_at_comb_kills  = 4'd10;
  localparam logic [3:0] __const__nreqsX2_at_comb_grants_int  = 4'd10;
  logic [9:0] grants_int;
  logic [10:0] kills;
  logic [0:0] priority_en;
  logic [9:0] priority_int;
  logic [9:0] reqs_int;
  //-------------------------------------------------------------
  // Component priority_reg
  //-------------------------------------------------------------

  logic [0:0] priority_reg__clk;
  logic [0:0] priority_reg__en;
  logic [4:0] priority_reg__in_;
  logic [4:0] priority_reg__out;
  logic [0:0] priority_reg__reset;

  RegEnRst__Type_Bits5__reset_value_1 priority_reg
  (
    .clk( priority_reg__clk ),
    .en( priority_reg__en ),
    .in_( priority_reg__in_ ),
    .out( priority_reg__out ),
    .reset( priority_reg__reset )
  );

  //-------------------------------------------------------------
  // End of component priority_reg
  //-------------------------------------------------------------

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-clones/pymtl3-release/pymtl3/stdlib/basic_rtl/arbiters.py:118
  // @update
  // def comb_grants():
  //   for i in range( nreqs ):
  //     s.grants[i] @= s.grants_int[i] | s.grants_int[nreqs+i]
  
  always_comb begin : comb_grants
    for ( int unsigned i = 1'd0; i < 3'( __const__nreqs_at_comb_grants ); i += 1'd1 )
      grants[3'(i)] = grants_int[4'(i)] | grants_int[4'( __const__nreqs_at_comb_grants ) + 4'(i)];
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-clones/pymtl3-release/pymtl3/stdlib/basic_rtl/arbiters.py:141
  // @update
  // def comb_grants_int():
  //   for i in range( nreqsX2 ):
  //     if s.priority_int[i]:
  //       s.grants_int[i] @= s.reqs_int[i]
  //     else:
  //       s.grants_int[i] @= ~s.kills[i] & s.reqs_int[i]
  
  always_comb begin : comb_grants_int
    for ( int unsigned i = 1'd0; i < 4'( __const__nreqsX2_at_comb_grants_int ); i += 1'd1 )
      if ( priority_int[4'(i)] ) begin
        grants_int[4'(i)] = reqs_int[4'(i)];
      end
      else
        grants_int[4'(i)] = ( ~kills[4'(i)] ) & reqs_int[4'(i)];
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-clones/pymtl3-release/pymtl3/stdlib/basic_rtl/arbiters.py:132
  // @update
  // def comb_kills():
  //   s.kills[0] @= 1
  //   for i in range( nreqsX2 ):
  //     if s.priority_int[i]:
  //       s.kills[i+1] @= s.reqs_int[i]
  //     else:
  //       s.kills[i+1] @= s.kills[i] | ( ~s.kills[i] & s.reqs_int[i] )
  
  always_comb begin : comb_kills
    kills[4'd0] = 1'd1;
    for ( int unsigned i = 1'd0; i < 4'( __const__nreqsX2_at_comb_kills ); i += 1'd1 )
      if ( priority_int[4'(i)] ) begin
        kills[4'(i) + 4'd1] = reqs_int[4'(i)];
      end
      else
        kills[4'(i) + 4'd1] = kills[4'(i)] | ( ( ~kills[4'(i)] ) & reqs_int[4'(i)] );
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-clones/pymtl3-release/pymtl3/stdlib/basic_rtl/arbiters.py:123
  // @update
  // def comb_priority_en():
  //   s.priority_en @= ( s.grants != 0 ) & s.en
  
  always_comb begin : comb_priority_en
    priority_en = ( grants != 5'd0 ) & en;
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-clones/pymtl3-release/pymtl3/stdlib/basic_rtl/arbiters.py:127
  // @update
  // def comb_priority_int():
  //   s.priority_int[    0:nreqs  ] @= s.priority_reg.out
  //   s.priority_int[nreqs:nreqsX2] @= 0
  
  always_comb begin : comb_priority_int
    priority_int[4'd4:4'd0] = priority_reg__out;
    priority_int[4'd9:4'( __const__nreqs_at_comb_priority_int )] = 5'd0;
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-clones/pymtl3-release/pymtl3/stdlib/basic_rtl/arbiters.py:113
  // @update
  // def comb_reqs_int():
  //   s.reqs_int [    0:nreqs  ] @= s.reqs
  //   s.reqs_int [nreqs:nreqsX2] @= s.reqs
  
  always_comb begin : comb_reqs_int
    reqs_int[4'd4:4'd0] = reqs;
    reqs_int[4'd9:4'( __const__nreqs_at_comb_reqs_int )] = reqs;
  end

  assign priority_reg__clk = clk;
  assign priority_reg__reset = reset;
  assign priority_reg__en = priority_en;
  assign priority_reg__in_[4:1] = grants[3:0];
  assign priority_reg__in_[0:0] = grants[4:4];

endmodule


// PyMTL Component GrantHoldArbiter Definition
// At /home/yo96/pymtl3-net/ocnlib/rtl/GrantHoldArbiter.py

module GrantHoldArbiter__nreqs_5
(
  input  logic [0:0] clk ,
  input  logic [0:0] en ,
  output logic [4:0] grants ,
  input  logic [0:0] hold ,
  input  logic [4:0] reqs ,
  input  logic [0:0] reset 
);
  logic [4:0] last_r;
  //-------------------------------------------------------------
  // Component arb
  //-------------------------------------------------------------

  logic [0:0] arb__clk;
  logic [0:0] arb__en;
  logic [4:0] arb__grants;
  logic [4:0] arb__reqs;
  logic [0:0] arb__reset;

  RoundRobinArbiterEn__nreqs_5 arb
  (
    .clk( arb__clk ),
    .en( arb__en ),
    .grants( arb__grants ),
    .reqs( arb__reqs ),
    .reset( arb__reset )
  );

  //-------------------------------------------------------------
  // End of component arb
  //-------------------------------------------------------------

  // PyMTL Lambda Block Source
  // At /home/yo96/pymtl3-net/ocnlib/rtl/GrantHoldArbiter.py:30
  // s.arb.en   //= lambda: s.en
  
  always_comb begin : _lambda__s_dut_switch_units_0__arbiter_arb_en
    arb__en = en;
  end

  // PyMTL Lambda Block Source
  // At /home/yo96/pymtl3-net/ocnlib/rtl/GrantHoldArbiter.py:29
  // s.arb.reqs //= lambda: 0 if s.hold else s.reqs
  
  always_comb begin : _lambda__s_dut_switch_units_0__arbiter_arb_reqs
    arb__reqs = hold ? 5'd0 : reqs;
  end

  // PyMTL Lambda Block Source
  // At /home/yo96/pymtl3-net/ocnlib/rtl/GrantHoldArbiter.py:31
  // s.grants   //= lambda: s.arb.grants if ~s.hold else s.last_r
  
  always_comb begin : _lambda__s_dut_switch_units_0__arbiter_grants
    grants = ( ~hold ) ? arb__grants : last_r;
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-net/ocnlib/rtl/GrantHoldArbiter.py:33
  // @update_ff
  // def up_last_r():
  //   s.last_r <<= s.grants
  
  always_ff @(posedge clk) begin : up_last_r
    last_r <= grants;
  end

  assign arb__clk = clk;
  assign arb__reset = reset;

endmodule


// PyMTL Component Encoder Definition
// At /home/yo96/pymtl3-clones/pymtl3-release/pymtl3/stdlib/basic_rtl/encoders.py

module Encoder__in_nbits_5__out_nbits_3
(
  input  logic [0:0] clk ,
  input  logic [4:0] in_ ,
  output logic [2:0] out ,
  input  logic [0:0] reset 
);

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-clones/pymtl3-release/pymtl3/stdlib/basic_rtl/encoders.py:28
  // @update
  // def encode():
  //   s.out @= 0
  //   for i in range( s.in_nbits ):
  //     if s.in_[i]:
  //       s.out @= i
  
  always_comb begin : encode
    out = 3'd0;
    for ( int unsigned i = 1'd0; i < 3'd5; i += 1'd1 )
      if ( in_[3'(i)] ) begin
        out = 3'(i);
      end
  end

endmodule


// PyMTL Component Mux Definition
// At /home/yo96/pymtl3-clones/pymtl3-release/pymtl3/stdlib/basic_rtl/arithmetics.py

module Mux__Type_Bits64__ninputs_5
(
  input  logic [0:0] clk ,
  input  logic [63:0] in_ [0:4],
  output logic [63:0] out ,
  input  logic [0:0] reset ,
  input  logic [2:0] sel 
);

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-clones/pymtl3-release/pymtl3/stdlib/basic_rtl/arithmetics.py:13
  // @update
  // def up_mux():
  //   s.out @= s.in_[ s.sel ]
  
  always_comb begin : up_mux
    out = in_[sel];
  end

endmodule


// PyMTL Component SwitchUnitGrantHoldValRdy Definition
// At /home/yo96/pymtl3-net/router/SwitchUnitGrantHoldValRdy.py

module SwitchUnitGrantHoldValRdy__Type_Bits64__num_inports_5
(
  input  logic [0:0] clk ,
  input  logic [4:0] hold ,
  input  logic [0:0] reset ,
  input logic [63:0] in___msg [0:4] ,
  output logic [0:0] in___rdy [0:4] ,
  input logic [0:0] in___val [0:4] ,
  output logic [63:0] out__msg  ,
  input logic [0:0] out__rdy  ,
  output logic [0:0] out__val  
);
  localparam logic [2:0] __const__num_inports_at_up_granted_out_val  = 3'd5;
  localparam logic [0:0] __const__i_at__lambda__s_dut_switch_units_0__in__0__rdy  = 1'd0;
  localparam logic [0:0] __const__i_at__lambda__s_dut_switch_units_0__in__1__rdy  = 1'd1;
  localparam logic [1:0] __const__i_at__lambda__s_dut_switch_units_0__in__2__rdy  = 2'd2;
  localparam logic [1:0] __const__i_at__lambda__s_dut_switch_units_0__in__3__rdy  = 2'd3;
  localparam logic [2:0] __const__i_at__lambda__s_dut_switch_units_0__in__4__rdy  = 3'd4;
  logic [0:0] any_hold;
  logic [0:0] granted_out_val;
  //-------------------------------------------------------------
  // Component arbiter
  //-------------------------------------------------------------

  logic [0:0] arbiter__clk;
  logic [0:0] arbiter__en;
  logic [4:0] arbiter__grants;
  logic [0:0] arbiter__hold;
  logic [4:0] arbiter__reqs;
  logic [0:0] arbiter__reset;

  GrantHoldArbiter__nreqs_5 arbiter
  (
    .clk( arbiter__clk ),
    .en( arbiter__en ),
    .grants( arbiter__grants ),
    .hold( arbiter__hold ),
    .reqs( arbiter__reqs ),
    .reset( arbiter__reset )
  );

  //-------------------------------------------------------------
  // End of component arbiter
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component encoder
  //-------------------------------------------------------------

  logic [0:0] encoder__clk;
  logic [4:0] encoder__in_;
  logic [2:0] encoder__out;
  logic [0:0] encoder__reset;

  Encoder__in_nbits_5__out_nbits_3 encoder
  (
    .clk( encoder__clk ),
    .in_( encoder__in_ ),
    .out( encoder__out ),
    .reset( encoder__reset )
  );

  //-------------------------------------------------------------
  // End of component encoder
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component mux
  //-------------------------------------------------------------

  logic [0:0] mux__clk;
  logic [63:0] mux__in_ [0:4];
  logic [63:0] mux__out;
  logic [0:0] mux__reset;
  logic [2:0] mux__sel;

  Mux__Type_Bits64__ninputs_5 mux
  (
    .clk( mux__clk ),
    .in_( mux__in_ ),
    .out( mux__out ),
    .reset( mux__reset ),
    .sel( mux__sel )
  );

  //-------------------------------------------------------------
  // End of component mux
  //-------------------------------------------------------------

  // PyMTL Lambda Block Source
  // At /home/yo96/pymtl3-net/router/SwitchUnitGrantHoldValRdy.py:37
  // s.arbiter.en   //= lambda: ~s.any_hold & s.out.val & s.out.rdy
  
  always_comb begin : _lambda__s_dut_switch_units_0__arbiter_en
    arbiter__en = ( ( ~any_hold ) & out__val ) & out__rdy;
  end

  // PyMTL Lambda Block Source
  // At /home/yo96/pymtl3-net/router/SwitchUnitGrantHoldValRdy.py:63
  // s.in_[i].rdy //= lambda: s.out.rdy & ( s.mux.sel == i ) & ( s.arbiter.grants > 0 )
  
  always_comb begin : _lambda__s_dut_switch_units_0__in__0__rdy
    in___rdy[3'd0] = ( out__rdy & ( mux__sel == 3'( __const__i_at__lambda__s_dut_switch_units_0__in__0__rdy ) ) ) & ( arbiter__grants > 5'd0 );
  end

  // PyMTL Lambda Block Source
  // At /home/yo96/pymtl3-net/router/SwitchUnitGrantHoldValRdy.py:63
  // s.in_[i].rdy //= lambda: s.out.rdy & ( s.mux.sel == i ) & ( s.arbiter.grants > 0 )
  
  always_comb begin : _lambda__s_dut_switch_units_0__in__1__rdy
    in___rdy[3'd1] = ( out__rdy & ( mux__sel == 3'( __const__i_at__lambda__s_dut_switch_units_0__in__1__rdy ) ) ) & ( arbiter__grants > 5'd0 );
  end

  // PyMTL Lambda Block Source
  // At /home/yo96/pymtl3-net/router/SwitchUnitGrantHoldValRdy.py:63
  // s.in_[i].rdy //= lambda: s.out.rdy & ( s.mux.sel == i ) & ( s.arbiter.grants > 0 )
  
  always_comb begin : _lambda__s_dut_switch_units_0__in__2__rdy
    in___rdy[3'd2] = ( out__rdy & ( mux__sel == 3'( __const__i_at__lambda__s_dut_switch_units_0__in__2__rdy ) ) ) & ( arbiter__grants > 5'd0 );
  end

  // PyMTL Lambda Block Source
  // At /home/yo96/pymtl3-net/router/SwitchUnitGrantHoldValRdy.py:63
  // s.in_[i].rdy //= lambda: s.out.rdy & ( s.mux.sel == i ) & ( s.arbiter.grants > 0 )
  
  always_comb begin : _lambda__s_dut_switch_units_0__in__3__rdy
    in___rdy[3'd3] = ( out__rdy & ( mux__sel == 3'( __const__i_at__lambda__s_dut_switch_units_0__in__3__rdy ) ) ) & ( arbiter__grants > 5'd0 );
  end

  // PyMTL Lambda Block Source
  // At /home/yo96/pymtl3-net/router/SwitchUnitGrantHoldValRdy.py:63
  // s.in_[i].rdy //= lambda: s.out.rdy & ( s.mux.sel == i ) & ( s.arbiter.grants > 0 )
  
  always_comb begin : _lambda__s_dut_switch_units_0__in__4__rdy
    in___rdy[3'd4] = ( out__rdy & ( mux__sel == 3'( __const__i_at__lambda__s_dut_switch_units_0__in__4__rdy ) ) ) & ( arbiter__grants > 5'd0 );
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-net/router/SwitchUnitGrantHoldValRdy.py:47
  // @update
  // def up_any_hold():
  //   s.any_hold @= s.hold > 0
  
  always_comb begin : up_any_hold
    any_hold = hold > 5'd0;
  end

  // PyMTL Update Block Source
  // At /home/yo96/pymtl3-net/router/SwitchUnitGrantHoldValRdy.py:51
  // @update
  // def up_granted_out_val():
  //   s.granted_out_val @= 0
  //   for i in range( num_inports ):
  //     if s.arbiter.grants[i]:
  //       s.granted_out_val @= s.in_[i].val
  
  always_comb begin : up_granted_out_val
    granted_out_val = 1'd0;
    for ( int unsigned i = 1'd0; i < 3'( __const__num_inports_at_up_granted_out_val ); i += 1'd1 )
      if ( arbiter__grants[3'(i)] ) begin
        granted_out_val = in___val[3'(i)];
      end
  end

  assign arbiter__clk = clk;
  assign arbiter__reset = reset;
  assign arbiter__hold = any_hold;
  assign mux__clk = clk;
  assign mux__reset = reset;
  assign out__msg = mux__out;
  assign encoder__clk = clk;
  assign encoder__reset = reset;
  assign encoder__in_ = arbiter__grants;
  assign mux__sel = encoder__out;
  assign arbiter__reqs[0:0] = in___val[0];
  assign mux__in_[0] = in___msg[0];
  assign arbiter__reqs[1:1] = in___val[1];
  assign mux__in_[1] = in___msg[1];
  assign arbiter__reqs[2:2] = in___val[2];
  assign mux__in_[2] = in___msg[2];
  assign arbiter__reqs[3:3] = in___val[3];
  assign mux__in_[3] = in___msg[3];
  assign arbiter__reqs[4:4] = in___val[4];
  assign mux__in_[4] = in___msg[4];
  assign out__val = granted_out_val;

endmodule


// PyMTL Component PitonRouterValRdy Definition
// Full name: PitonRouterValRdy__PositionType_PitonPosition__chipid_14__pos_x_8__pos_y_8__InputUnitType_InputUnitValRdy__RouteUnitType_PitonRouteUnitValRdy__SwitchUnitType_SwitchUnitGrantHoldValRdy__OutputUnitType_OutputUnitValRdy
// At /home/yo96/pymtl3-net/piton/PitonRouterValRdy.py

module pyocn_router
(
  input  logic [0:0] clk ,
  input  PitonPosition__chipid_14__pos_x_8__pos_y_8 pos ,
  input  logic [0:0] reset ,
  input logic [63:0] in___msg [0:4] ,
  output logic [0:0] in___rdy [0:4] ,
  input logic [0:0] in___val [0:4] ,
  output logic [63:0] out__msg [0:4] ,
  input logic [0:0] out__rdy [0:4] ,
  output logic [0:0] out__val [0:4] 
);
  //-------------------------------------------------------------
  // Component input_units[0:4]
  //-------------------------------------------------------------

  logic [0:0] input_units__clk [0:4];
  logic [0:0] input_units__reset [0:4];
  logic [63:0] input_units__in___msg [0:4];
  logic [0:0] input_units__in___rdy [0:4];
  logic [0:0] input_units__in___val [0:4];
  logic [63:0] input_units__out__msg [0:4];
  logic [0:0] input_units__out__rdy [0:4];
  logic [0:0] input_units__out__val [0:4];

  InputUnitValRdy__PacketType_Bits64__QueueType_NormalQueueValRdy input_units__0
  (
    .clk( input_units__clk[0] ),
    .reset( input_units__reset[0] ),
    .in___msg( input_units__in___msg[0] ),
    .in___rdy( input_units__in___rdy[0] ),
    .in___val( input_units__in___val[0] ),
    .out__msg( input_units__out__msg[0] ),
    .out__rdy( input_units__out__rdy[0] ),
    .out__val( input_units__out__val[0] )
  );

  InputUnitValRdy__PacketType_Bits64__QueueType_NormalQueueValRdy input_units__1
  (
    .clk( input_units__clk[1] ),
    .reset( input_units__reset[1] ),
    .in___msg( input_units__in___msg[1] ),
    .in___rdy( input_units__in___rdy[1] ),
    .in___val( input_units__in___val[1] ),
    .out__msg( input_units__out__msg[1] ),
    .out__rdy( input_units__out__rdy[1] ),
    .out__val( input_units__out__val[1] )
  );

  InputUnitValRdy__PacketType_Bits64__QueueType_NormalQueueValRdy input_units__2
  (
    .clk( input_units__clk[2] ),
    .reset( input_units__reset[2] ),
    .in___msg( input_units__in___msg[2] ),
    .in___rdy( input_units__in___rdy[2] ),
    .in___val( input_units__in___val[2] ),
    .out__msg( input_units__out__msg[2] ),
    .out__rdy( input_units__out__rdy[2] ),
    .out__val( input_units__out__val[2] )
  );

  InputUnitValRdy__PacketType_Bits64__QueueType_NormalQueueValRdy input_units__3
  (
    .clk( input_units__clk[3] ),
    .reset( input_units__reset[3] ),
    .in___msg( input_units__in___msg[3] ),
    .in___rdy( input_units__in___rdy[3] ),
    .in___val( input_units__in___val[3] ),
    .out__msg( input_units__out__msg[3] ),
    .out__rdy( input_units__out__rdy[3] ),
    .out__val( input_units__out__val[3] )
  );

  InputUnitValRdy__PacketType_Bits64__QueueType_NormalQueueValRdy input_units__4
  (
    .clk( input_units__clk[4] ),
    .reset( input_units__reset[4] ),
    .in___msg( input_units__in___msg[4] ),
    .in___rdy( input_units__in___rdy[4] ),
    .in___val( input_units__in___val[4] ),
    .out__msg( input_units__out__msg[4] ),
    .out__rdy( input_units__out__rdy[4] ),
    .out__val( input_units__out__val[4] )
  );

  //-------------------------------------------------------------
  // End of component input_units[0:4]
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component output_units[0:4]
  //-------------------------------------------------------------

  logic [0:0] output_units__clk [0:4];
  logic [0:0] output_units__reset [0:4];
  logic [63:0] output_units__in___msg [0:4];
  logic [0:0] output_units__in___rdy [0:4];
  logic [0:0] output_units__in___val [0:4];
  logic [63:0] output_units__out__msg [0:4];
  logic [0:0] output_units__out__rdy [0:4];
  logic [0:0] output_units__out__val [0:4];

  OutputUnitValRdy__17367c9c33e88eed output_units__0
  (
    .clk( output_units__clk[0] ),
    .reset( output_units__reset[0] ),
    .in___msg( output_units__in___msg[0] ),
    .in___rdy( output_units__in___rdy[0] ),
    .in___val( output_units__in___val[0] ),
    .out__msg( output_units__out__msg[0] ),
    .out__rdy( output_units__out__rdy[0] ),
    .out__val( output_units__out__val[0] )
  );

  OutputUnitValRdy__17367c9c33e88eed output_units__1
  (
    .clk( output_units__clk[1] ),
    .reset( output_units__reset[1] ),
    .in___msg( output_units__in___msg[1] ),
    .in___rdy( output_units__in___rdy[1] ),
    .in___val( output_units__in___val[1] ),
    .out__msg( output_units__out__msg[1] ),
    .out__rdy( output_units__out__rdy[1] ),
    .out__val( output_units__out__val[1] )
  );

  OutputUnitValRdy__17367c9c33e88eed output_units__2
  (
    .clk( output_units__clk[2] ),
    .reset( output_units__reset[2] ),
    .in___msg( output_units__in___msg[2] ),
    .in___rdy( output_units__in___rdy[2] ),
    .in___val( output_units__in___val[2] ),
    .out__msg( output_units__out__msg[2] ),
    .out__rdy( output_units__out__rdy[2] ),
    .out__val( output_units__out__val[2] )
  );

  OutputUnitValRdy__17367c9c33e88eed output_units__3
  (
    .clk( output_units__clk[3] ),
    .reset( output_units__reset[3] ),
    .in___msg( output_units__in___msg[3] ),
    .in___rdy( output_units__in___rdy[3] ),
    .in___val( output_units__in___val[3] ),
    .out__msg( output_units__out__msg[3] ),
    .out__rdy( output_units__out__rdy[3] ),
    .out__val( output_units__out__val[3] )
  );

  OutputUnitValRdy__17367c9c33e88eed output_units__4
  (
    .clk( output_units__clk[4] ),
    .reset( output_units__reset[4] ),
    .in___msg( output_units__in___msg[4] ),
    .in___rdy( output_units__in___rdy[4] ),
    .in___val( output_units__in___val[4] ),
    .out__msg( output_units__out__msg[4] ),
    .out__rdy( output_units__out__rdy[4] ),
    .out__val( output_units__out__val[4] )
  );

  //-------------------------------------------------------------
  // End of component output_units[0:4]
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component route_units[0:4]
  //-------------------------------------------------------------

  logic [0:0] route_units__clk [0:4];
  logic [0:0] route_units__hold [0:4][0:4];
  PitonPosition__chipid_14__pos_x_8__pos_y_8 route_units__pos [0:4];
  logic [0:0] route_units__reset [0:4];
  logic [63:0] route_units__in___msg [0:4];
  logic [0:0] route_units__in___rdy [0:4];
  logic [0:0] route_units__in___val [0:4];
  logic [63:0] route_units__out__msg [0:4][0:4];
  logic [0:0] route_units__out__rdy [0:4][0:4];
  logic [0:0] route_units__out__val [0:4][0:4];

  PitonRouteUnitValRdy__99fda60f245e4f54 route_units__0
  (
    .clk( route_units__clk[0] ),
    .hold( route_units__hold[0] ),
    .pos( route_units__pos[0] ),
    .reset( route_units__reset[0] ),
    .in___msg( route_units__in___msg[0] ),
    .in___rdy( route_units__in___rdy[0] ),
    .in___val( route_units__in___val[0] ),
    .out__msg( route_units__out__msg[0] ),
    .out__rdy( route_units__out__rdy[0] ),
    .out__val( route_units__out__val[0] )
  );

  PitonRouteUnitValRdy__99fda60f245e4f54 route_units__1
  (
    .clk( route_units__clk[1] ),
    .hold( route_units__hold[1] ),
    .pos( route_units__pos[1] ),
    .reset( route_units__reset[1] ),
    .in___msg( route_units__in___msg[1] ),
    .in___rdy( route_units__in___rdy[1] ),
    .in___val( route_units__in___val[1] ),
    .out__msg( route_units__out__msg[1] ),
    .out__rdy( route_units__out__rdy[1] ),
    .out__val( route_units__out__val[1] )
  );

  PitonRouteUnitValRdy__99fda60f245e4f54 route_units__2
  (
    .clk( route_units__clk[2] ),
    .hold( route_units__hold[2] ),
    .pos( route_units__pos[2] ),
    .reset( route_units__reset[2] ),
    .in___msg( route_units__in___msg[2] ),
    .in___rdy( route_units__in___rdy[2] ),
    .in___val( route_units__in___val[2] ),
    .out__msg( route_units__out__msg[2] ),
    .out__rdy( route_units__out__rdy[2] ),
    .out__val( route_units__out__val[2] )
  );

  PitonRouteUnitValRdy__99fda60f245e4f54 route_units__3
  (
    .clk( route_units__clk[3] ),
    .hold( route_units__hold[3] ),
    .pos( route_units__pos[3] ),
    .reset( route_units__reset[3] ),
    .in___msg( route_units__in___msg[3] ),
    .in___rdy( route_units__in___rdy[3] ),
    .in___val( route_units__in___val[3] ),
    .out__msg( route_units__out__msg[3] ),
    .out__rdy( route_units__out__rdy[3] ),
    .out__val( route_units__out__val[3] )
  );

  PitonRouteUnitValRdy__99fda60f245e4f54 route_units__4
  (
    .clk( route_units__clk[4] ),
    .hold( route_units__hold[4] ),
    .pos( route_units__pos[4] ),
    .reset( route_units__reset[4] ),
    .in___msg( route_units__in___msg[4] ),
    .in___rdy( route_units__in___rdy[4] ),
    .in___val( route_units__in___val[4] ),
    .out__msg( route_units__out__msg[4] ),
    .out__rdy( route_units__out__rdy[4] ),
    .out__val( route_units__out__val[4] )
  );

  //-------------------------------------------------------------
  // End of component route_units[0:4]
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component switch_units[0:4]
  //-------------------------------------------------------------

  logic [0:0] switch_units__clk [0:4];
  logic [4:0] switch_units__hold [0:4];
  logic [0:0] switch_units__reset [0:4];
  logic [63:0] switch_units__in___msg [0:4][0:4];
  logic [0:0] switch_units__in___rdy [0:4][0:4];
  logic [0:0] switch_units__in___val [0:4][0:4];
  logic [63:0] switch_units__out__msg [0:4];
  logic [0:0] switch_units__out__rdy [0:4];
  logic [0:0] switch_units__out__val [0:4];

  SwitchUnitGrantHoldValRdy__Type_Bits64__num_inports_5 switch_units__0
  (
    .clk( switch_units__clk[0] ),
    .hold( switch_units__hold[0] ),
    .reset( switch_units__reset[0] ),
    .in___msg( switch_units__in___msg[0] ),
    .in___rdy( switch_units__in___rdy[0] ),
    .in___val( switch_units__in___val[0] ),
    .out__msg( switch_units__out__msg[0] ),
    .out__rdy( switch_units__out__rdy[0] ),
    .out__val( switch_units__out__val[0] )
  );

  SwitchUnitGrantHoldValRdy__Type_Bits64__num_inports_5 switch_units__1
  (
    .clk( switch_units__clk[1] ),
    .hold( switch_units__hold[1] ),
    .reset( switch_units__reset[1] ),
    .in___msg( switch_units__in___msg[1] ),
    .in___rdy( switch_units__in___rdy[1] ),
    .in___val( switch_units__in___val[1] ),
    .out__msg( switch_units__out__msg[1] ),
    .out__rdy( switch_units__out__rdy[1] ),
    .out__val( switch_units__out__val[1] )
  );

  SwitchUnitGrantHoldValRdy__Type_Bits64__num_inports_5 switch_units__2
  (
    .clk( switch_units__clk[2] ),
    .hold( switch_units__hold[2] ),
    .reset( switch_units__reset[2] ),
    .in___msg( switch_units__in___msg[2] ),
    .in___rdy( switch_units__in___rdy[2] ),
    .in___val( switch_units__in___val[2] ),
    .out__msg( switch_units__out__msg[2] ),
    .out__rdy( switch_units__out__rdy[2] ),
    .out__val( switch_units__out__val[2] )
  );

  SwitchUnitGrantHoldValRdy__Type_Bits64__num_inports_5 switch_units__3
  (
    .clk( switch_units__clk[3] ),
    .hold( switch_units__hold[3] ),
    .reset( switch_units__reset[3] ),
    .in___msg( switch_units__in___msg[3] ),
    .in___rdy( switch_units__in___rdy[3] ),
    .in___val( switch_units__in___val[3] ),
    .out__msg( switch_units__out__msg[3] ),
    .out__rdy( switch_units__out__rdy[3] ),
    .out__val( switch_units__out__val[3] )
  );

  SwitchUnitGrantHoldValRdy__Type_Bits64__num_inports_5 switch_units__4
  (
    .clk( switch_units__clk[4] ),
    .hold( switch_units__hold[4] ),
    .reset( switch_units__reset[4] ),
    .in___msg( switch_units__in___msg[4] ),
    .in___rdy( switch_units__in___rdy[4] ),
    .in___val( switch_units__in___val[4] ),
    .out__msg( switch_units__out__msg[4] ),
    .out__rdy( switch_units__out__rdy[4] ),
    .out__val( switch_units__out__val[4] )
  );

  //-------------------------------------------------------------
  // End of component switch_units[0:4]
  //-------------------------------------------------------------

  assign input_units__clk[0] = clk;
  assign input_units__reset[0] = reset;
  assign input_units__clk[1] = clk;
  assign input_units__reset[1] = reset;
  assign input_units__clk[2] = clk;
  assign input_units__reset[2] = reset;
  assign input_units__clk[3] = clk;
  assign input_units__reset[3] = reset;
  assign input_units__clk[4] = clk;
  assign input_units__reset[4] = reset;
  assign route_units__clk[0] = clk;
  assign route_units__reset[0] = reset;
  assign route_units__clk[1] = clk;
  assign route_units__reset[1] = reset;
  assign route_units__clk[2] = clk;
  assign route_units__reset[2] = reset;
  assign route_units__clk[3] = clk;
  assign route_units__reset[3] = reset;
  assign route_units__clk[4] = clk;
  assign route_units__reset[4] = reset;
  assign switch_units__clk[0] = clk;
  assign switch_units__reset[0] = reset;
  assign switch_units__clk[1] = clk;
  assign switch_units__reset[1] = reset;
  assign switch_units__clk[2] = clk;
  assign switch_units__reset[2] = reset;
  assign switch_units__clk[3] = clk;
  assign switch_units__reset[3] = reset;
  assign switch_units__clk[4] = clk;
  assign switch_units__reset[4] = reset;
  assign output_units__clk[0] = clk;
  assign output_units__reset[0] = reset;
  assign output_units__clk[1] = clk;
  assign output_units__reset[1] = reset;
  assign output_units__clk[2] = clk;
  assign output_units__reset[2] = reset;
  assign output_units__clk[3] = clk;
  assign output_units__reset[3] = reset;
  assign output_units__clk[4] = clk;
  assign output_units__reset[4] = reset;
  assign input_units__in___msg[0] = in___msg[0];
  assign in___rdy[0] = input_units__in___rdy[0];
  assign input_units__in___val[0] = in___val[0];
  assign route_units__in___msg[0] = input_units__out__msg[0];
  assign input_units__out__rdy[0] = route_units__in___rdy[0];
  assign route_units__in___val[0] = input_units__out__val[0];
  assign route_units__pos[0] = pos;
  assign input_units__in___msg[1] = in___msg[1];
  assign in___rdy[1] = input_units__in___rdy[1];
  assign input_units__in___val[1] = in___val[1];
  assign route_units__in___msg[1] = input_units__out__msg[1];
  assign input_units__out__rdy[1] = route_units__in___rdy[1];
  assign route_units__in___val[1] = input_units__out__val[1];
  assign route_units__pos[1] = pos;
  assign input_units__in___msg[2] = in___msg[2];
  assign in___rdy[2] = input_units__in___rdy[2];
  assign input_units__in___val[2] = in___val[2];
  assign route_units__in___msg[2] = input_units__out__msg[2];
  assign input_units__out__rdy[2] = route_units__in___rdy[2];
  assign route_units__in___val[2] = input_units__out__val[2];
  assign route_units__pos[2] = pos;
  assign input_units__in___msg[3] = in___msg[3];
  assign in___rdy[3] = input_units__in___rdy[3];
  assign input_units__in___val[3] = in___val[3];
  assign route_units__in___msg[3] = input_units__out__msg[3];
  assign input_units__out__rdy[3] = route_units__in___rdy[3];
  assign route_units__in___val[3] = input_units__out__val[3];
  assign route_units__pos[3] = pos;
  assign input_units__in___msg[4] = in___msg[4];
  assign in___rdy[4] = input_units__in___rdy[4];
  assign input_units__in___val[4] = in___val[4];
  assign route_units__in___msg[4] = input_units__out__msg[4];
  assign input_units__out__rdy[4] = route_units__in___rdy[4];
  assign route_units__in___val[4] = input_units__out__val[4];
  assign route_units__pos[4] = pos;
  assign switch_units__in___msg[0][0] = route_units__out__msg[0][0];
  assign route_units__out__rdy[0][0] = switch_units__in___rdy[0][0];
  assign switch_units__in___val[0][0] = route_units__out__val[0][0];
  assign switch_units__hold[0][0:0] = route_units__hold[0][0];
  assign switch_units__in___msg[1][0] = route_units__out__msg[0][1];
  assign route_units__out__rdy[0][1] = switch_units__in___rdy[1][0];
  assign switch_units__in___val[1][0] = route_units__out__val[0][1];
  assign switch_units__hold[1][0:0] = route_units__hold[0][1];
  assign switch_units__in___msg[2][0] = route_units__out__msg[0][2];
  assign route_units__out__rdy[0][2] = switch_units__in___rdy[2][0];
  assign switch_units__in___val[2][0] = route_units__out__val[0][2];
  assign switch_units__hold[2][0:0] = route_units__hold[0][2];
  assign switch_units__in___msg[3][0] = route_units__out__msg[0][3];
  assign route_units__out__rdy[0][3] = switch_units__in___rdy[3][0];
  assign switch_units__in___val[3][0] = route_units__out__val[0][3];
  assign switch_units__hold[3][0:0] = route_units__hold[0][3];
  assign switch_units__in___msg[4][0] = route_units__out__msg[0][4];
  assign route_units__out__rdy[0][4] = switch_units__in___rdy[4][0];
  assign switch_units__in___val[4][0] = route_units__out__val[0][4];
  assign switch_units__hold[4][0:0] = route_units__hold[0][4];
  assign switch_units__in___msg[0][1] = route_units__out__msg[1][0];
  assign route_units__out__rdy[1][0] = switch_units__in___rdy[0][1];
  assign switch_units__in___val[0][1] = route_units__out__val[1][0];
  assign switch_units__hold[0][1:1] = route_units__hold[1][0];
  assign switch_units__in___msg[1][1] = route_units__out__msg[1][1];
  assign route_units__out__rdy[1][1] = switch_units__in___rdy[1][1];
  assign switch_units__in___val[1][1] = route_units__out__val[1][1];
  assign switch_units__hold[1][1:1] = route_units__hold[1][1];
  assign switch_units__in___msg[2][1] = route_units__out__msg[1][2];
  assign route_units__out__rdy[1][2] = switch_units__in___rdy[2][1];
  assign switch_units__in___val[2][1] = route_units__out__val[1][2];
  assign switch_units__hold[2][1:1] = route_units__hold[1][2];
  assign switch_units__in___msg[3][1] = route_units__out__msg[1][3];
  assign route_units__out__rdy[1][3] = switch_units__in___rdy[3][1];
  assign switch_units__in___val[3][1] = route_units__out__val[1][3];
  assign switch_units__hold[3][1:1] = route_units__hold[1][3];
  assign switch_units__in___msg[4][1] = route_units__out__msg[1][4];
  assign route_units__out__rdy[1][4] = switch_units__in___rdy[4][1];
  assign switch_units__in___val[4][1] = route_units__out__val[1][4];
  assign switch_units__hold[4][1:1] = route_units__hold[1][4];
  assign switch_units__in___msg[0][2] = route_units__out__msg[2][0];
  assign route_units__out__rdy[2][0] = switch_units__in___rdy[0][2];
  assign switch_units__in___val[0][2] = route_units__out__val[2][0];
  assign switch_units__hold[0][2:2] = route_units__hold[2][0];
  assign switch_units__in___msg[1][2] = route_units__out__msg[2][1];
  assign route_units__out__rdy[2][1] = switch_units__in___rdy[1][2];
  assign switch_units__in___val[1][2] = route_units__out__val[2][1];
  assign switch_units__hold[1][2:2] = route_units__hold[2][1];
  assign switch_units__in___msg[2][2] = route_units__out__msg[2][2];
  assign route_units__out__rdy[2][2] = switch_units__in___rdy[2][2];
  assign switch_units__in___val[2][2] = route_units__out__val[2][2];
  assign switch_units__hold[2][2:2] = route_units__hold[2][2];
  assign switch_units__in___msg[3][2] = route_units__out__msg[2][3];
  assign route_units__out__rdy[2][3] = switch_units__in___rdy[3][2];
  assign switch_units__in___val[3][2] = route_units__out__val[2][3];
  assign switch_units__hold[3][2:2] = route_units__hold[2][3];
  assign switch_units__in___msg[4][2] = route_units__out__msg[2][4];
  assign route_units__out__rdy[2][4] = switch_units__in___rdy[4][2];
  assign switch_units__in___val[4][2] = route_units__out__val[2][4];
  assign switch_units__hold[4][2:2] = route_units__hold[2][4];
  assign switch_units__in___msg[0][3] = route_units__out__msg[3][0];
  assign route_units__out__rdy[3][0] = switch_units__in___rdy[0][3];
  assign switch_units__in___val[0][3] = route_units__out__val[3][0];
  assign switch_units__hold[0][3:3] = route_units__hold[3][0];
  assign switch_units__in___msg[1][3] = route_units__out__msg[3][1];
  assign route_units__out__rdy[3][1] = switch_units__in___rdy[1][3];
  assign switch_units__in___val[1][3] = route_units__out__val[3][1];
  assign switch_units__hold[1][3:3] = route_units__hold[3][1];
  assign switch_units__in___msg[2][3] = route_units__out__msg[3][2];
  assign route_units__out__rdy[3][2] = switch_units__in___rdy[2][3];
  assign switch_units__in___val[2][3] = route_units__out__val[3][2];
  assign switch_units__hold[2][3:3] = route_units__hold[3][2];
  assign switch_units__in___msg[3][3] = route_units__out__msg[3][3];
  assign route_units__out__rdy[3][3] = switch_units__in___rdy[3][3];
  assign switch_units__in___val[3][3] = route_units__out__val[3][3];
  assign switch_units__hold[3][3:3] = route_units__hold[3][3];
  assign switch_units__in___msg[4][3] = route_units__out__msg[3][4];
  assign route_units__out__rdy[3][4] = switch_units__in___rdy[4][3];
  assign switch_units__in___val[4][3] = route_units__out__val[3][4];
  assign switch_units__hold[4][3:3] = route_units__hold[3][4];
  assign switch_units__in___msg[0][4] = route_units__out__msg[4][0];
  assign route_units__out__rdy[4][0] = switch_units__in___rdy[0][4];
  assign switch_units__in___val[0][4] = route_units__out__val[4][0];
  assign switch_units__hold[0][4:4] = route_units__hold[4][0];
  assign switch_units__in___msg[1][4] = route_units__out__msg[4][1];
  assign route_units__out__rdy[4][1] = switch_units__in___rdy[1][4];
  assign switch_units__in___val[1][4] = route_units__out__val[4][1];
  assign switch_units__hold[1][4:4] = route_units__hold[4][1];
  assign switch_units__in___msg[2][4] = route_units__out__msg[4][2];
  assign route_units__out__rdy[4][2] = switch_units__in___rdy[2][4];
  assign switch_units__in___val[2][4] = route_units__out__val[4][2];
  assign switch_units__hold[2][4:4] = route_units__hold[4][2];
  assign switch_units__in___msg[3][4] = route_units__out__msg[4][3];
  assign route_units__out__rdy[4][3] = switch_units__in___rdy[3][4];
  assign switch_units__in___val[3][4] = route_units__out__val[4][3];
  assign switch_units__hold[3][4:4] = route_units__hold[4][3];
  assign switch_units__in___msg[4][4] = route_units__out__msg[4][4];
  assign route_units__out__rdy[4][4] = switch_units__in___rdy[4][4];
  assign switch_units__in___val[4][4] = route_units__out__val[4][4];
  assign switch_units__hold[4][4:4] = route_units__hold[4][4];
  assign output_units__in___msg[0] = switch_units__out__msg[0];
  assign switch_units__out__rdy[0] = output_units__in___rdy[0];
  assign output_units__in___val[0] = switch_units__out__val[0];
  assign out__msg[0] = output_units__out__msg[0];
  assign output_units__out__rdy[0] = out__rdy[0];
  assign out__val[0] = output_units__out__val[0];
  assign output_units__in___msg[1] = switch_units__out__msg[1];
  assign switch_units__out__rdy[1] = output_units__in___rdy[1];
  assign output_units__in___val[1] = switch_units__out__val[1];
  assign out__msg[1] = output_units__out__msg[1];
  assign output_units__out__rdy[1] = out__rdy[1];
  assign out__val[1] = output_units__out__val[1];
  assign output_units__in___msg[2] = switch_units__out__msg[2];
  assign switch_units__out__rdy[2] = output_units__in___rdy[2];
  assign output_units__in___val[2] = switch_units__out__val[2];
  assign out__msg[2] = output_units__out__msg[2];
  assign output_units__out__rdy[2] = out__rdy[2];
  assign out__val[2] = output_units__out__val[2];
  assign output_units__in___msg[3] = switch_units__out__msg[3];
  assign switch_units__out__rdy[3] = output_units__in___rdy[3];
  assign output_units__in___val[3] = switch_units__out__val[3];
  assign out__msg[3] = output_units__out__msg[3];
  assign output_units__out__rdy[3] = out__rdy[3];
  assign out__val[3] = output_units__out__val[3];
  assign output_units__in___msg[4] = switch_units__out__msg[4];
  assign switch_units__out__rdy[4] = output_units__in___rdy[4];
  assign output_units__in___val[4] = switch_units__out__val[4];
  assign out__msg[4] = output_units__out__msg[4];
  assign output_units__out__rdy[4] = out__rdy[4];
  assign out__val[4] = output_units__out__val[4];

endmodule
