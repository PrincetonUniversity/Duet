// Modified by Princeton University on June 9th, 2015
// ========== Copyright Header Begin ==========================================
//
// OpenSPARC T1 Processor File: iop.v
// Copyright (c) 2006 Sun Microsystems, Inc.  All Rights Reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES.
//
// The above named program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public
// License version 2 as published by the Free Software Foundation.
//
// The above named program is distributed in the hope that it will be
// useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public
// License along with this work; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
//
// ========== Copyright Header End ============================================
`include "define.tmp.h"
`include "dmbr_define.v"
`include "l15.tmp.h"
`include "jtag.vh"
<%
DMBR_BIN_NUM = 10
import pyhplib
from riscvlib import *
import os
from pyhplib import *
import riscvlib
import time
import os
import sys

# Add pyocn/py to python path
if PITON_NETWORK_CONFIG == "pyocn_config" or PITON_NETWORK_CONFIG == "pyocn_router_config":
    DV_ROOT = os.getenv( 'DV_ROOT' )
    assert DV_ROOT is not None, "Environment variable DV_ROOT is not defined!"
    sys.path.insert( 0, os.path.join( DV_ROOT, 'design/chip/pyocn/py' ) )
    import pyocn_tile_utils

if PITON_ARIANE:
  devices = pyhplib.ReadDevicesXMLFile()

  # just use a default frequency for device tree generation if not defined
  sysFreq = 50000000
  if 'CONFIG_SYS_FREQ' in os.environ:
    sysFreq = int(os.environ['CONFIG_SYS_FREQ'])

  timeStamp = time.strftime("%b %d %Y %H:%M:%S", time.localtime())
  gen_riscv_dts(devices, PITON_RV64_TILES, sysFreq, sysFreq/128, sysFreq, os.environ['ARIANE_ROOT']+"/openpiton/bootrom/", timeStamp)
  get_bootrom_info(devices, PITON_RV64_TILES, sysFreq, sysFreq/128, sysFreq, os.environ['ARIANE_ROOT']+"/openpiton/bootrom/", timeStamp)
%>

`include "prga_axi4.vh"
`include "prga_rxi.vh"
`include "prga_yami.vh"
module prga_yami_tile #(
     parameter TILE_TYPE = `PRGA_YAMI_TILE
) (
    input                               clk,
    input                               rst_n,    // trin: assumed to be synchronous
    input                               clk_en,   // trin: assumed to be asynchronous
    input wire [`NOC_CHIPID_WIDTH-1:0]  default_chipid,
    input wire [`NOC_X_WIDTH-1:0]       default_coreid_x,
    input wire [`NOC_Y_WIDTH-1:0]       default_coreid_y,
    input wire [31:0]                   default_total_num_tiles,
    input wire [`JTAG_FLATID_WIDTH-1:0] flat_tileid,

    // UCB interface for test access port
    input                               jtag_tiles_ucb_val,
    input [`UCB_BUS_WIDTH-1:0]          jtag_tiles_ucb_data,
    output                              tile_jtag_ucb_val,
    output [`UCB_BUS_WIDTH-1:0]         tile_jtag_ucb_data,
<%
s = '''
    // Dynamic Network Inputs 0 (User Dynamic Network)
    input [`NOC_DATA_WIDTH-1:0]         dyn0_dataIn_N,
    input [`NOC_DATA_WIDTH-1:0]         dyn0_dataIn_E,
    input [`NOC_DATA_WIDTH-1:0]         dyn0_dataIn_W,
    input [`NOC_DATA_WIDTH-1:0]         dyn0_dataIn_S,
    input                               dyn0_validIn_N,
    input                               dyn0_validIn_E,
    input                               dyn0_validIn_W,
    input                               dyn0_validIn_S,
    input                               dyn0_dNo_yummy,
    input                               dyn0_dEo_yummy,
    input                               dyn0_dWo_yummy,
    input                               dyn0_dSo_yummy,

    // Dynamic Network Inputs 1 (User Dynamic Network)
    input [`NOC_DATA_WIDTH-1:0]         dyn1_dataIn_N,
    input [`NOC_DATA_WIDTH-1:0]         dyn1_dataIn_E,
    input [`NOC_DATA_WIDTH-1:0]         dyn1_dataIn_W,
    input [`NOC_DATA_WIDTH-1:0]         dyn1_dataIn_S,
    input                               dyn1_validIn_N,
    input                               dyn1_validIn_E,
    input                               dyn1_validIn_W,
    input                               dyn1_validIn_S,
    input                               dyn1_dNo_yummy,
    input                               dyn1_dEo_yummy,
    input                               dyn1_dWo_yummy,
    input                               dyn1_dSo_yummy,

    // Dynamic Network 2 Inputs (User Dynamic Network)
    input [`NOC_DATA_WIDTH-1:0]         dyn2_dataIn_N,
    input [`NOC_DATA_WIDTH-1:0]         dyn2_dataIn_E,
    input [`NOC_DATA_WIDTH-1:0]         dyn2_dataIn_W,
    input [`NOC_DATA_WIDTH-1:0]         dyn2_dataIn_S,
    input                               dyn2_validIn_N,
    input                               dyn2_validIn_E,
    input                               dyn2_validIn_W,
    input                               dyn2_validIn_S,
    input                               dyn2_dNo_yummy,
    input                               dyn2_dEo_yummy,
    input                               dyn2_dWo_yummy,
    input                               dyn2_dSo_yummy,

    // Dynamic network Outputs 0
    output [`NOC_DATA_WIDTH-1:0]        dyn0_dNo,
    output [`NOC_DATA_WIDTH-1:0]        dyn0_dEo,
    output [`NOC_DATA_WIDTH-1:0]        dyn0_dWo,
    output [`NOC_DATA_WIDTH-1:0]        dyn0_dSo,
    output                              dyn0_dNo_valid,
    output                              dyn0_dEo_valid,
    output                              dyn0_dWo_valid,
    output                              dyn0_dSo_valid,
    output                              dyn0_yummyOut_N,
    output                              dyn0_yummyOut_E,
    output                              dyn0_yummyOut_W,
    output                              dyn0_yummyOut_S,
    //output [4:0]                        ec_dyn0,

    // Dynamic network Outputs 1
    output [`NOC_DATA_WIDTH-1:0]        dyn1_dNo,
    output [`NOC_DATA_WIDTH-1:0]        dyn1_dEo,
    output [`NOC_DATA_WIDTH-1:0]        dyn1_dWo,
    output [`NOC_DATA_WIDTH-1:0]        dyn1_dSo,
    output                              dyn1_dNo_valid,
    output                              dyn1_dEo_valid,
    output                              dyn1_dWo_valid,
    output                              dyn1_dSo_valid,
    output                              dyn1_yummyOut_N,
    output                              dyn1_yummyOut_E,
    output                              dyn1_yummyOut_W,
    output                              dyn1_yummyOut_S,
    //output [4:0]                        ec_dyn1,

    // Dynamic network Outputs 2
    output [`NOC_DATA_WIDTH-1:0]        dyn2_dNo,
    output [`NOC_DATA_WIDTH-1:0]        dyn2_dEo,
    output [`NOC_DATA_WIDTH-1:0]        dyn2_dWo,
    output [`NOC_DATA_WIDTH-1:0]        dyn2_dSo,
    output                              dyn2_dNo_valid,
    output                              dyn2_dEo_valid,
    output                              dyn2_dWo_valid,
    output                              dyn2_dSo_valid,
    output                              dyn2_yummyOut_N,
    output                              dyn2_yummyOut_E,
    output                              dyn2_yummyOut_W,
    output                              dyn2_yummyOut_S
    //output [4:0]                        ec_dyn2\
'''
if (PITON_NETWORK_CONFIG == "xbar_config"):
  s = '''
    //condensed signals
    input [`NOC_DATA_WIDTH-1:0]         dyn0_dataIn,
    input                               dyn0_validIn,
    input                               dyn0_do_yummy,

    input [`NOC_DATA_WIDTH-1:0]         dyn1_dataIn,
    input                               dyn1_validIn,
    input                               dyn1_do_yummy,

    input [`NOC_DATA_WIDTH-1:0]         dyn2_dataIn,
    input                               dyn2_validIn,
    input                               dyn2_do_yummy,

    output [`NOC_DATA_WIDTH-1:0]        dyn0_do,
    output                              dyn0_do_valid,
    output                              dyn0_yummyOut,

    output [`NOC_DATA_WIDTH-1:0]        dyn1_do,
    output                              dyn1_do_valid,
    output                              dyn1_yummyOut,

    output [`NOC_DATA_WIDTH-1:0]        dyn2_do,
    output                              dyn2_do_valid,
    output                              dyn2_yummyOut\
'''

if PITON_NETWORK_CONFIG == "pyocn_config":
    s = pyocn_tile_utils.str_tile_noc_ifcs()

if PITON_NETWORK_CONFIG == "pyocn_router_config":
    s = pyocn_tile_utils.str_router_tile_noc_ifcs()

print(s)
%>

`ifdef PITON_ARIANE
    ,
    // Debug
    input                               debug_req_i,   // async debug request
    output                              unavailable_o, // communicate whether the hart is unavailable (e.g.: power down)
    // CLINT
    input                               timer_irq_i,   // Timer interrupts
    input                               ipi_i,         // software interrupt (a.k.a inter-process-interrupt)
    // PLIC
    input   [1:0]                       irq_i          // level sensitive IR lines, mip & sip (async)
`endif
    ,

    // == Application Control Signals ========================================
    input wire                                      aclk,
    input wire                                      arst_n,

    // -- YAMI ---------------------------------------------------------------
    output wire                                     yami_err_o,
    input wire                                      yami_deactivate_i,
    input wire                                      yami_activate_i,

    // == YAMI <-> Application (Fabric) ======================================
    output wire                                     yami_fmc_rdy,
    input wire                                      yami_fmc_vld,
    input wire [`PRGA_YAMI_MTHREAD_ID_WIDTH-1:0]    yami_fmc_thread_id,
    input wire [`PRGA_YAMI_REQTYPE_WIDTH-1:0]       yami_fmc_type,
    input wire [`PRGA_YAMI_SIZE_WIDTH-1:0]          yami_fmc_size,
    input wire [`PRGA_YAMI_FMC_ADDR_WIDTH-1:0]      yami_fmc_addr,
    input wire [`PRGA_YAMI_FMC_DATA_WIDTH-1:0]      yami_fmc_data,
    input wire [`PRGA_YAMI_CACHE_NUM_WAYS_LOG2-1:0] yami_fmc_l1rplway,
    input wire                                      yami_fmc_parity,

    input wire                                      yami_mfc_rdy,
    output wire                                     yami_mfc_vld,
    output wire [`PRGA_YAMI_MTHREAD_ID_WIDTH-1:0]   yami_mfc_thread_id,
    output wire [`PRGA_YAMI_RESPTYPE_WIDTH-1:0]     yami_mfc_type,
    output wire [`PRGA_YAMI_MFC_ADDR_WIDTH-1:0]     yami_mfc_addr,
    output wire [`PRGA_YAMI_MFC_DATA_WIDTH-1:0]     yami_mfc_data,
    output wire                                     yami_mfc_l1invall,
    output wire [`PRGA_YAMI_CACHE_NUM_WAYS_LOG2-1:0]    yami_mfc_l1invway

);
    // clock gating
    wire clk_gated;
    clk_gating_latch clk_gating_latch(
        .clk(clk),
        .clk_en(clk_en),
        .clk_out(clk_gated)
    );

    // flop reset signal
    reg rst_n_f;
    
    always @ (posedge clk)
    begin
      rst_n_f <= rst_n;
    end

    // Move the flat_id xy transition out of socket
    wire [`HOME_ID_WIDTH-1:0]             l15csm_flat_id;
    wire [`NOC_X_WIDTH-1:0]               l15csm_x      ;
    wire [`NOC_Y_WIDTH-1:0]               l15csm_y      ;
    wire [`HOME_ID_WIDTH-1:0]             l15noc1enc_flat_id;
    wire [`NOC_X_WIDTH-1:0]               l15noc1enc_x      ;
    wire [`NOC_Y_WIDTH-1:0]               l15noc1enc_y      ;
    wire [`HOME_ID_WIDTH-1:0]             l2p1s2_flat_id;
    wire [`NOC_X_WIDTH-1:0]               l2p1s2_x      ;
    wire [`NOC_Y_WIDTH-1:0]               l2p1s2_y      ;
    wire [`HOME_ID_WIDTH-1:0]             l2p1s4_flat_id;
    wire [`NOC_X_WIDTH-1:0]               l2p1s4_x      ;
    wire [`NOC_Y_WIDTH-1:0]               l2p1s4_y      ;
    flat_id_to_xy l15csm_flat_id_to_xy (
        .flat_id    (l15csm_flat_id),
        .x_coord    (l15csm_x      ),
        .y_coord    (l15csm_y      )
    );
    flat_id_to_xy l15noc1enc_flat_id_to_xy (
        .flat_id    (l15noc1enc_flat_id),
        .x_coord    (l15noc1enc_x      ),
        .y_coord    (l15noc1enc_y      )
    );
    xy_to_flat_id l2p1s2_xy_to_flat_id (
        .flat_id    (l2p1s2_flat_id),
        .x_coord    (l2p1s2_x      ),
        .y_coord    (l2p1s2_y      )
    );
    flat_id_to_xy l2p1s4_flat_id_to_xy (
        .flat_id    (l2p1s4_flat_id),
        .x_coord    (l2p1s4_x      ),
        .y_coord    (l2p1s4_y      )
    );


    // On-chip devices

<%
s = '''
    wire                          splitter_dev_DEVID_vr_noc_NOCID_val;
    wire  [`NOC_DATA_WIDTH-1:0]   splitter_dev_DEVID_vr_noc_NOCID_dat;
    wire                          splitter_dev_DEVID_vr_noc_NOCID_rdy;

    wire                          dev_DEVID_merger_vr_noc_NOCID_val;
    wire  [`NOC_DATA_WIDTH-1:0]   dev_DEVID_merger_vr_noc_NOCID_dat;
    wire                          dev_DEVID_merger_vr_noc_NOCID_rdy;
'''
s_noc3 = '''
    wire                          splitter_dev_DEVID_vr_noc3_val;
    wire  [`NOC_DATA_WIDTH-1:0]   splitter_dev_DEVID_vr_noc3_dat;
    wire                          splitter_dev_DEVID_vr_noc3_rdy;
'''
for i in range(2):
    for j in range(1):  # reduce to only one on-chip device port in one tile
        ss = s.replace("_NOCID", repr(i+1))
        ss = ss.replace("_DEVID", repr(j+1))
        print(ss)
for j in range(1):
    ss = s_noc3.replace("_DEVID", repr(j+1))
    print(ss)
%>

    wire   [4:0]                        pcx_transducer_req;
    wire                                pcx_transducer_atomic_req;
    wire   [123:0]                      pcx_transducer_data;

    `ifndef NO_RTL_CSM
    wire   [`TLB_CSM]                   pcx_transducer_csm;
    `endif

    wire [4:0]                          transducer_pcx_grant;
    // is actually cpx_data_valid
    wire                                transducer_cpx_data_ready;
    wire [144:0]                        transducer_cpx_data;

    wire                                spc_grst_l;
    wire                                cpx_arb_spc_data_rdy;
    wire [144:0]                        cpx_arb_spc_data;
    wire [4:0]                          cpx_arb_spc_grant;

    wire [`PCX_REQTYPE_WIDTH-1:0]       transducer_l15_rqtype;
    wire [`L15_AMO_OP_WIDTH-1:0]        transducer_l15_amo_op;

    wire                                transducer_l15_nc;
    wire [`PCX_SIZE_FIELD_WIDTH-1:0]    transducer_l15_size;
    wire [`L15_THREADID_MASK]           transducer_l15_threadid;
    wire                                transducer_l15_prefetch;
    wire                                transducer_l15_invalidate_cacheline;
    wire                                transducer_l15_blockstore;
    wire                                transducer_l15_blockinitstore;
    wire [1:0]                          transducer_l15_l1rplway;
    wire                                transducer_l15_val;
    wire [`L15_PADDR_HI:0]              transducer_l15_address;
    wire [63:0]                         transducer_l15_data;
    wire [63:0]                         transducer_l15_data_next_entry;
    wire [`TLB_CSM_WIDTH-1:0]           transducer_l15_csm_data;

    wire                                l15_transducer_ack;
    wire                                l15_transducer_header_ack;

    wire                                l15_transducer_val;
    wire [3:0]                          l15_transducer_returntype;
    wire                                l15_transducer_l2miss;
    wire [1:0]                          l15_transducer_error;
    wire                                l15_transducer_noncacheable;
    wire                                l15_transducer_atomic;
    wire [`L15_THREADID_MASK]           l15_transducer_threadid;
    wire                                l15_transducer_prefetch;
    wire                                l15_transducer_f4b;
    wire [63:0]                         l15_transducer_data_0;
    wire [63:0]                         l15_transducer_data_1;
    wire [63:0]                         l15_transducer_data_2;
    wire [63:0]                         l15_transducer_data_3;
    wire                                l15_transducer_inval_icache_all_way;
    wire                                l15_transducer_inval_dcache_all_way;
    wire [15:4]                         l15_transducer_inval_address_15_4;
    wire                                l15_transducer_cross_invalidate;
    wire [1:0]                          l15_transducer_cross_invalidate_way;
    wire                                l15_transducer_inval_dcache_inval;
    wire                                l15_transducer_inval_icache_inval;
    wire [1:0]                          l15_transducer_inval_way;
    wire                                l15_transducer_blockinitstore;

    wire                                transducer_l15_req_ack;


    wire [`CORE_JTAG_BUS_WIDTH-1:0] core_rtap_data;
    wire rtap_core_val;
    wire [1:0] rtap_core_threadid;
    wire [`JTAG_CORE_ID_WIDTH-1:0]  rtap_core_id;
    wire [`CORE_JTAG_BUS_WIDTH-1:0] rtap_core_data;

    // the cpx arbitrator should give priority to the L1.5
    // when communicating with the sparc core
    wire [144:0]                        fpu_arb_data;
    wire                                fpu_arb_data_rdy;
    wire                                fpu_arb_grant;


    wire [`HOME_ALLOC_METHOD_WIDTH-1:0] config_home_alloc_method;
    wire [31:0]                         config_system_tile_count;
    // configured X/Y/CHIPID
    wire [`NOC_CHIPID_WIDTH-1:0]        config_chipid;
    wire [`NOC_X_WIDTH-1:0]             config_coreid_x;
    wire [`NOC_Y_WIDTH-1:0]             config_coreid_y;


    // r/w port for jtag to config regs
    wire rtap_config_req_val;
    wire rtap_config_req_rw;
    wire [63:0] rtap_config_write_req_data;
    wire [`CONFIG_REG_ADDRESS_MASK] rtap_config_req_address;
    wire [63:0] config_rtap_read_res_data;

    // SRAM wrapper interfaces
    wire [`BIST_OP_WIDTH-1:0] rtap_srams_bist_command;
    wire [`SRAM_WRAPPER_BUS_WIDTH-1:0] rtap_srams_bist_data;
    wire [`SRAM_WRAPPER_BUS_WIDTH-1:0] sparc_rtap_data;

    wire [`SRAM_WRAPPER_BUS_WIDTH-1:0] srams_rtap_data;
    wire [`SRAM_WRAPPER_BUS_WIDTH-1:0] l15_rtap_data;
    wire [`SRAM_WRAPPER_BUS_WIDTH-1:0] l2_rtap_data;

    wire        rtap_arb_req_val;
    wire [63:0] rtap_arb_req_data;
    wire [1:0]  rtap_arb_req_threadid;

<%
if PITON_NETWORK_CONFIG == "pyocn_router_config":
    s = pyocn_tile_utils.define_wires_between_socket_and_core()
    print(s)
%>


///////////////////////
// Instantiate Cores //
///////////////////////

<%
if PITON_NETWORK_CONFIG == "pyocn_router_config":
    s = pyocn_tile_utils.feed_through_connection()
    print(s)
%>

// configuration set in it's own generate block
generate
if ( TILE_TYPE == `SPARC_TILE || TILE_TYPE == `PICORV32_TILE || TILE_TYPE == `ARIANE_RV64_TILE) begin: g_default_unused_ports_connect
    // On-chip devices NoC connection
    // Wire up unused pins of splitter/merger
    // Configure the splitter and merger
<%
s = '''
    assign splitter_dev_DEVID_vr_noc_NOCID_rdy = 1'b0;
    assign dev_DEVID_merger_vr_noc_NOCID_val = 1'b0;
    assign dev_DEVID_merger_vr_noc_NOCID_dat = {`NOC_DATA_WIDTH{1'b0}};
'''
s_noc3 = '''
    assign splitter_dev_DEVID_vr_noc3_rdy = 1'b0;
'''
for i in range(2):
    for j in range(1):
        ss = s.replace("_NOCID", repr(i+1))
        ss = ss.replace("_DEVID", repr(j+1))
        print(ss)
for j in range(1):
    ss = s_noc3.replace("_DEVID", repr(j+1))
    print(ss)
%>
end
endgenerate

generate
if (TILE_TYPE == `SPARC_TILE) begin : g_sparc_core
`ifdef PITON_OST1
    ////////////////
    // SPARC Core //
    ////////////////

    sparc_core core(
       .gclk(clk_gated),
       .reset_l(rst_n_f),
       .spc_grst_l(spc_grst_l),
       .spc0_pcx_req_pq(pcx_transducer_req),
       .spc0_pcx_atom_pq(pcx_transducer_atomic_req),
       .spc0_pcx_data_pa(pcx_transducer_data),
       `ifndef NO_RTL_CSM
       .spc0_pcx_csm_pa(pcx_transducer_csm),
       `endif
       .pcx_spc0_grant_px(cpx_arb_spc_grant[0]),
       .cpx_spc0_data_cx2(cpx_arb_spc_data),

       // sram interfaces
       .srams_rtap_data (sparc_rtap_data),
       .rtap_srams_bist_command (rtap_srams_bist_command),
       .rtap_srams_bist_data (rtap_srams_bist_data),

       .core_rtap_data        (core_rtap_data),
       .rtap_core_val         (rtap_core_val),
       .rtap_core_threadid    (rtap_core_threadid),
       .rtap_core_id          (rtap_core_id),
       .rtap_core_data        (rtap_core_data[47:0])

    );

    /////////
    // FPU //
    /////////

    fpu_arb_wrap fpu_arb_wrap(
        .clk (clk_gated),
        .rst_n (rst_n_f),

        .pcx_fpio_data_px2_67_0     (pcx_transducer_data[67:0]),
        .pcx_fpio_data_px2_79_72    (pcx_transducer_data[79:72]),
        .pcx_fpio_data_px2_116_112  (pcx_transducer_data[116:112]),
        .pcx_fpio_data_px2_123_118  (pcx_transducer_data[123:118]),

        .l15_fp_rdy(transducer_cpx_data_ready),

        .fpu_arb_data_rdy(fpu_arb_data_rdy),
        .fpu_arb_data(fpu_arb_data),
        .fpu_arb_grant(fpu_arb_grant)
    );

    ////////////////////
    // CPX Arbitrator //
    ////////////////////

    cpx_arbitrator cpx_arbitrator(
        .clk(clk_gated),
        .rst_n(rst_n_f),

        .rtap_arb_req_val(rtap_arb_req_val),
        .rtap_arb_req_data(rtap_arb_req_data),
        .rtap_arb_req_threadid(rtap_arb_req_threadid),

        .uncore_spc_data_ready(transducer_cpx_data_ready),
        .uncore_spc_data(transducer_cpx_data),
        .uncore_spc_grant(transducer_pcx_grant),

        .fpu_arb_data_rdy(fpu_arb_data_rdy),
        .fpu_arb_data(fpu_arb_data),
        .fpu_arb_grant(fpu_arb_grant),

        .cpx_arb_spc_data_rdy(cpx_arb_spc_data_rdy),
        .cpx_arb_spc_data(cpx_arb_spc_data),
        .cpx_arb_spc_grant(cpx_arb_spc_grant)
    );

    ccx_l15_transducer ccx_l15_transducer(
        .clk                                (clk),
        .rst_n                              (rst_n),

        .pcx_transducer_req_0               (pcx_transducer_req[0]),
        .pcx_transducer_atomic_req          (pcx_transducer_atomic_req),
        .pcx_transducer_data_123_117        (pcx_transducer_data[123:117]),
        .pcx_transducer_data_112_0          (pcx_transducer_data[112:0]),

        `ifndef NO_RTL_CSM
        .pcx_transducer_csm                 (pcx_transducer_csm),
        `endif

        .transducer_pcx_grant               (transducer_pcx_grant),
        .transducer_cpx_data_ready          (transducer_cpx_data_ready),
        .transducer_cpx_data                (transducer_cpx_data),

        .l15_transducer_ack                 (l15_transducer_ack),
        .l15_transducer_header_ack          (l15_transducer_header_ack),

        .transducer_l15_rqtype              (transducer_l15_rqtype),
        .transducer_l15_amo_op              (transducer_l15_amo_op),
        .transducer_l15_size                (transducer_l15_size),
        .transducer_l15_val                 (transducer_l15_val),
        .transducer_l15_address             (transducer_l15_address),
        .transducer_l15_data                (transducer_l15_data),

        .transducer_l15_nc                  (transducer_l15_nc),
        .transducer_l15_threadid            (transducer_l15_threadid),
        .transducer_l15_prefetch            (transducer_l15_prefetch),
        .transducer_l15_blockstore          (transducer_l15_blockstore),
        .transducer_l15_blockinitstore      (transducer_l15_blockinitstore),
        .transducer_l15_l1rplway            (transducer_l15_l1rplway),
        .transducer_l15_invalidate_cacheline(transducer_l15_invalidate_cacheline),
        .transducer_l15_csm_data            (transducer_l15_csm_data),
        .transducer_l15_data_next_entry     (transducer_l15_data_next_entry),

        .l15_transducer_val                 (l15_transducer_val),
        .l15_transducer_returntype          (l15_transducer_returntype),
        .l15_transducer_l2miss              (l15_transducer_l2miss),
        .l15_transducer_error               (l15_transducer_error),
        .l15_transducer_noncacheable        (l15_transducer_noncacheable),
        .l15_transducer_atomic              (l15_transducer_atomic),
        .l15_transducer_threadid            (l15_transducer_threadid),
        .l15_transducer_prefetch            (l15_transducer_prefetch),
        .l15_transducer_f4b                 (l15_transducer_f4b),
        .l15_transducer_data_0              (l15_transducer_data_0),
        .l15_transducer_data_1              (l15_transducer_data_1),
        .l15_transducer_data_2              (l15_transducer_data_2),
        .l15_transducer_data_3              (l15_transducer_data_3),
        .l15_transducer_inval_icache_all_way(l15_transducer_inval_icache_all_way),
        .l15_transducer_inval_dcache_all_way(l15_transducer_inval_dcache_all_way),
        .l15_transducer_inval_address_15_4  (l15_transducer_inval_address_15_4),
        .l15_transducer_cross_invalidate    (l15_transducer_cross_invalidate),
        .l15_transducer_cross_invalidate_way(l15_transducer_cross_invalidate_way),
        .l15_transducer_inval_dcache_inval  (l15_transducer_inval_dcache_inval),
        .l15_transducer_inval_icache_inval  (l15_transducer_inval_icache_inval),
        .l15_transducer_inval_way           (l15_transducer_inval_way),
        .l15_transducer_blockinitstore      (l15_transducer_blockinitstore),

        .transducer_l15_req_ack             (transducer_l15_req_ack)
    );

`endif // ifdef PITON_OST1
end
endgenerate
generate
if (TILE_TYPE == `PICORV32_TILE) begin : g_picorv32_core
`ifdef PITON_PICO
    ///////////////////
    // PicoRV32 Core //
    ///////////////////
    wire         pico_transducer_mem_valid;
    wire         transducer_pico_mem_ready;
    wire [31:0]  pico_transducer_mem_addr;
    wire [31:0]  pico_transducer_mem_wdata;
    wire [ 3:0]  pico_transducer_mem_wstrb;
    wire [`L15_AMO_OP_WIDTH-1:0] pico_transducer_mem_amo_op;
    wire [31:0]  transducer_pico_mem_rdata;
    wire         pico_int;

    picorv32 core(
        .clk        (clk_gated),
        .reset_l    (rst_n_f),
        .trap       (),
        .mem_valid  (pico_transducer_mem_valid),
        .mem_instr  (),
        .mem_ready  (transducer_pico_mem_ready),
        .mem_addr   (pico_transducer_mem_addr),
        .mem_wdata  (pico_transducer_mem_wdata),
        .mem_wstrb  (pico_transducer_mem_wstrb),
        .mem_amo_op (pico_transducer_mem_amo_op),
        .mem_rdata  (transducer_pico_mem_rdata),

        .pico_int   (pico_int)
    );

    pico_reset pico_reset(
        .gclk(clk_gated),
        .rst_n(rst_n_f),
        .spc_grst_l(spc_grst_l)
    );

    pico_l15_transducer pico_l15_transducer(
        .clk                                (clk),
        .rst_n                              (rst_n),

        .pico_transducer_mem_valid          (pico_transducer_mem_valid),
        .pico_transducer_mem_addr           (pico_transducer_mem_addr),
        .pico_transducer_mem_wstrb          (pico_transducer_mem_wstrb),
        .pico_transducer_mem_wdata          (pico_transducer_mem_wdata),
        .pico_transducer_mem_amo_op         (pico_transducer_mem_amo_op),
        .l15_transducer_ack                 (l15_transducer_ack),
        .l15_transducer_header_ack          (l15_transducer_header_ack),

        .transducer_l15_rqtype              (transducer_l15_rqtype),
        .transducer_l15_amo_op              (transducer_l15_amo_op),
        .transducer_l15_size                (transducer_l15_size),
        .transducer_l15_val                 (transducer_l15_val),
        .transducer_l15_address             (transducer_l15_address),
        .transducer_l15_data                (transducer_l15_data),

        .transducer_l15_nc                  (transducer_l15_nc),
        .transducer_l15_threadid            (transducer_l15_threadid),
        .transducer_l15_prefetch            (transducer_l15_prefetch),
        .transducer_l15_blockstore          (transducer_l15_blockstore),
        .transducer_l15_blockinitstore      (transducer_l15_blockinitstore),
        .transducer_l15_l1rplway            (transducer_l15_l1rplway),
        .transducer_l15_invalidate_cacheline(transducer_l15_invalidate_cacheline),
        .transducer_l15_csm_data            (transducer_l15_csm_data),
        .transducer_l15_data_next_entry     (transducer_l15_data_next_entry),

        .l15_transducer_val                 (l15_transducer_val),
        .l15_transducer_returntype          (l15_transducer_returntype),

        .l15_transducer_data_0              (l15_transducer_data_0),
        .l15_transducer_data_1              (l15_transducer_data_1),

        .transducer_pico_mem_ready          (transducer_pico_mem_ready),
        .transducer_pico_mem_rdata          (transducer_pico_mem_rdata),

        .transducer_l15_req_ack             (transducer_l15_req_ack),
        .pico_int                           (pico_int)
    );

`endif // ifdef PITON_PICO
end
endgenerate
generate
if (TILE_TYPE == `ARIANE_RV64_TILE) begin : g_ariane_core
    //////////////////////
    // Ariane RV64 Core //
    //////////////////////

`ifdef PITON_ARIANE

    // TODO: add debug module and CLINT

    // native L15 interface, used in case of ARIANE_RV64, otherwise tied to zero
    wire [`L15_REQ_WIDTH-1:0]  l15_req;
    wire [`L15_RTRN_WIDTH-1:0] l15_rtrn;

    // see serpent_cache_pkg.sv for definition of the packed struct type "l15_rtrn_t",
    // note that the constants defined in l15.tmp.h and serpent_cache_pkg.sv need to coincide!
    assign l15_rtrn = { l15_transducer_ack,
                        l15_transducer_header_ack,
                        l15_transducer_val,
                        l15_transducer_returntype,
                        l15_transducer_l2miss,
                        l15_transducer_error,
                        l15_transducer_noncacheable,
                        l15_transducer_atomic,
                        l15_transducer_threadid,
                        l15_transducer_prefetch,
                        l15_transducer_f4b,
                        l15_transducer_data_0,
                        l15_transducer_data_1,
                        l15_transducer_data_2,
                        l15_transducer_data_3,
                        l15_transducer_inval_icache_all_way,
                        l15_transducer_inval_dcache_all_way,
                        l15_transducer_inval_address_15_4,
                        l15_transducer_cross_invalidate,
                        l15_transducer_cross_invalidate_way,
                        l15_transducer_inval_dcache_inval,
                        l15_transducer_inval_icache_inval,
                        l15_transducer_inval_way,
                        l15_transducer_blockinitstore };

    wire [2:0] transducer_l15_size_pcx_standard;
    // see serpent_cache_pkg.sv for definition of the packed struct type "l15_req_t",
    // note that the constants defined in l15.tmp.h and serpent_cache_pkg.sv need to coincide!
    assign { transducer_l15_val,
             transducer_l15_req_ack,
             transducer_l15_rqtype,
             transducer_l15_nc,
             transducer_l15_size_pcx_standard,
             transducer_l15_threadid,
             transducer_l15_prefetch,
             transducer_l15_invalidate_cacheline,
             transducer_l15_blockstore,
             transducer_l15_blockinitstore,
             transducer_l15_l1rplway,
             transducer_l15_address,
             transducer_l15_data,
             transducer_l15_data_next_entry,
             transducer_l15_csm_data,
             transducer_l15_amo_op} = l15_req;

    // Could remove this converter after Ariane is changed to send the 
    // PMesh standard data size
    assign transducer_l15_size = (transducer_l15_size_pcx_standard == `PCX_SZ_1B) ? `MSG_DATA_SIZE_1B :
                                    (transducer_l15_size_pcx_standard == `PCX_SZ_2B) ? `MSG_DATA_SIZE_2B : 
                                    (transducer_l15_size_pcx_standard == `PCX_SZ_4B) ? `MSG_DATA_SIZE_4B : 
                                    (transducer_l15_size_pcx_standard == `PCX_SZ_8B) ? `MSG_DATA_SIZE_8B : 
                                    (transducer_l15_size_pcx_standard == `PCX_SZ_16B && 
                                     transducer_l15_rqtype == `PCX_REQTYPE_IFILL && 
                                    ~transducer_l15_invalidate_cacheline) ? `MSG_DATA_SIZE_32B : `MSG_DATA_SIZE_16B; 

    wire [63:0] ariane_bootaddr;

<%

def clipAddress(addr, digits):
    return addr[max(0,len(addr)-digits):]

cacheBase    = 0
cacheLength  = 0
dmBase       = 0
dmLength     = 0
romBase      = 0
romLength    = 0
romIsPresent = 0

execBase   = "{"
execLength = "{"
numRules   = 0
if PITON_ARIANE:
    for i in range(len(devices)):
        if devices[i]["name"] == "mem":
            cacheBase    = "%X" % devices[i]["base"]
            cacheLength  = "%X" % devices[i]["length"]
            numRules    += 1
            if execBase != "{":
              execBase   += ", 64'h" + cacheBase
              execLength += ", 64'h" + cacheLength
            else:
              execBase   += "64'h" + cacheBase
              execLength += "64'h" + cacheLength
        if devices[i]["name"] == "ariane_debug":
            dmBase       = "%X" % devices[i]["base"]
            dmLength     = "%X" % devices[i]["length"]
            numRules    += 1
            if execBase != "{":
              execBase   += ", 64'h" + dmBase
              execLength += ", 64'h" + dmLength
            else:
              execBase   += "64'h" + dmBase
              execLength += "64'h" + dmLength
        if devices[i]["name"] == "ariane_bootrom":
            romBase      = "%X" % devices[i]["base"]
            romLength    = "%X" % devices[i]["length"]
            numRules    += 1
            romIsPresent = 1
            if execBase != "{":
              execBase   += ", 64'h" + romBase
              execLength += ", 64'h" + romLength
            else:
              execBase   += "64'h" + romBase
              execLength += "64'h" + romLength

execBase   += "}"
execLength += "}"

bootAddr = cacheBase
if romIsPresent:
  bootAddr = romBase

print("    assign ariane_bootaddr  =  64'h%s;" % bootAddr)
%>


    ariane_verilog_wrap #(
<%
str = '''
        .DmBaseAddress          ( 64'h%s ),
        .SwapEndianess          ( 1'b1 ),
        .NrExecuteRegionRules   ( %d   ),
        .ExecuteRegionAddrBase  ( %s   ),
        .ExecuteRegionLength    ( %s   ),
        .NrCachedRegionRules    (  1   ),
        .CachedRegionAddrBase   ( {64'h%s} ),
        .CachedRegionLength     ( {64'h%s} )''' % (dmBase, numRules, execBase, execLength, cacheBase, cacheLength)
print(str)
%>
    ) core (
        .clk_i       ( clk_gated              ),
        .reset_l     ( rst_n_f                ),
        .spc_grst_l  ( spc_grst_l             ),
        .boot_addr_i ( ariane_bootaddr        ),
        .hart_id_i   ( {{64-`JTAG_FLATID_WIDTH{1'b0}}, flat_tileid} ),
        .irq_i       ( irq_i                  ),
        .ipi_i       ( ipi_i                  ),
        .time_irq_i  ( timer_irq_i            ),
        .debug_req_i ( debug_req_i            ),
        .l15_req_o   ( l15_req                ),
        .l15_rtrn_i  ( l15_rtrn               )
    );

    assign unavailable_o = 1'b0;

`endif // ifdef PITON_ARIANE
  end
  endgenerate

generate
if (TILE_TYPE == `PRGA_YAMI_TILE) begin : g_prga_yami_tile
///////////////////
// PRGA RXI Tile //
///////////////////

`ifdef PITON_PRGA

    // On-chip devices NoC connection

    // When instantiating the config reg,
    // connect to splitter_dev1_vr_nocX... and dev1_merger_vr_nocX...
    // there are both input/output ports for 3 NoCs,
    // if not use them all, wire the unused val/rdy to 0.

    // Wire up unused ports of splitter/merger(here: dev4)
    // Configure the splitter and merger
    assign splitter_dev1_vr_noc2_rdy = 1'b0;
    assign splitter_dev1_vr_noc3_rdy = 1'b0;
    assign dev1_merger_vr_noc1_val = 1'b0;
    assign dev1_merger_vr_noc1_dat = {`NOC_DATA_WIDTH{1'b0}};

    prga_yami_core i_prga_yami_core (
        .clk                                (clk)
        ,.rst_n                             (rst_n_f)

<%
if PITON_NETWORK_CONFIG == "pyocn_router_config":
    s = '''
        ,
        .dyn0_in_N_dat_s2c                      (dyn0_in_N_dat_s2c),
        .dyn0_in_N_val_s2c                      (dyn0_in_N_val_s2c),
        .dyn0_in_N_rdy_s2c                      (dyn0_in_N_rdy_s2c),
        .dyn1_in_N_dat_s2c                      (dyn1_in_N_dat_s2c),
        .dyn1_in_N_val_s2c                      (dyn1_in_N_val_s2c),
        .dyn1_in_N_rdy_s2c                      (dyn1_in_N_rdy_s2c),
        .dyn2_in_N_dat_s2c                      (dyn2_in_N_dat_s2c),
        .dyn2_in_N_val_s2c                      (dyn2_in_N_val_s2c),
        .dyn2_in_N_rdy_s2c                      (dyn2_in_N_rdy_s2c),
        .dyn0_out_N_dat_s2c                     (dyn0_out_N_dat_s2c),
        .dyn0_out_N_val_s2c                     (dyn0_out_N_val_s2c),
        .dyn0_out_N_rdy_s2c                     (dyn0_out_N_rdy_s2c),
        .dyn1_out_N_dat_s2c                     (dyn1_out_N_dat_s2c),
        .dyn1_out_N_val_s2c                     (dyn1_out_N_val_s2c),
        .dyn1_out_N_rdy_s2c                     (dyn1_out_N_rdy_s2c),
        .dyn2_out_N_dat_s2c                     (dyn2_out_N_dat_s2c),
        .dyn2_out_N_val_s2c                     (dyn2_out_N_val_s2c),
        .dyn2_out_N_rdy_s2c                     (dyn2_out_N_rdy_s2c),

        .dyn0_in_N_dat                      (dyn0_in_N_dat),
        .dyn0_in_N_val                      (dyn0_in_N_val),
        .dyn0_in_N_rdy                      (dyn0_in_N_rdy),
        .dyn1_in_N_dat                      (dyn1_in_N_dat),
        .dyn1_in_N_val                      (dyn1_in_N_val),
        .dyn1_in_N_rdy                      (dyn1_in_N_rdy),
        .dyn2_in_N_dat                      (dyn2_in_N_dat),
        .dyn2_in_N_val                      (dyn2_in_N_val),
        .dyn2_in_N_rdy                      (dyn2_in_N_rdy),
        .dyn0_out_N_dat                     (dyn0_out_N_dat),
        .dyn0_out_N_val                     (dyn0_out_N_val),
        .dyn0_out_N_rdy                     (dyn0_out_N_rdy),
        .dyn1_out_N_dat                     (dyn1_out_N_dat),
        .dyn1_out_N_val                     (dyn1_out_N_val),
        .dyn1_out_N_rdy                     (dyn1_out_N_rdy),
        .dyn2_out_N_dat                     (dyn2_out_N_dat),
        .dyn2_out_N_val                     (dyn2_out_N_val),
        .dyn2_out_N_rdy                     (dyn2_out_N_rdy)
    '''
    print(s)
%>

        // == NoC interface ==
        ,.noc_core_vr_noc1_val              (splitter_dev1_vr_noc1_val)
        ,.noc_core_vr_noc1_data             (splitter_dev1_vr_noc1_dat)
        ,.core_noc_vr_noc1_rdy              (splitter_dev1_vr_noc1_rdy)

        ,.core_noc_vr_noc2_val              (dev1_merger_vr_noc2_val)
        ,.core_noc_vr_noc2_data             (dev1_merger_vr_noc2_dat)
        ,.noc_core_vr_noc2_rdy              (dev1_merger_vr_noc2_rdy)

        // == L1.5 interface ==
        ,.transducer_l15_val                    (transducer_l15_val)
        ,.transducer_l15_threadid               (transducer_l15_threadid)
        ,.transducer_l15_rqtype                 (transducer_l15_rqtype)
        ,.transducer_l15_nc                     (transducer_l15_nc)
        ,.transducer_l15_size                   (transducer_l15_size)
        ,.transducer_l15_address                (transducer_l15_address)
        ,.transducer_l15_data                   (transducer_l15_data)
        ,.transducer_l15_amo_op                 (transducer_l15_amo_op)
        ,.transducer_l15_l1rplway               (transducer_l15_l1rplway)

        ,.transducer_l15_prefetch               (transducer_l15_prefetch)
        ,.transducer_l15_invalidate_cacheline   (transducer_l15_invalidate_cacheline)
        ,.transducer_l15_blockstore             (transducer_l15_blockstore)
        ,.transducer_l15_blockinitstore         (transducer_l15_blockinitstore)
        ,.transducer_l15_data_next_entry        (transducer_l15_data_next_entry)
        ,.transducer_l15_csm_data               (transducer_l15_csm_data)

        ,.l15_transducer_ack                    (l15_transducer_ack)
        ,.l15_transducer_header_ack             (l15_transducer_header_ack)

        ,.l15_transducer_val                    (l15_transducer_val)
        ,.l15_transducer_threadid               (l15_transducer_threadid)
        ,.l15_transducer_returntype             (l15_transducer_returntype)
        ,.l15_transducer_inval_address_15_4     (l15_transducer_inval_address_15_4)
        ,.l15_transducer_inval_dcache_inval     (l15_transducer_inval_dcache_inval)
        ,.l15_transducer_inval_dcache_all_way   (l15_transducer_inval_dcache_all_way)
        ,.l15_transducer_inval_way              (l15_transducer_inval_way)
        ,.l15_transducer_data_0                 (l15_transducer_data_0)
        ,.l15_transducer_data_1                 (l15_transducer_data_1)

        ,.transducer_l15_req_ack                (transducer_l15_req_ack)

        ,.aclk                                  (aclk)
        ,.arst_n                                (arst_n)
        ,.yami_err_o                            (yami_err_o)
        ,.yami_deactivate_i                     (yami_deactivate_i)
        ,.yami_activate_i                       (yami_activate_i)

        ,.yami_fmc_rdy                          (yami_fmc_rdy)
        ,.yami_fmc_vld                          (yami_fmc_vld)
        ,.yami_fmc_thread_id                    (yami_fmc_thread_id)
        ,.yami_fmc_type                         (yami_fmc_type)
        ,.yami_fmc_size                         (yami_fmc_size)
        ,.yami_fmc_addr                         (yami_fmc_addr)
        ,.yami_fmc_data                         (yami_fmc_data)
        ,.yami_fmc_l1rplway                     (yami_fmc_l1rplway)
        ,.yami_fmc_parity                       (yami_fmc_parity)
        ,.yami_mfc_rdy                          (yami_mfc_rdy)
        ,.yami_mfc_vld                          (yami_mfc_vld)
        ,.yami_mfc_thread_id                    (yami_mfc_thread_id)
        ,.yami_mfc_type                         (yami_mfc_type)
        ,.yami_mfc_addr                         (yami_mfc_addr)
        ,.yami_mfc_data                         (yami_mfc_data)
        ,.yami_mfc_l1invall                     (yami_mfc_l1invall)
        ,.yami_mfc_l1invway                     (yami_mfc_l1invway)
    );

`endif
end // PRGA_YAMI_TILE
endgenerate

    ////////////
    // Socket //
    ////////////

    socket socket_inst(
        .clk_gated(clk_gated),
        .rst_n_f(rst_n_f),
        .spc_grst_l(spc_grst_l),

        .default_chipid             (default_chipid),
        .default_coreid_x           (default_coreid_x),
        .default_coreid_y           (default_coreid_y),
        .default_total_num_tiles    (default_total_num_tiles),

        .rtap_srams_bist_command    (rtap_srams_bist_command),
        .rtap_srams_bist_data       (rtap_srams_bist_data),
        .l15_rtap_data              (l15_rtap_data),
        .l2_rtap_data               (l2_rtap_data),

        .rtap_config_req_val (rtap_config_req_val),
        .rtap_config_req_rw (rtap_config_req_rw),
        .rtap_config_write_req_data (rtap_config_write_req_data),
        .rtap_config_req_address (rtap_config_req_address),
        .config_rtap_read_res_data (config_rtap_read_res_data),

        .transducer_l15_rqtype              (transducer_l15_rqtype),
        .transducer_l15_amo_op              (transducer_l15_amo_op),
        .transducer_l15_nc                  (transducer_l15_nc),
        .transducer_l15_size                (transducer_l15_size),
        // .pcxdecoder_l15_invalall         (transducer_l15_invalall),
        .transducer_l15_threadid            (transducer_l15_threadid),
        .transducer_l15_prefetch            (transducer_l15_prefetch),
        .transducer_l15_blockstore          (transducer_l15_blockstore),
        .transducer_l15_blockinitstore      (transducer_l15_blockinitstore),
        .transducer_l15_l1rplway            (transducer_l15_l1rplway),
        .transducer_l15_val                 (transducer_l15_val),
        .transducer_l15_invalidate_cacheline(transducer_l15_invalidate_cacheline),
        .transducer_l15_address             (transducer_l15_address),
        .transducer_l15_csm_data            (transducer_l15_csm_data),
        .transducer_l15_data                (transducer_l15_data),
        .transducer_l15_data_next_entry     (transducer_l15_data_next_entry),

        .l15_transducer_ack                 (l15_transducer_ack),
        .l15_transducer_header_ack          (l15_transducer_header_ack),

        .l15_transducer_val                 (l15_transducer_val),
        .l15_transducer_returntype          (l15_transducer_returntype),
        .l15_transducer_l2miss              (l15_transducer_l2miss),
        .l15_transducer_error               (l15_transducer_error),
        .l15_transducer_noncacheable        (l15_transducer_noncacheable),
        .l15_transducer_atomic              (l15_transducer_atomic),
        .l15_transducer_threadid            (l15_transducer_threadid),
        .l15_transducer_prefetch            (l15_transducer_prefetch),
        .l15_transducer_f4b                 (l15_transducer_f4b),
        .l15_transducer_data_0              (l15_transducer_data_0),
        .l15_transducer_data_1              (l15_transducer_data_1),
        .l15_transducer_data_2              (l15_transducer_data_2),
        .l15_transducer_data_3              (l15_transducer_data_3),
        .l15_transducer_inval_icache_all_way(l15_transducer_inval_icache_all_way),
        .l15_transducer_inval_dcache_all_way(l15_transducer_inval_dcache_all_way),
        .l15_transducer_inval_address_15_4  (l15_transducer_inval_address_15_4),
        .l15_transducer_cross_invalidate    (l15_transducer_cross_invalidate),
        .l15_transducer_cross_invalidate_way(l15_transducer_cross_invalidate_way),
        .l15_transducer_inval_dcache_inval  (l15_transducer_inval_dcache_inval),
        .l15_transducer_inval_icache_inval  (l15_transducer_inval_icache_inval),
        .l15_transducer_inval_way           (l15_transducer_inval_way),
        .l15_transducer_blockinitstore      (l15_transducer_blockinitstore),

        .transducer_l15_req_ack             (transducer_l15_req_ack),

        // flat_id xy convertion
        .l15csm_flat_id         (l15csm_flat_id),
        .l15csm_x               (l15csm_x      ),
        .l15csm_y               (l15csm_y      ),
        .l15noc1enc_flat_id     (l15noc1enc_flat_id),
        .l15noc1enc_x           (l15noc1enc_x      ),
        .l15noc1enc_y           (l15noc1enc_y      ),
        .l2p1s2_x               (l2p1s2_x      ),
        .l2p1s2_y               (l2p1s2_y      ),
        .l2p1s2_flat_id         (l2p1s2_flat_id),
        .l2p1s4_x               (l2p1s4_x      ),
        .l2p1s4_y               (l2p1s4_y      ),
        .l2p1s4_flat_id         (l2p1s4_flat_id),

        .config_system_tile_count     (config_system_tile_count     ),
        .config_home_alloc_method     (config_home_alloc_method     ),
        .config_chipid                (config_chipid                ),
        .config_coreid_x              (config_coreid_x              ),
        .config_coreid_y              (config_coreid_y              ),

        // On-chip devices
<%
s = '''
        .splitter_dst_PORTID_vr_noc_NOCID_val   (splitter_dev_DEVID_vr_noc_NOCID_val),
        .splitter_dst_PORTID_vr_noc_NOCID_dat   (splitter_dev_DEVID_vr_noc_NOCID_dat),
        .splitter_dst_PORTID_vr_noc_NOCID_rdy   (splitter_dev_DEVID_vr_noc_NOCID_rdy),

        .src_PORTID_merger_vr_noc_NOCID_val     (dev_DEVID_merger_vr_noc_NOCID_val  ),
        .src_PORTID_merger_vr_noc_NOCID_dat     (dev_DEVID_merger_vr_noc_NOCID_dat  ),
        .src_PORTID_merger_vr_noc_NOCID_rdy     (dev_DEVID_merger_vr_noc_NOCID_rdy  ),
'''
s_noc3 = '''
        .splitter_dst_PORTID_vr_noc3_val   (splitter_dev_DEVID_vr_noc3_val),
        .splitter_dst_PORTID_vr_noc3_dat   (splitter_dev_DEVID_vr_noc3_dat),
        .splitter_dst_PORTID_vr_noc3_rdy   (splitter_dev_DEVID_vr_noc3_rdy),
'''
for i in range(2):
    for j in range(1):  # only one on-chip device port in one tile
        ss = s.replace("_NOCID", repr(i+1))
        ss = ss.replace("_PORTID", repr(j+1))
        ss = ss.replace("_DEVID", repr(j+1))
        print(ss)
for j in range(1):
    ss = s_noc3.replace("_PORTID", repr(j+1))
    ss = ss.replace("_DEVID", repr(j+1))
    print(ss)
%>

        // NoC connection
<%
s = '''
        // Dynamic Network Inputs 0 (User Dynamic Network)
        .dyn0_dataIn_N                      (dyn0_dataIn_N),
        .dyn0_dataIn_E                      (dyn0_dataIn_E),
        .dyn0_dataIn_W                      (dyn0_dataIn_W),
        .dyn0_dataIn_S                      (dyn0_dataIn_S),
        .dyn0_validIn_N                     (dyn0_validIn_N),
        .dyn0_validIn_E                     (dyn0_validIn_E),
        .dyn0_validIn_W                     (dyn0_validIn_W),
        .dyn0_validIn_S                     (dyn0_validIn_S),
        .dyn0_dNo_yummy                     (dyn0_dNo_yummy),
        .dyn0_dEo_yummy                     (dyn0_dEo_yummy),
        .dyn0_dWo_yummy                     (dyn0_dWo_yummy),
        .dyn0_dSo_yummy                     (dyn0_dSo_yummy),

        // Dynamic Network Inputs 1 (User Dynamic Network)
        .dyn1_dataIn_N                      (dyn1_dataIn_N),
        .dyn1_dataIn_E                      (dyn1_dataIn_E),
        .dyn1_dataIn_W                      (dyn1_dataIn_W),
        .dyn1_dataIn_S                      (dyn1_dataIn_S),
        .dyn1_validIn_N                     (dyn1_validIn_N),
        .dyn1_validIn_E                     (dyn1_validIn_E),
        .dyn1_validIn_W                     (dyn1_validIn_W),
        .dyn1_validIn_S                     (dyn1_validIn_S),
        .dyn1_dNo_yummy                     (dyn1_dNo_yummy),
        .dyn1_dEo_yummy                     (dyn1_dEo_yummy),
        .dyn1_dWo_yummy                     (dyn1_dWo_yummy),
        .dyn1_dSo_yummy                     (dyn1_dSo_yummy),

        // Dynamic Network Inputs 2 (User Dynamic Network)
        .dyn2_dataIn_N                      (dyn2_dataIn_N),
        .dyn2_dataIn_E                      (dyn2_dataIn_E),
        .dyn2_dataIn_W                      (dyn2_dataIn_W),
        .dyn2_dataIn_S                      (dyn2_dataIn_S),
        .dyn2_validIn_N                     (dyn2_validIn_N),
        .dyn2_validIn_E                     (dyn2_validIn_E),
        .dyn2_validIn_W                     (dyn2_validIn_W),
        .dyn2_validIn_S                     (dyn2_validIn_S),
        .dyn2_dNo_yummy                     (dyn2_dNo_yummy),
        .dyn2_dEo_yummy                     (dyn2_dEo_yummy),
        .dyn2_dWo_yummy                     (dyn2_dWo_yummy),
        .dyn2_dSo_yummy                     (dyn2_dSo_yummy),

        // Dynamic network Outputs 0
        .dyn0_dNo                           (dyn0_dNo),
        .dyn0_dEo                           (dyn0_dEo),
        .dyn0_dWo                           (dyn0_dWo),
        .dyn0_dSo                           (dyn0_dSo),
        .dyn0_dNo_valid                     (dyn0_dNo_valid),
        .dyn0_dEo_valid                     (dyn0_dEo_valid),
        .dyn0_dWo_valid                     (dyn0_dWo_valid),
        .dyn0_dSo_valid                     (dyn0_dSo_valid),
        .dyn0_yummyOut_N                    (dyn0_yummyOut_N),
        .dyn0_yummyOut_E                    (dyn0_yummyOut_E),
        .dyn0_yummyOut_W                    (dyn0_yummyOut_W),
        .dyn0_yummyOut_S                    (dyn0_yummyOut_S),

        // Dynamic network Outputs 1
        .dyn1_dNo                           (dyn1_dNo),
        .dyn1_dEo                           (dyn1_dEo),
        .dyn1_dWo                           (dyn1_dWo),
        .dyn1_dSo                           (dyn1_dSo),
        .dyn1_dNo_valid                     (dyn1_dNo_valid),
        .dyn1_dEo_valid                     (dyn1_dEo_valid),
        .dyn1_dWo_valid                     (dyn1_dWo_valid),
        .dyn1_dSo_valid                     (dyn1_dSo_valid),
        .dyn1_yummyOut_N                    (dyn1_yummyOut_N),
        .dyn1_yummyOut_E                    (dyn1_yummyOut_E),
        .dyn1_yummyOut_W                    (dyn1_yummyOut_W),
        .dyn1_yummyOut_S                    (dyn1_yummyOut_S),

        // Dynamic network Outputs 2
        .dyn2_dNo                           (dyn2_dNo),
        .dyn2_dEo                           (dyn2_dEo),
        .dyn2_dWo                           (dyn2_dWo),
        .dyn2_dSo                           (dyn2_dSo),
        .dyn2_dNo_valid                     (dyn2_dNo_valid),
        .dyn2_dEo_valid                     (dyn2_dEo_valid),
        .dyn2_dWo_valid                     (dyn2_dWo_valid),
        .dyn2_dSo_valid                     (dyn2_dSo_valid),
        .dyn2_yummyOut_N                    (dyn2_yummyOut_N),
        .dyn2_yummyOut_E                    (dyn2_yummyOut_E),
        .dyn2_yummyOut_W                    (dyn2_yummyOut_W),
        .dyn2_yummyOut_S                    (dyn2_yummyOut_S)

'''
if (PITON_NETWORK_CONFIG == "xbar_config"):
  s = '''
        //condensed signals
        .dyn0_dataIn        (dyn0_dataIn),
        .dyn0_validIn       (dyn0_validIn),
        .dyn0_do_yummy      (dyn0_do_yummy),

        .dyn1_dataIn        (dyn1_dataIn),
        .dyn1_validIn       (dyn1_validIn),
        .dyn1_do_yummy      (dyn1_do_yummy),

        .dyn2_dataIn        (dyn2_dataIn),
        .dyn2_validIn       (dyn2_validIn),
        .dyn2_do_yummy      (dyn2_do_yummy),

        .dyn0_do            (dyn0_do),
        .dyn0_do_valid      (dyn0_do_valid),
        .dyn0_yummyOut      (dyn0_yummyOut),

        .dyn1_do            (dyn1_do),
        .dyn1_do_valid      (dyn1_do_valid),
        .dyn1_yummyOut      (dyn1_yummyOut),

        .dyn2_do            (dyn2_do),
        .dyn2_do_valid      (dyn2_do_valid),
        .dyn2_yummyOut      (dyn2_yummyOut)\
'''

## NOTICE: Dont support PITON_NETWORK_CONFIG==pyocn_config here

if PITON_NETWORK_CONFIG == "pyocn_router_config":
    s = pyocn_tile_utils.str_router_tile_noc_direct_connect()

print(s)
%>

    );

    // RTAP module

    // merge sram reponses
    assign srams_rtap_data = l15_rtap_data | l2_rtap_data; //sparc_rtap_data


    rtap rtap(
        .clk(clk_gated),
        .rst_n(rst_n_f),
        .own_tileid(flat_tileid),

        // UCB bus interface
        .tile_jtag_ucb_val(tile_jtag_ucb_val),
        .tile_jtag_ucb_data(tile_jtag_ucb_data),
        .jtag_tiles_ucb_val(jtag_tiles_ucb_val),
        .jtag_tiles_ucb_data(jtag_tiles_ucb_data),

        // interface to srams
        .srams_rtap_data (srams_rtap_data),
        .rtap_srams_bist_command (rtap_srams_bist_command),
        .rtap_srams_bist_data (rtap_srams_bist_data),

        // insert interrupt packets for jtag
        .rtap_arb_req_val (rtap_arb_req_val),
        .rtap_arb_req_data (rtap_arb_req_data),
        .rtap_arb_req_threadid (rtap_arb_req_threadid),

        // jtag-config_regs interface
        .rtap_config_req_val (rtap_config_req_val),
        .rtap_config_req_rw (rtap_config_req_rw),
        .rtap_config_write_req_data (rtap_config_write_req_data),
        .rtap_config_req_address (rtap_config_req_address),
        .config_rtap_read_res_data (config_rtap_read_res_data),

        .core_rtap_data        (core_rtap_data),
        .rtap_core_val         (rtap_core_val),
        .rtap_core_threadid    (rtap_core_threadid),
        .rtap_core_id          (rtap_core_id),
        .rtap_core_data        (rtap_core_data)
    );

endmodule
